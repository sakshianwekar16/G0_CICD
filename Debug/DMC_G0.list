
DMC_G0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006768  08006768  00007768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006988  08006988  000082bc  2**0
                  CONTENTS
  4 .ARM          00000000  08006988  08006988  000082bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006988  08006988  000082bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00007988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002bc  20000000  08006990  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  200002c0  08006c4c  000082c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08006c4c  00008758  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000082bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002568d  00000000  00000000  000082e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ba9  00000000  00000000  0002d971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c94b  00000000  00000000  0003351a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c6  00000000  00000000  00041228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b51f  00000000  00000000  00042aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000277ac  00000000  00000000  0005e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f857  00000000  00000000  000857b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125010  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033fc  00000000  00000000  00125054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000038  00000000  00000000  00128450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002c0 	.word	0x200002c0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006750 	.word	0x08006750

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002c4 	.word	0x200002c4
 80000fc:	08006750 	.word	0x08006750

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0008      	movs	r0, r1
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fb6d 	bl	8000ad4 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 faed 	bl	80009e4 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fb5f 	bl	8000ad4 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb55 	bl	8000ad4 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fafb 	bl	8000a34 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 faf1 	bl	8000a34 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_f2uiz>:
 8000460:	219e      	movs	r1, #158	@ 0x9e
 8000462:	b510      	push	{r4, lr}
 8000464:	05c9      	lsls	r1, r1, #23
 8000466:	1c04      	adds	r4, r0, #0
 8000468:	f7ff fff0 	bl	800044c <__aeabi_fcmpge>
 800046c:	2800      	cmp	r0, #0
 800046e:	d103      	bne.n	8000478 <__aeabi_f2uiz+0x18>
 8000470:	1c20      	adds	r0, r4, #0
 8000472:	f000 fe5f 	bl	8001134 <__aeabi_f2iz>
 8000476:	bd10      	pop	{r4, pc}
 8000478:	219e      	movs	r1, #158	@ 0x9e
 800047a:	1c20      	adds	r0, r4, #0
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	f000 fcb5 	bl	8000dec <__aeabi_fsub>
 8000482:	f000 fe57 	bl	8001134 <__aeabi_f2iz>
 8000486:	2380      	movs	r3, #128	@ 0x80
 8000488:	061b      	lsls	r3, r3, #24
 800048a:	469c      	mov	ip, r3
 800048c:	4460      	add	r0, ip
 800048e:	e7f2      	b.n	8000476 <__aeabi_f2uiz+0x16>

08000490 <__aeabi_fadd>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	46ce      	mov	lr, r9
 8000494:	4647      	mov	r7, r8
 8000496:	0243      	lsls	r3, r0, #9
 8000498:	0a5a      	lsrs	r2, r3, #9
 800049a:	024e      	lsls	r6, r1, #9
 800049c:	0045      	lsls	r5, r0, #1
 800049e:	0fc4      	lsrs	r4, r0, #31
 80004a0:	0048      	lsls	r0, r1, #1
 80004a2:	4691      	mov	r9, r2
 80004a4:	0e2d      	lsrs	r5, r5, #24
 80004a6:	0a72      	lsrs	r2, r6, #9
 80004a8:	0e00      	lsrs	r0, r0, #24
 80004aa:	4694      	mov	ip, r2
 80004ac:	b580      	push	{r7, lr}
 80004ae:	099b      	lsrs	r3, r3, #6
 80004b0:	0fc9      	lsrs	r1, r1, #31
 80004b2:	09b6      	lsrs	r6, r6, #6
 80004b4:	1a2a      	subs	r2, r5, r0
 80004b6:	428c      	cmp	r4, r1
 80004b8:	d021      	beq.n	80004fe <__aeabi_fadd+0x6e>
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	dd0d      	ble.n	80004da <__aeabi_fadd+0x4a>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d12d      	bne.n	800051e <__aeabi_fadd+0x8e>
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x38>
 80004c6:	e08d      	b.n	80005e4 <__aeabi_fadd+0x154>
 80004c8:	1e51      	subs	r1, r2, #1
 80004ca:	2a01      	cmp	r2, #1
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x40>
 80004ce:	e11d      	b.n	800070c <__aeabi_fadd+0x27c>
 80004d0:	2aff      	cmp	r2, #255	@ 0xff
 80004d2:	d100      	bne.n	80004d6 <__aeabi_fadd+0x46>
 80004d4:	e0ab      	b.n	800062e <__aeabi_fadd+0x19e>
 80004d6:	000a      	movs	r2, r1
 80004d8:	e027      	b.n	800052a <__aeabi_fadd+0x9a>
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d04d      	beq.n	800057a <__aeabi_fadd+0xea>
 80004de:	1b42      	subs	r2, r0, r5
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fadd+0x56>
 80004e4:	e0cc      	b.n	8000680 <__aeabi_fadd+0x1f0>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x5c>
 80004ea:	e079      	b.n	80005e0 <__aeabi_fadd+0x150>
 80004ec:	1e54      	subs	r4, r2, #1
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x64>
 80004f2:	e128      	b.n	8000746 <__aeabi_fadd+0x2b6>
 80004f4:	2aff      	cmp	r2, #255	@ 0xff
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x6a>
 80004f8:	e097      	b.n	800062a <__aeabi_fadd+0x19a>
 80004fa:	0022      	movs	r2, r4
 80004fc:	e0c5      	b.n	800068a <__aeabi_fadd+0x1fa>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	dc00      	bgt.n	8000504 <__aeabi_fadd+0x74>
 8000502:	e096      	b.n	8000632 <__aeabi_fadd+0x1a2>
 8000504:	2800      	cmp	r0, #0
 8000506:	d04f      	beq.n	80005a8 <__aeabi_fadd+0x118>
 8000508:	2dff      	cmp	r5, #255	@ 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x7e>
 800050c:	e08f      	b.n	800062e <__aeabi_fadd+0x19e>
 800050e:	2180      	movs	r1, #128	@ 0x80
 8000510:	04c9      	lsls	r1, r1, #19
 8000512:	430e      	orrs	r6, r1
 8000514:	2a1b      	cmp	r2, #27
 8000516:	dd51      	ble.n	80005bc <__aeabi_fadd+0x12c>
 8000518:	002a      	movs	r2, r5
 800051a:	3301      	adds	r3, #1
 800051c:	e018      	b.n	8000550 <__aeabi_fadd+0xc0>
 800051e:	2dff      	cmp	r5, #255	@ 0xff
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x94>
 8000522:	e084      	b.n	800062e <__aeabi_fadd+0x19e>
 8000524:	2180      	movs	r1, #128	@ 0x80
 8000526:	04c9      	lsls	r1, r1, #19
 8000528:	430e      	orrs	r6, r1
 800052a:	2101      	movs	r1, #1
 800052c:	2a1b      	cmp	r2, #27
 800052e:	dc08      	bgt.n	8000542 <__aeabi_fadd+0xb2>
 8000530:	0031      	movs	r1, r6
 8000532:	2020      	movs	r0, #32
 8000534:	40d1      	lsrs	r1, r2
 8000536:	1a82      	subs	r2, r0, r2
 8000538:	4096      	lsls	r6, r2
 800053a:	0032      	movs	r2, r6
 800053c:	1e50      	subs	r0, r2, #1
 800053e:	4182      	sbcs	r2, r0
 8000540:	4311      	orrs	r1, r2
 8000542:	1a5b      	subs	r3, r3, r1
 8000544:	015a      	lsls	r2, r3, #5
 8000546:	d459      	bmi.n	80005fc <__aeabi_fadd+0x16c>
 8000548:	2107      	movs	r1, #7
 800054a:	002a      	movs	r2, r5
 800054c:	4019      	ands	r1, r3
 800054e:	d049      	beq.n	80005e4 <__aeabi_fadd+0x154>
 8000550:	210f      	movs	r1, #15
 8000552:	4019      	ands	r1, r3
 8000554:	2904      	cmp	r1, #4
 8000556:	d000      	beq.n	800055a <__aeabi_fadd+0xca>
 8000558:	3304      	adds	r3, #4
 800055a:	0159      	lsls	r1, r3, #5
 800055c:	d542      	bpl.n	80005e4 <__aeabi_fadd+0x154>
 800055e:	1c50      	adds	r0, r2, #1
 8000560:	2afe      	cmp	r2, #254	@ 0xfe
 8000562:	d03a      	beq.n	80005da <__aeabi_fadd+0x14a>
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	b2c0      	uxtb	r0, r0
 8000568:	0a5b      	lsrs	r3, r3, #9
 800056a:	05c0      	lsls	r0, r0, #23
 800056c:	4318      	orrs	r0, r3
 800056e:	07e4      	lsls	r4, r4, #31
 8000570:	4320      	orrs	r0, r4
 8000572:	bcc0      	pop	{r6, r7}
 8000574:	46b9      	mov	r9, r7
 8000576:	46b0      	mov	r8, r6
 8000578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057a:	20fe      	movs	r0, #254	@ 0xfe
 800057c:	4680      	mov	r8, r0
 800057e:	1c6f      	adds	r7, r5, #1
 8000580:	0038      	movs	r0, r7
 8000582:	4647      	mov	r7, r8
 8000584:	4207      	tst	r7, r0
 8000586:	d000      	beq.n	800058a <__aeabi_fadd+0xfa>
 8000588:	e08e      	b.n	80006a8 <__aeabi_fadd+0x218>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d000      	beq.n	8000590 <__aeabi_fadd+0x100>
 800058e:	e0b4      	b.n	80006fa <__aeabi_fadd+0x26a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x106>
 8000594:	e0db      	b.n	800074e <__aeabi_fadd+0x2be>
 8000596:	2e00      	cmp	r6, #0
 8000598:	d06c      	beq.n	8000674 <__aeabi_fadd+0x1e4>
 800059a:	1b98      	subs	r0, r3, r6
 800059c:	0145      	lsls	r5, r0, #5
 800059e:	d400      	bmi.n	80005a2 <__aeabi_fadd+0x112>
 80005a0:	e0f7      	b.n	8000792 <__aeabi_fadd+0x302>
 80005a2:	000c      	movs	r4, r1
 80005a4:	1af3      	subs	r3, r6, r3
 80005a6:	e03d      	b.n	8000624 <__aeabi_fadd+0x194>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d01b      	beq.n	80005e4 <__aeabi_fadd+0x154>
 80005ac:	1e51      	subs	r1, r2, #1
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fadd+0x124>
 80005b2:	e082      	b.n	80006ba <__aeabi_fadd+0x22a>
 80005b4:	2aff      	cmp	r2, #255	@ 0xff
 80005b6:	d03a      	beq.n	800062e <__aeabi_fadd+0x19e>
 80005b8:	000a      	movs	r2, r1
 80005ba:	e7ab      	b.n	8000514 <__aeabi_fadd+0x84>
 80005bc:	0031      	movs	r1, r6
 80005be:	2020      	movs	r0, #32
 80005c0:	40d1      	lsrs	r1, r2
 80005c2:	1a82      	subs	r2, r0, r2
 80005c4:	4096      	lsls	r6, r2
 80005c6:	0032      	movs	r2, r6
 80005c8:	1e50      	subs	r0, r2, #1
 80005ca:	4182      	sbcs	r2, r0
 80005cc:	430a      	orrs	r2, r1
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	015a      	lsls	r2, r3, #5
 80005d2:	d5b9      	bpl.n	8000548 <__aeabi_fadd+0xb8>
 80005d4:	1c6a      	adds	r2, r5, #1
 80005d6:	2dfe      	cmp	r5, #254	@ 0xfe
 80005d8:	d175      	bne.n	80006c6 <__aeabi_fadd+0x236>
 80005da:	20ff      	movs	r0, #255	@ 0xff
 80005dc:	2300      	movs	r3, #0
 80005de:	e7c4      	b.n	800056a <__aeabi_fadd+0xda>
 80005e0:	000c      	movs	r4, r1
 80005e2:	0033      	movs	r3, r6
 80005e4:	08db      	lsrs	r3, r3, #3
 80005e6:	2aff      	cmp	r2, #255	@ 0xff
 80005e8:	d146      	bne.n	8000678 <__aeabi_fadd+0x1e8>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f5      	beq.n	80005da <__aeabi_fadd+0x14a>
 80005ee:	2280      	movs	r2, #128	@ 0x80
 80005f0:	03d2      	lsls	r2, r2, #15
 80005f2:	4313      	orrs	r3, r2
 80005f4:	025b      	lsls	r3, r3, #9
 80005f6:	20ff      	movs	r0, #255	@ 0xff
 80005f8:	0a5b      	lsrs	r3, r3, #9
 80005fa:	e7b6      	b.n	800056a <__aeabi_fadd+0xda>
 80005fc:	019f      	lsls	r7, r3, #6
 80005fe:	09bf      	lsrs	r7, r7, #6
 8000600:	0038      	movs	r0, r7
 8000602:	f000 fe45 	bl	8001290 <__clzsi2>
 8000606:	3805      	subs	r0, #5
 8000608:	4087      	lsls	r7, r0
 800060a:	4285      	cmp	r5, r0
 800060c:	dc24      	bgt.n	8000658 <__aeabi_fadd+0x1c8>
 800060e:	003b      	movs	r3, r7
 8000610:	2120      	movs	r1, #32
 8000612:	1b42      	subs	r2, r0, r5
 8000614:	3201      	adds	r2, #1
 8000616:	40d3      	lsrs	r3, r2
 8000618:	1a8a      	subs	r2, r1, r2
 800061a:	4097      	lsls	r7, r2
 800061c:	1e7a      	subs	r2, r7, #1
 800061e:	4197      	sbcs	r7, r2
 8000620:	2200      	movs	r2, #0
 8000622:	433b      	orrs	r3, r7
 8000624:	0759      	lsls	r1, r3, #29
 8000626:	d193      	bne.n	8000550 <__aeabi_fadd+0xc0>
 8000628:	e797      	b.n	800055a <__aeabi_fadd+0xca>
 800062a:	000c      	movs	r4, r1
 800062c:	0033      	movs	r3, r6
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	e7db      	b.n	80005ea <__aeabi_fadd+0x15a>
 8000632:	2a00      	cmp	r2, #0
 8000634:	d014      	beq.n	8000660 <__aeabi_fadd+0x1d0>
 8000636:	1b42      	subs	r2, r0, r5
 8000638:	2d00      	cmp	r5, #0
 800063a:	d14b      	bne.n	80006d4 <__aeabi_fadd+0x244>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0d0      	beq.n	80005e2 <__aeabi_fadd+0x152>
 8000640:	1e51      	subs	r1, r2, #1
 8000642:	2a01      	cmp	r2, #1
 8000644:	d100      	bne.n	8000648 <__aeabi_fadd+0x1b8>
 8000646:	e09e      	b.n	8000786 <__aeabi_fadd+0x2f6>
 8000648:	2aff      	cmp	r2, #255	@ 0xff
 800064a:	d0ef      	beq.n	800062c <__aeabi_fadd+0x19c>
 800064c:	000a      	movs	r2, r1
 800064e:	2a1b      	cmp	r2, #27
 8000650:	dd5f      	ble.n	8000712 <__aeabi_fadd+0x282>
 8000652:	0002      	movs	r2, r0
 8000654:	1c73      	adds	r3, r6, #1
 8000656:	e77b      	b.n	8000550 <__aeabi_fadd+0xc0>
 8000658:	4b50      	ldr	r3, [pc, #320]	@ (800079c <__aeabi_fadd+0x30c>)
 800065a:	1a2a      	subs	r2, r5, r0
 800065c:	403b      	ands	r3, r7
 800065e:	e7e1      	b.n	8000624 <__aeabi_fadd+0x194>
 8000660:	21fe      	movs	r1, #254	@ 0xfe
 8000662:	1c6a      	adds	r2, r5, #1
 8000664:	4211      	tst	r1, r2
 8000666:	d13b      	bne.n	80006e0 <__aeabi_fadd+0x250>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d15d      	bne.n	8000728 <__aeabi_fadd+0x298>
 800066c:	2b00      	cmp	r3, #0
 800066e:	d07f      	beq.n	8000770 <__aeabi_fadd+0x2e0>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d17f      	bne.n	8000774 <__aeabi_fadd+0x2e4>
 8000674:	2200      	movs	r2, #0
 8000676:	08db      	lsrs	r3, r3, #3
 8000678:	025b      	lsls	r3, r3, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	b2d0      	uxtb	r0, r2
 800067e:	e774      	b.n	800056a <__aeabi_fadd+0xda>
 8000680:	28ff      	cmp	r0, #255	@ 0xff
 8000682:	d0d2      	beq.n	800062a <__aeabi_fadd+0x19a>
 8000684:	2480      	movs	r4, #128	@ 0x80
 8000686:	04e4      	lsls	r4, r4, #19
 8000688:	4323      	orrs	r3, r4
 800068a:	2401      	movs	r4, #1
 800068c:	2a1b      	cmp	r2, #27
 800068e:	dc07      	bgt.n	80006a0 <__aeabi_fadd+0x210>
 8000690:	001c      	movs	r4, r3
 8000692:	2520      	movs	r5, #32
 8000694:	40d4      	lsrs	r4, r2
 8000696:	1aaa      	subs	r2, r5, r2
 8000698:	4093      	lsls	r3, r2
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	431c      	orrs	r4, r3
 80006a0:	1b33      	subs	r3, r6, r4
 80006a2:	0005      	movs	r5, r0
 80006a4:	000c      	movs	r4, r1
 80006a6:	e74d      	b.n	8000544 <__aeabi_fadd+0xb4>
 80006a8:	1b9f      	subs	r7, r3, r6
 80006aa:	017a      	lsls	r2, r7, #5
 80006ac:	d422      	bmi.n	80006f4 <__aeabi_fadd+0x264>
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d1a6      	bne.n	8000600 <__aeabi_fadd+0x170>
 80006b2:	2400      	movs	r4, #0
 80006b4:	2000      	movs	r0, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	e757      	b.n	800056a <__aeabi_fadd+0xda>
 80006ba:	199b      	adds	r3, r3, r6
 80006bc:	2501      	movs	r5, #1
 80006be:	3201      	adds	r2, #1
 80006c0:	0159      	lsls	r1, r3, #5
 80006c2:	d400      	bmi.n	80006c6 <__aeabi_fadd+0x236>
 80006c4:	e740      	b.n	8000548 <__aeabi_fadd+0xb8>
 80006c6:	2101      	movs	r1, #1
 80006c8:	4835      	ldr	r0, [pc, #212]	@ (80007a0 <__aeabi_fadd+0x310>)
 80006ca:	4019      	ands	r1, r3
 80006cc:	085b      	lsrs	r3, r3, #1
 80006ce:	4003      	ands	r3, r0
 80006d0:	430b      	orrs	r3, r1
 80006d2:	e7a7      	b.n	8000624 <__aeabi_fadd+0x194>
 80006d4:	28ff      	cmp	r0, #255	@ 0xff
 80006d6:	d0a9      	beq.n	800062c <__aeabi_fadd+0x19c>
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	04c9      	lsls	r1, r1, #19
 80006dc:	430b      	orrs	r3, r1
 80006de:	e7b6      	b.n	800064e <__aeabi_fadd+0x1be>
 80006e0:	2aff      	cmp	r2, #255	@ 0xff
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0x256>
 80006e4:	e779      	b.n	80005da <__aeabi_fadd+0x14a>
 80006e6:	199b      	adds	r3, r3, r6
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	0759      	lsls	r1, r3, #29
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x260>
 80006ee:	e72f      	b.n	8000550 <__aeabi_fadd+0xc0>
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	e7c1      	b.n	8000678 <__aeabi_fadd+0x1e8>
 80006f4:	000c      	movs	r4, r1
 80006f6:	1af7      	subs	r7, r6, r3
 80006f8:	e782      	b.n	8000600 <__aeabi_fadd+0x170>
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d12c      	bne.n	8000758 <__aeabi_fadd+0x2c8>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d193      	bne.n	800062a <__aeabi_fadd+0x19a>
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	2400      	movs	r4, #0
 8000706:	20ff      	movs	r0, #255	@ 0xff
 8000708:	03db      	lsls	r3, r3, #15
 800070a:	e72e      	b.n	800056a <__aeabi_fadd+0xda>
 800070c:	2501      	movs	r5, #1
 800070e:	1b9b      	subs	r3, r3, r6
 8000710:	e718      	b.n	8000544 <__aeabi_fadd+0xb4>
 8000712:	0019      	movs	r1, r3
 8000714:	2520      	movs	r5, #32
 8000716:	40d1      	lsrs	r1, r2
 8000718:	1aaa      	subs	r2, r5, r2
 800071a:	4093      	lsls	r3, r2
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	4193      	sbcs	r3, r2
 8000720:	430b      	orrs	r3, r1
 8000722:	0005      	movs	r5, r0
 8000724:	199b      	adds	r3, r3, r6
 8000726:	e753      	b.n	80005d0 <__aeabi_fadd+0x140>
 8000728:	2b00      	cmp	r3, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x29e>
 800072c:	e77e      	b.n	800062c <__aeabi_fadd+0x19c>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_fadd+0x2a4>
 8000732:	e77c      	b.n	800062e <__aeabi_fadd+0x19e>
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	03d2      	lsls	r2, r2, #15
 8000738:	4591      	cmp	r9, r2
 800073a:	d302      	bcc.n	8000742 <__aeabi_fadd+0x2b2>
 800073c:	4594      	cmp	ip, r2
 800073e:	d200      	bcs.n	8000742 <__aeabi_fadd+0x2b2>
 8000740:	0033      	movs	r3, r6
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	e753      	b.n	80005ee <__aeabi_fadd+0x15e>
 8000746:	000c      	movs	r4, r1
 8000748:	1af3      	subs	r3, r6, r3
 800074a:	3501      	adds	r5, #1
 800074c:	e6fa      	b.n	8000544 <__aeabi_fadd+0xb4>
 800074e:	2e00      	cmp	r6, #0
 8000750:	d0af      	beq.n	80006b2 <__aeabi_fadd+0x222>
 8000752:	000c      	movs	r4, r1
 8000754:	0033      	movs	r3, r6
 8000756:	e78d      	b.n	8000674 <__aeabi_fadd+0x1e4>
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x2ce>
 800075c:	e767      	b.n	800062e <__aeabi_fadd+0x19e>
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	03d2      	lsls	r2, r2, #15
 8000762:	4591      	cmp	r9, r2
 8000764:	d3ed      	bcc.n	8000742 <__aeabi_fadd+0x2b2>
 8000766:	4594      	cmp	ip, r2
 8000768:	d2eb      	bcs.n	8000742 <__aeabi_fadd+0x2b2>
 800076a:	000c      	movs	r4, r1
 800076c:	0033      	movs	r3, r6
 800076e:	e7e8      	b.n	8000742 <__aeabi_fadd+0x2b2>
 8000770:	0033      	movs	r3, r6
 8000772:	e77f      	b.n	8000674 <__aeabi_fadd+0x1e4>
 8000774:	199b      	adds	r3, r3, r6
 8000776:	2200      	movs	r2, #0
 8000778:	0159      	lsls	r1, r3, #5
 800077a:	d5b9      	bpl.n	80006f0 <__aeabi_fadd+0x260>
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <__aeabi_fadd+0x30c>)
 800077e:	4013      	ands	r3, r2
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	2201      	movs	r2, #1
 8000784:	e778      	b.n	8000678 <__aeabi_fadd+0x1e8>
 8000786:	199b      	adds	r3, r3, r6
 8000788:	3201      	adds	r2, #1
 800078a:	3501      	adds	r5, #1
 800078c:	0159      	lsls	r1, r3, #5
 800078e:	d49a      	bmi.n	80006c6 <__aeabi_fadd+0x236>
 8000790:	e6da      	b.n	8000548 <__aeabi_fadd+0xb8>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d08d      	beq.n	80006b2 <__aeabi_fadd+0x222>
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	e76e      	b.n	8000678 <__aeabi_fadd+0x1e8>
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	fbffffff 	.word	0xfbffffff
 80007a0:	7dffffff 	.word	0x7dffffff

080007a4 <__aeabi_fdiv>:
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	464f      	mov	r7, r9
 80007a8:	4646      	mov	r6, r8
 80007aa:	46d6      	mov	lr, sl
 80007ac:	0244      	lsls	r4, r0, #9
 80007ae:	b5c0      	push	{r6, r7, lr}
 80007b0:	0047      	lsls	r7, r0, #1
 80007b2:	1c0e      	adds	r6, r1, #0
 80007b4:	0a64      	lsrs	r4, r4, #9
 80007b6:	0e3f      	lsrs	r7, r7, #24
 80007b8:	0fc5      	lsrs	r5, r0, #31
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d03c      	beq.n	8000838 <__aeabi_fdiv+0x94>
 80007be:	2fff      	cmp	r7, #255	@ 0xff
 80007c0:	d042      	beq.n	8000848 <__aeabi_fdiv+0xa4>
 80007c2:	2300      	movs	r3, #0
 80007c4:	2280      	movs	r2, #128	@ 0x80
 80007c6:	4699      	mov	r9, r3
 80007c8:	469a      	mov	sl, r3
 80007ca:	00e4      	lsls	r4, r4, #3
 80007cc:	04d2      	lsls	r2, r2, #19
 80007ce:	4314      	orrs	r4, r2
 80007d0:	3f7f      	subs	r7, #127	@ 0x7f
 80007d2:	0273      	lsls	r3, r6, #9
 80007d4:	0a5b      	lsrs	r3, r3, #9
 80007d6:	4698      	mov	r8, r3
 80007d8:	0073      	lsls	r3, r6, #1
 80007da:	0e1b      	lsrs	r3, r3, #24
 80007dc:	0ff6      	lsrs	r6, r6, #31
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01b      	beq.n	800081a <__aeabi_fdiv+0x76>
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d013      	beq.n	800080e <__aeabi_fdiv+0x6a>
 80007e6:	4642      	mov	r2, r8
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	00d2      	lsls	r2, r2, #3
 80007ec:	04c9      	lsls	r1, r1, #19
 80007ee:	4311      	orrs	r1, r2
 80007f0:	4688      	mov	r8, r1
 80007f2:	2000      	movs	r0, #0
 80007f4:	3b7f      	subs	r3, #127	@ 0x7f
 80007f6:	0029      	movs	r1, r5
 80007f8:	1aff      	subs	r7, r7, r3
 80007fa:	464b      	mov	r3, r9
 80007fc:	4071      	eors	r1, r6
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d900      	bls.n	8000806 <__aeabi_fdiv+0x62>
 8000804:	e0b5      	b.n	8000972 <__aeabi_fdiv+0x1ce>
 8000806:	4a74      	ldr	r2, [pc, #464]	@ (80009d8 <__aeabi_fdiv+0x234>)
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	58d3      	ldr	r3, [r2, r3]
 800080c:	469f      	mov	pc, r3
 800080e:	4643      	mov	r3, r8
 8000810:	2b00      	cmp	r3, #0
 8000812:	d13f      	bne.n	8000894 <__aeabi_fdiv+0xf0>
 8000814:	3fff      	subs	r7, #255	@ 0xff
 8000816:	3302      	adds	r3, #2
 8000818:	e003      	b.n	8000822 <__aeabi_fdiv+0x7e>
 800081a:	4643      	mov	r3, r8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d12d      	bne.n	800087c <__aeabi_fdiv+0xd8>
 8000820:	2301      	movs	r3, #1
 8000822:	0029      	movs	r1, r5
 8000824:	464a      	mov	r2, r9
 8000826:	4071      	eors	r1, r6
 8000828:	b2c9      	uxtb	r1, r1
 800082a:	431a      	orrs	r2, r3
 800082c:	2a0e      	cmp	r2, #14
 800082e:	d838      	bhi.n	80008a2 <__aeabi_fdiv+0xfe>
 8000830:	486a      	ldr	r0, [pc, #424]	@ (80009dc <__aeabi_fdiv+0x238>)
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	5882      	ldr	r2, [r0, r2]
 8000836:	4697      	mov	pc, r2
 8000838:	2c00      	cmp	r4, #0
 800083a:	d113      	bne.n	8000864 <__aeabi_fdiv+0xc0>
 800083c:	2304      	movs	r3, #4
 800083e:	4699      	mov	r9, r3
 8000840:	3b03      	subs	r3, #3
 8000842:	2700      	movs	r7, #0
 8000844:	469a      	mov	sl, r3
 8000846:	e7c4      	b.n	80007d2 <__aeabi_fdiv+0x2e>
 8000848:	2c00      	cmp	r4, #0
 800084a:	d105      	bne.n	8000858 <__aeabi_fdiv+0xb4>
 800084c:	2308      	movs	r3, #8
 800084e:	4699      	mov	r9, r3
 8000850:	3b06      	subs	r3, #6
 8000852:	27ff      	movs	r7, #255	@ 0xff
 8000854:	469a      	mov	sl, r3
 8000856:	e7bc      	b.n	80007d2 <__aeabi_fdiv+0x2e>
 8000858:	230c      	movs	r3, #12
 800085a:	4699      	mov	r9, r3
 800085c:	3b09      	subs	r3, #9
 800085e:	27ff      	movs	r7, #255	@ 0xff
 8000860:	469a      	mov	sl, r3
 8000862:	e7b6      	b.n	80007d2 <__aeabi_fdiv+0x2e>
 8000864:	0020      	movs	r0, r4
 8000866:	f000 fd13 	bl	8001290 <__clzsi2>
 800086a:	2776      	movs	r7, #118	@ 0x76
 800086c:	1f43      	subs	r3, r0, #5
 800086e:	409c      	lsls	r4, r3
 8000870:	2300      	movs	r3, #0
 8000872:	427f      	negs	r7, r7
 8000874:	4699      	mov	r9, r3
 8000876:	469a      	mov	sl, r3
 8000878:	1a3f      	subs	r7, r7, r0
 800087a:	e7aa      	b.n	80007d2 <__aeabi_fdiv+0x2e>
 800087c:	4640      	mov	r0, r8
 800087e:	f000 fd07 	bl	8001290 <__clzsi2>
 8000882:	4642      	mov	r2, r8
 8000884:	1f43      	subs	r3, r0, #5
 8000886:	409a      	lsls	r2, r3
 8000888:	2376      	movs	r3, #118	@ 0x76
 800088a:	425b      	negs	r3, r3
 800088c:	1a1b      	subs	r3, r3, r0
 800088e:	4690      	mov	r8, r2
 8000890:	2000      	movs	r0, #0
 8000892:	e7b0      	b.n	80007f6 <__aeabi_fdiv+0x52>
 8000894:	2303      	movs	r3, #3
 8000896:	464a      	mov	r2, r9
 8000898:	431a      	orrs	r2, r3
 800089a:	4691      	mov	r9, r2
 800089c:	2003      	movs	r0, #3
 800089e:	33fc      	adds	r3, #252	@ 0xfc
 80008a0:	e7a9      	b.n	80007f6 <__aeabi_fdiv+0x52>
 80008a2:	000d      	movs	r5, r1
 80008a4:	20ff      	movs	r0, #255	@ 0xff
 80008a6:	2200      	movs	r2, #0
 80008a8:	05c0      	lsls	r0, r0, #23
 80008aa:	07ed      	lsls	r5, r5, #31
 80008ac:	4310      	orrs	r0, r2
 80008ae:	4328      	orrs	r0, r5
 80008b0:	bce0      	pop	{r5, r6, r7}
 80008b2:	46ba      	mov	sl, r7
 80008b4:	46b1      	mov	r9, r6
 80008b6:	46a8      	mov	r8, r5
 80008b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ba:	000d      	movs	r5, r1
 80008bc:	2000      	movs	r0, #0
 80008be:	2200      	movs	r2, #0
 80008c0:	e7f2      	b.n	80008a8 <__aeabi_fdiv+0x104>
 80008c2:	4653      	mov	r3, sl
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d0ed      	beq.n	80008a4 <__aeabi_fdiv+0x100>
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d033      	beq.n	8000934 <__aeabi_fdiv+0x190>
 80008cc:	46a0      	mov	r8, r4
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d105      	bne.n	80008de <__aeabi_fdiv+0x13a>
 80008d2:	2000      	movs	r0, #0
 80008d4:	2200      	movs	r2, #0
 80008d6:	e7e7      	b.n	80008a8 <__aeabi_fdiv+0x104>
 80008d8:	0035      	movs	r5, r6
 80008da:	2803      	cmp	r0, #3
 80008dc:	d07a      	beq.n	80009d4 <__aeabi_fdiv+0x230>
 80008de:	003b      	movs	r3, r7
 80008e0:	337f      	adds	r3, #127	@ 0x7f
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dd2d      	ble.n	8000942 <__aeabi_fdiv+0x19e>
 80008e6:	4642      	mov	r2, r8
 80008e8:	0752      	lsls	r2, r2, #29
 80008ea:	d007      	beq.n	80008fc <__aeabi_fdiv+0x158>
 80008ec:	220f      	movs	r2, #15
 80008ee:	4641      	mov	r1, r8
 80008f0:	400a      	ands	r2, r1
 80008f2:	2a04      	cmp	r2, #4
 80008f4:	d002      	beq.n	80008fc <__aeabi_fdiv+0x158>
 80008f6:	2204      	movs	r2, #4
 80008f8:	4694      	mov	ip, r2
 80008fa:	44e0      	add	r8, ip
 80008fc:	4642      	mov	r2, r8
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	d505      	bpl.n	800090e <__aeabi_fdiv+0x16a>
 8000902:	4642      	mov	r2, r8
 8000904:	4b36      	ldr	r3, [pc, #216]	@ (80009e0 <__aeabi_fdiv+0x23c>)
 8000906:	401a      	ands	r2, r3
 8000908:	003b      	movs	r3, r7
 800090a:	4690      	mov	r8, r2
 800090c:	3380      	adds	r3, #128	@ 0x80
 800090e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000910:	dcc8      	bgt.n	80008a4 <__aeabi_fdiv+0x100>
 8000912:	4642      	mov	r2, r8
 8000914:	0192      	lsls	r2, r2, #6
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	b2d8      	uxtb	r0, r3
 800091a:	e7c5      	b.n	80008a8 <__aeabi_fdiv+0x104>
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	2500      	movs	r5, #0
 8000920:	20ff      	movs	r0, #255	@ 0xff
 8000922:	03d2      	lsls	r2, r2, #15
 8000924:	e7c0      	b.n	80008a8 <__aeabi_fdiv+0x104>
 8000926:	2280      	movs	r2, #128	@ 0x80
 8000928:	03d2      	lsls	r2, r2, #15
 800092a:	4214      	tst	r4, r2
 800092c:	d002      	beq.n	8000934 <__aeabi_fdiv+0x190>
 800092e:	4643      	mov	r3, r8
 8000930:	4213      	tst	r3, r2
 8000932:	d049      	beq.n	80009c8 <__aeabi_fdiv+0x224>
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	03d2      	lsls	r2, r2, #15
 8000938:	4322      	orrs	r2, r4
 800093a:	0252      	lsls	r2, r2, #9
 800093c:	20ff      	movs	r0, #255	@ 0xff
 800093e:	0a52      	lsrs	r2, r2, #9
 8000940:	e7b2      	b.n	80008a8 <__aeabi_fdiv+0x104>
 8000942:	2201      	movs	r2, #1
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b1b      	cmp	r3, #27
 8000948:	dcc3      	bgt.n	80008d2 <__aeabi_fdiv+0x12e>
 800094a:	4642      	mov	r2, r8
 800094c:	40da      	lsrs	r2, r3
 800094e:	4643      	mov	r3, r8
 8000950:	379e      	adds	r7, #158	@ 0x9e
 8000952:	40bb      	lsls	r3, r7
 8000954:	1e59      	subs	r1, r3, #1
 8000956:	418b      	sbcs	r3, r1
 8000958:	431a      	orrs	r2, r3
 800095a:	0753      	lsls	r3, r2, #29
 800095c:	d004      	beq.n	8000968 <__aeabi_fdiv+0x1c4>
 800095e:	230f      	movs	r3, #15
 8000960:	4013      	ands	r3, r2
 8000962:	2b04      	cmp	r3, #4
 8000964:	d000      	beq.n	8000968 <__aeabi_fdiv+0x1c4>
 8000966:	3204      	adds	r2, #4
 8000968:	0153      	lsls	r3, r2, #5
 800096a:	d529      	bpl.n	80009c0 <__aeabi_fdiv+0x21c>
 800096c:	2001      	movs	r0, #1
 800096e:	2200      	movs	r2, #0
 8000970:	e79a      	b.n	80008a8 <__aeabi_fdiv+0x104>
 8000972:	4642      	mov	r2, r8
 8000974:	0163      	lsls	r3, r4, #5
 8000976:	0155      	lsls	r5, r2, #5
 8000978:	42ab      	cmp	r3, r5
 800097a:	d215      	bcs.n	80009a8 <__aeabi_fdiv+0x204>
 800097c:	201b      	movs	r0, #27
 800097e:	2200      	movs	r2, #0
 8000980:	3f01      	subs	r7, #1
 8000982:	2601      	movs	r6, #1
 8000984:	001c      	movs	r4, r3
 8000986:	0052      	lsls	r2, r2, #1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2c00      	cmp	r4, #0
 800098c:	db01      	blt.n	8000992 <__aeabi_fdiv+0x1ee>
 800098e:	429d      	cmp	r5, r3
 8000990:	d801      	bhi.n	8000996 <__aeabi_fdiv+0x1f2>
 8000992:	1b5b      	subs	r3, r3, r5
 8000994:	4332      	orrs	r2, r6
 8000996:	3801      	subs	r0, #1
 8000998:	2800      	cmp	r0, #0
 800099a:	d1f3      	bne.n	8000984 <__aeabi_fdiv+0x1e0>
 800099c:	1e58      	subs	r0, r3, #1
 800099e:	4183      	sbcs	r3, r0
 80009a0:	4313      	orrs	r3, r2
 80009a2:	4698      	mov	r8, r3
 80009a4:	000d      	movs	r5, r1
 80009a6:	e79a      	b.n	80008de <__aeabi_fdiv+0x13a>
 80009a8:	201a      	movs	r0, #26
 80009aa:	2201      	movs	r2, #1
 80009ac:	1b5b      	subs	r3, r3, r5
 80009ae:	e7e8      	b.n	8000982 <__aeabi_fdiv+0x1de>
 80009b0:	3b02      	subs	r3, #2
 80009b2:	425a      	negs	r2, r3
 80009b4:	4153      	adcs	r3, r2
 80009b6:	425b      	negs	r3, r3
 80009b8:	0035      	movs	r5, r6
 80009ba:	2200      	movs	r2, #0
 80009bc:	b2d8      	uxtb	r0, r3
 80009be:	e773      	b.n	80008a8 <__aeabi_fdiv+0x104>
 80009c0:	0192      	lsls	r2, r2, #6
 80009c2:	2000      	movs	r0, #0
 80009c4:	0a52      	lsrs	r2, r2, #9
 80009c6:	e76f      	b.n	80008a8 <__aeabi_fdiv+0x104>
 80009c8:	431a      	orrs	r2, r3
 80009ca:	0252      	lsls	r2, r2, #9
 80009cc:	0035      	movs	r5, r6
 80009ce:	20ff      	movs	r0, #255	@ 0xff
 80009d0:	0a52      	lsrs	r2, r2, #9
 80009d2:	e769      	b.n	80008a8 <__aeabi_fdiv+0x104>
 80009d4:	4644      	mov	r4, r8
 80009d6:	e7ad      	b.n	8000934 <__aeabi_fdiv+0x190>
 80009d8:	08006768 	.word	0x08006768
 80009dc:	080067a8 	.word	0x080067a8
 80009e0:	f7ffffff 	.word	0xf7ffffff

080009e4 <__eqsf2>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0042      	lsls	r2, r0, #1
 80009e8:	024e      	lsls	r6, r1, #9
 80009ea:	004c      	lsls	r4, r1, #1
 80009ec:	0245      	lsls	r5, r0, #9
 80009ee:	0a6d      	lsrs	r5, r5, #9
 80009f0:	0e12      	lsrs	r2, r2, #24
 80009f2:	0fc3      	lsrs	r3, r0, #31
 80009f4:	0a76      	lsrs	r6, r6, #9
 80009f6:	0e24      	lsrs	r4, r4, #24
 80009f8:	0fc9      	lsrs	r1, r1, #31
 80009fa:	2aff      	cmp	r2, #255	@ 0xff
 80009fc:	d010      	beq.n	8000a20 <__eqsf2+0x3c>
 80009fe:	2cff      	cmp	r4, #255	@ 0xff
 8000a00:	d00c      	beq.n	8000a1c <__eqsf2+0x38>
 8000a02:	2001      	movs	r0, #1
 8000a04:	42a2      	cmp	r2, r4
 8000a06:	d10a      	bne.n	8000a1e <__eqsf2+0x3a>
 8000a08:	42b5      	cmp	r5, r6
 8000a0a:	d108      	bne.n	8000a1e <__eqsf2+0x3a>
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d00f      	beq.n	8000a30 <__eqsf2+0x4c>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d104      	bne.n	8000a1e <__eqsf2+0x3a>
 8000a14:	0028      	movs	r0, r5
 8000a16:	1e43      	subs	r3, r0, #1
 8000a18:	4198      	sbcs	r0, r3
 8000a1a:	e000      	b.n	8000a1e <__eqsf2+0x3a>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	2001      	movs	r0, #1
 8000a22:	2cff      	cmp	r4, #255	@ 0xff
 8000a24:	d1fb      	bne.n	8000a1e <__eqsf2+0x3a>
 8000a26:	4335      	orrs	r5, r6
 8000a28:	d1f9      	bne.n	8000a1e <__eqsf2+0x3a>
 8000a2a:	404b      	eors	r3, r1
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	e7f6      	b.n	8000a1e <__eqsf2+0x3a>
 8000a30:	2000      	movs	r0, #0
 8000a32:	e7f4      	b.n	8000a1e <__eqsf2+0x3a>

08000a34 <__gesf2>:
 8000a34:	b530      	push	{r4, r5, lr}
 8000a36:	0042      	lsls	r2, r0, #1
 8000a38:	0244      	lsls	r4, r0, #9
 8000a3a:	024d      	lsls	r5, r1, #9
 8000a3c:	0fc3      	lsrs	r3, r0, #31
 8000a3e:	0048      	lsls	r0, r1, #1
 8000a40:	0a64      	lsrs	r4, r4, #9
 8000a42:	0e12      	lsrs	r2, r2, #24
 8000a44:	0a6d      	lsrs	r5, r5, #9
 8000a46:	0e00      	lsrs	r0, r0, #24
 8000a48:	0fc9      	lsrs	r1, r1, #31
 8000a4a:	2aff      	cmp	r2, #255	@ 0xff
 8000a4c:	d019      	beq.n	8000a82 <__gesf2+0x4e>
 8000a4e:	28ff      	cmp	r0, #255	@ 0xff
 8000a50:	d00b      	beq.n	8000a6a <__gesf2+0x36>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d11e      	bne.n	8000a94 <__gesf2+0x60>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d10b      	bne.n	8000a72 <__gesf2+0x3e>
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d027      	beq.n	8000aae <__gesf2+0x7a>
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d134      	bne.n	8000acc <__gesf2+0x98>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d02f      	beq.n	8000ac6 <__gesf2+0x92>
 8000a66:	0008      	movs	r0, r1
 8000a68:	bd30      	pop	{r4, r5, pc}
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d128      	bne.n	8000ac0 <__gesf2+0x8c>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d101      	bne.n	8000a76 <__gesf2+0x42>
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d0f5      	beq.n	8000a62 <__gesf2+0x2e>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	d107      	bne.n	8000a8a <__gesf2+0x56>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d023      	beq.n	8000ac6 <__gesf2+0x92>
 8000a7e:	0018      	movs	r0, r3
 8000a80:	e7f2      	b.n	8000a68 <__gesf2+0x34>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d11c      	bne.n	8000ac0 <__gesf2+0x8c>
 8000a86:	28ff      	cmp	r0, #255	@ 0xff
 8000a88:	d014      	beq.n	8000ab4 <__gesf2+0x80>
 8000a8a:	1e58      	subs	r0, r3, #1
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	4018      	ands	r0, r3
 8000a90:	3801      	subs	r0, #1
 8000a92:	e7e9      	b.n	8000a68 <__gesf2+0x34>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d0f8      	beq.n	8000a8a <__gesf2+0x56>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d1f6      	bne.n	8000a8a <__gesf2+0x56>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	dcf4      	bgt.n	8000a8a <__gesf2+0x56>
 8000aa0:	dbeb      	blt.n	8000a7a <__gesf2+0x46>
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	d8f1      	bhi.n	8000a8a <__gesf2+0x56>
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	42ac      	cmp	r4, r5
 8000aaa:	d2dd      	bcs.n	8000a68 <__gesf2+0x34>
 8000aac:	e7e5      	b.n	8000a7a <__gesf2+0x46>
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d0da      	beq.n	8000a68 <__gesf2+0x34>
 8000ab2:	e7ea      	b.n	8000a8a <__gesf2+0x56>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d103      	bne.n	8000ac0 <__gesf2+0x8c>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d1e6      	bne.n	8000a8a <__gesf2+0x56>
 8000abc:	2000      	movs	r0, #0
 8000abe:	e7d3      	b.n	8000a68 <__gesf2+0x34>
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	e7d0      	b.n	8000a68 <__gesf2+0x34>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	4240      	negs	r0, r0
 8000aca:	e7cd      	b.n	8000a68 <__gesf2+0x34>
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d0e8      	beq.n	8000aa2 <__gesf2+0x6e>
 8000ad0:	e7db      	b.n	8000a8a <__gesf2+0x56>
 8000ad2:	46c0      	nop			@ (mov r8, r8)

08000ad4 <__lesf2>:
 8000ad4:	b530      	push	{r4, r5, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	024d      	lsls	r5, r1, #9
 8000adc:	0fc3      	lsrs	r3, r0, #31
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e00      	lsrs	r0, r0, #24
 8000ae8:	0fc9      	lsrs	r1, r1, #31
 8000aea:	2aff      	cmp	r2, #255	@ 0xff
 8000aec:	d01a      	beq.n	8000b24 <__lesf2+0x50>
 8000aee:	28ff      	cmp	r0, #255	@ 0xff
 8000af0:	d00e      	beq.n	8000b10 <__lesf2+0x3c>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11e      	bne.n	8000b34 <__lesf2+0x60>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	d10e      	bne.n	8000b18 <__lesf2+0x44>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d02a      	beq.n	8000b54 <__lesf2+0x80>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d00c      	beq.n	8000b1c <__lesf2+0x48>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d01d      	beq.n	8000b42 <__lesf2+0x6e>
 8000b06:	1e58      	subs	r0, r3, #1
 8000b08:	2302      	movs	r3, #2
 8000b0a:	4018      	ands	r0, r3
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	e010      	b.n	8000b32 <__lesf2+0x5e>
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d10d      	bne.n	8000b30 <__lesf2+0x5c>
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d120      	bne.n	8000b5a <__lesf2+0x86>
 8000b18:	2c00      	cmp	r4, #0
 8000b1a:	d11e      	bne.n	8000b5a <__lesf2+0x86>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d023      	beq.n	8000b68 <__lesf2+0x94>
 8000b20:	0008      	movs	r0, r1
 8000b22:	e006      	b.n	8000b32 <__lesf2+0x5e>
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d103      	bne.n	8000b30 <__lesf2+0x5c>
 8000b28:	28ff      	cmp	r0, #255	@ 0xff
 8000b2a:	d1ec      	bne.n	8000b06 <__lesf2+0x32>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d017      	beq.n	8000b60 <__lesf2+0x8c>
 8000b30:	2002      	movs	r0, #2
 8000b32:	bd30      	pop	{r4, r5, pc}
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0e6      	beq.n	8000b06 <__lesf2+0x32>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d1e4      	bne.n	8000b06 <__lesf2+0x32>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	dce2      	bgt.n	8000b06 <__lesf2+0x32>
 8000b40:	db04      	blt.n	8000b4c <__lesf2+0x78>
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d8df      	bhi.n	8000b06 <__lesf2+0x32>
 8000b46:	2000      	movs	r0, #0
 8000b48:	42ac      	cmp	r4, r5
 8000b4a:	d2f2      	bcs.n	8000b32 <__lesf2+0x5e>
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <__lesf2+0x94>
 8000b50:	0018      	movs	r0, r3
 8000b52:	e7ee      	b.n	8000b32 <__lesf2+0x5e>
 8000b54:	2c00      	cmp	r4, #0
 8000b56:	d0ec      	beq.n	8000b32 <__lesf2+0x5e>
 8000b58:	e7d5      	b.n	8000b06 <__lesf2+0x32>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d1d3      	bne.n	8000b06 <__lesf2+0x32>
 8000b5e:	e7f5      	b.n	8000b4c <__lesf2+0x78>
 8000b60:	2000      	movs	r0, #0
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d0e5      	beq.n	8000b32 <__lesf2+0x5e>
 8000b66:	e7ce      	b.n	8000b06 <__lesf2+0x32>
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	e7e1      	b.n	8000b32 <__lesf2+0x5e>
 8000b6e:	46c0      	nop			@ (mov r8, r8)

08000b70 <__aeabi_fmul>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	4646      	mov	r6, r8
 8000b76:	46d6      	mov	lr, sl
 8000b78:	0243      	lsls	r3, r0, #9
 8000b7a:	0a5b      	lsrs	r3, r3, #9
 8000b7c:	0045      	lsls	r5, r0, #1
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	4699      	mov	r9, r3
 8000b82:	1c0f      	adds	r7, r1, #0
 8000b84:	0e2d      	lsrs	r5, r5, #24
 8000b86:	0fc6      	lsrs	r6, r0, #31
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fmul+0x1e>
 8000b8c:	e088      	b.n	8000ca0 <__aeabi_fmul+0x130>
 8000b8e:	2dff      	cmp	r5, #255	@ 0xff
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fmul+0x24>
 8000b92:	e08d      	b.n	8000cb0 <__aeabi_fmul+0x140>
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	04d2      	lsls	r2, r2, #19
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4691      	mov	r9, r2
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	3d7f      	subs	r5, #127	@ 0x7f
 8000ba6:	027c      	lsls	r4, r7, #9
 8000ba8:	007b      	lsls	r3, r7, #1
 8000baa:	0a64      	lsrs	r4, r4, #9
 8000bac:	0e1b      	lsrs	r3, r3, #24
 8000bae:	0fff      	lsrs	r7, r7, #31
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d068      	beq.n	8000c86 <__aeabi_fmul+0x116>
 8000bb4:	2bff      	cmp	r3, #255	@ 0xff
 8000bb6:	d021      	beq.n	8000bfc <__aeabi_fmul+0x8c>
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	00e4      	lsls	r4, r4, #3
 8000bbc:	04d2      	lsls	r2, r2, #19
 8000bbe:	4314      	orrs	r4, r2
 8000bc0:	4642      	mov	r2, r8
 8000bc2:	3b7f      	subs	r3, #127	@ 0x7f
 8000bc4:	195b      	adds	r3, r3, r5
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	1c5d      	adds	r5, r3, #1
 8000bca:	2a0a      	cmp	r2, #10
 8000bcc:	dc2e      	bgt.n	8000c2c <__aeabi_fmul+0xbc>
 8000bce:	407e      	eors	r6, r7
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	2a02      	cmp	r2, #2
 8000bd4:	dc23      	bgt.n	8000c1e <__aeabi_fmul+0xae>
 8000bd6:	3a01      	subs	r2, #1
 8000bd8:	2a01      	cmp	r2, #1
 8000bda:	d900      	bls.n	8000bde <__aeabi_fmul+0x6e>
 8000bdc:	e0bd      	b.n	8000d5a <__aeabi_fmul+0x1ea>
 8000bde:	2902      	cmp	r1, #2
 8000be0:	d06e      	beq.n	8000cc0 <__aeabi_fmul+0x150>
 8000be2:	2901      	cmp	r1, #1
 8000be4:	d12c      	bne.n	8000c40 <__aeabi_fmul+0xd0>
 8000be6:	2000      	movs	r0, #0
 8000be8:	2200      	movs	r2, #0
 8000bea:	05c0      	lsls	r0, r0, #23
 8000bec:	07f6      	lsls	r6, r6, #31
 8000bee:	4310      	orrs	r0, r2
 8000bf0:	4330      	orrs	r0, r6
 8000bf2:	bce0      	pop	{r5, r6, r7}
 8000bf4:	46ba      	mov	sl, r7
 8000bf6:	46b1      	mov	r9, r6
 8000bf8:	46a8      	mov	r8, r5
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfc:	002b      	movs	r3, r5
 8000bfe:	33ff      	adds	r3, #255	@ 0xff
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d065      	beq.n	8000cd0 <__aeabi_fmul+0x160>
 8000c04:	2203      	movs	r2, #3
 8000c06:	4641      	mov	r1, r8
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	0032      	movs	r2, r6
 8000c0c:	3501      	adds	r5, #1
 8000c0e:	4688      	mov	r8, r1
 8000c10:	407a      	eors	r2, r7
 8000c12:	35ff      	adds	r5, #255	@ 0xff
 8000c14:	290a      	cmp	r1, #10
 8000c16:	dd00      	ble.n	8000c1a <__aeabi_fmul+0xaa>
 8000c18:	e0d8      	b.n	8000dcc <__aeabi_fmul+0x25c>
 8000c1a:	0016      	movs	r6, r2
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	4640      	mov	r0, r8
 8000c20:	2201      	movs	r2, #1
 8000c22:	4082      	lsls	r2, r0
 8000c24:	20a6      	movs	r0, #166	@ 0xa6
 8000c26:	00c0      	lsls	r0, r0, #3
 8000c28:	4202      	tst	r2, r0
 8000c2a:	d020      	beq.n	8000c6e <__aeabi_fmul+0xfe>
 8000c2c:	4653      	mov	r3, sl
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d046      	beq.n	8000cc0 <__aeabi_fmul+0x150>
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fmul+0xc8>
 8000c36:	e0bb      	b.n	8000db0 <__aeabi_fmul+0x240>
 8000c38:	4651      	mov	r1, sl
 8000c3a:	464c      	mov	r4, r9
 8000c3c:	2901      	cmp	r1, #1
 8000c3e:	d0d2      	beq.n	8000be6 <__aeabi_fmul+0x76>
 8000c40:	002b      	movs	r3, r5
 8000c42:	337f      	adds	r3, #127	@ 0x7f
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dd70      	ble.n	8000d2a <__aeabi_fmul+0x1ba>
 8000c48:	0762      	lsls	r2, r4, #29
 8000c4a:	d004      	beq.n	8000c56 <__aeabi_fmul+0xe6>
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	4022      	ands	r2, r4
 8000c50:	2a04      	cmp	r2, #4
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fmul+0xe6>
 8000c54:	3404      	adds	r4, #4
 8000c56:	0122      	lsls	r2, r4, #4
 8000c58:	d503      	bpl.n	8000c62 <__aeabi_fmul+0xf2>
 8000c5a:	4b63      	ldr	r3, [pc, #396]	@ (8000de8 <__aeabi_fmul+0x278>)
 8000c5c:	401c      	ands	r4, r3
 8000c5e:	002b      	movs	r3, r5
 8000c60:	3380      	adds	r3, #128	@ 0x80
 8000c62:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c64:	dc2c      	bgt.n	8000cc0 <__aeabi_fmul+0x150>
 8000c66:	01a2      	lsls	r2, r4, #6
 8000c68:	0a52      	lsrs	r2, r2, #9
 8000c6a:	b2d8      	uxtb	r0, r3
 8000c6c:	e7bd      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000c6e:	2090      	movs	r0, #144	@ 0x90
 8000c70:	0080      	lsls	r0, r0, #2
 8000c72:	4202      	tst	r2, r0
 8000c74:	d127      	bne.n	8000cc6 <__aeabi_fmul+0x156>
 8000c76:	38b9      	subs	r0, #185	@ 0xb9
 8000c78:	38ff      	subs	r0, #255	@ 0xff
 8000c7a:	4210      	tst	r0, r2
 8000c7c:	d06d      	beq.n	8000d5a <__aeabi_fmul+0x1ea>
 8000c7e:	003e      	movs	r6, r7
 8000c80:	46a1      	mov	r9, r4
 8000c82:	468a      	mov	sl, r1
 8000c84:	e7d2      	b.n	8000c2c <__aeabi_fmul+0xbc>
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d141      	bne.n	8000d0e <__aeabi_fmul+0x19e>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4642      	mov	r2, r8
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	4690      	mov	r8, r2
 8000c92:	002b      	movs	r3, r5
 8000c94:	4642      	mov	r2, r8
 8000c96:	2101      	movs	r1, #1
 8000c98:	1c5d      	adds	r5, r3, #1
 8000c9a:	2a0a      	cmp	r2, #10
 8000c9c:	dd97      	ble.n	8000bce <__aeabi_fmul+0x5e>
 8000c9e:	e7c5      	b.n	8000c2c <__aeabi_fmul+0xbc>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d126      	bne.n	8000cf2 <__aeabi_fmul+0x182>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	2500      	movs	r5, #0
 8000cac:	469a      	mov	sl, r3
 8000cae:	e77a      	b.n	8000ba6 <__aeabi_fmul+0x36>
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d118      	bne.n	8000ce6 <__aeabi_fmul+0x176>
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	4698      	mov	r8, r3
 8000cb8:	3b06      	subs	r3, #6
 8000cba:	25ff      	movs	r5, #255	@ 0xff
 8000cbc:	469a      	mov	sl, r3
 8000cbe:	e772      	b.n	8000ba6 <__aeabi_fmul+0x36>
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	e791      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	2600      	movs	r6, #0
 8000cca:	20ff      	movs	r0, #255	@ 0xff
 8000ccc:	03d2      	lsls	r2, r2, #15
 8000cce:	e78c      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000cd0:	4641      	mov	r1, r8
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	4311      	orrs	r1, r2
 8000cd8:	4688      	mov	r8, r1
 8000cda:	35ff      	adds	r5, #255	@ 0xff
 8000cdc:	290a      	cmp	r1, #10
 8000cde:	dca5      	bgt.n	8000c2c <__aeabi_fmul+0xbc>
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	407e      	eors	r6, r7
 8000ce4:	e774      	b.n	8000bd0 <__aeabi_fmul+0x60>
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	4698      	mov	r8, r3
 8000cea:	3b09      	subs	r3, #9
 8000cec:	25ff      	movs	r5, #255	@ 0xff
 8000cee:	469a      	mov	sl, r3
 8000cf0:	e759      	b.n	8000ba6 <__aeabi_fmul+0x36>
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 facc 	bl	8001290 <__clzsi2>
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	1f43      	subs	r3, r0, #5
 8000cfc:	2576      	movs	r5, #118	@ 0x76
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	426d      	negs	r5, r5
 8000d04:	4691      	mov	r9, r2
 8000d06:	4698      	mov	r8, r3
 8000d08:	469a      	mov	sl, r3
 8000d0a:	1a2d      	subs	r5, r5, r0
 8000d0c:	e74b      	b.n	8000ba6 <__aeabi_fmul+0x36>
 8000d0e:	0020      	movs	r0, r4
 8000d10:	f000 fabe 	bl	8001290 <__clzsi2>
 8000d14:	4642      	mov	r2, r8
 8000d16:	1f43      	subs	r3, r0, #5
 8000d18:	409c      	lsls	r4, r3
 8000d1a:	1a2b      	subs	r3, r5, r0
 8000d1c:	3b76      	subs	r3, #118	@ 0x76
 8000d1e:	2100      	movs	r1, #0
 8000d20:	1c5d      	adds	r5, r3, #1
 8000d22:	2a0a      	cmp	r2, #10
 8000d24:	dc00      	bgt.n	8000d28 <__aeabi_fmul+0x1b8>
 8000d26:	e752      	b.n	8000bce <__aeabi_fmul+0x5e>
 8000d28:	e780      	b.n	8000c2c <__aeabi_fmul+0xbc>
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b1b      	cmp	r3, #27
 8000d30:	dd00      	ble.n	8000d34 <__aeabi_fmul+0x1c4>
 8000d32:	e758      	b.n	8000be6 <__aeabi_fmul+0x76>
 8000d34:	359e      	adds	r5, #158	@ 0x9e
 8000d36:	0022      	movs	r2, r4
 8000d38:	40ac      	lsls	r4, r5
 8000d3a:	40da      	lsrs	r2, r3
 8000d3c:	1e63      	subs	r3, r4, #1
 8000d3e:	419c      	sbcs	r4, r3
 8000d40:	4322      	orrs	r2, r4
 8000d42:	0753      	lsls	r3, r2, #29
 8000d44:	d004      	beq.n	8000d50 <__aeabi_fmul+0x1e0>
 8000d46:	230f      	movs	r3, #15
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fmul+0x1e0>
 8000d4e:	3204      	adds	r2, #4
 8000d50:	0153      	lsls	r3, r2, #5
 8000d52:	d537      	bpl.n	8000dc4 <__aeabi_fmul+0x254>
 8000d54:	2001      	movs	r0, #1
 8000d56:	2200      	movs	r2, #0
 8000d58:	e747      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	0424      	lsls	r4, r4, #16
 8000d60:	0c24      	lsrs	r4, r4, #16
 8000d62:	0027      	movs	r7, r4
 8000d64:	0c10      	lsrs	r0, r2, #16
 8000d66:	0412      	lsls	r2, r2, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	4344      	muls	r4, r0
 8000d6c:	4357      	muls	r7, r2
 8000d6e:	4348      	muls	r0, r1
 8000d70:	4351      	muls	r1, r2
 8000d72:	0c3a      	lsrs	r2, r7, #16
 8000d74:	1909      	adds	r1, r1, r4
 8000d76:	1852      	adds	r2, r2, r1
 8000d78:	4294      	cmp	r4, r2
 8000d7a:	d903      	bls.n	8000d84 <__aeabi_fmul+0x214>
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	0249      	lsls	r1, r1, #9
 8000d80:	468c      	mov	ip, r1
 8000d82:	4460      	add	r0, ip
 8000d84:	043f      	lsls	r7, r7, #16
 8000d86:	0411      	lsls	r1, r2, #16
 8000d88:	0c3f      	lsrs	r7, r7, #16
 8000d8a:	19c9      	adds	r1, r1, r7
 8000d8c:	018c      	lsls	r4, r1, #6
 8000d8e:	1e67      	subs	r7, r4, #1
 8000d90:	41bc      	sbcs	r4, r7
 8000d92:	0c12      	lsrs	r2, r2, #16
 8000d94:	0e89      	lsrs	r1, r1, #26
 8000d96:	1812      	adds	r2, r2, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	4314      	orrs	r4, r2
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	d50e      	bpl.n	8000dc0 <__aeabi_fmul+0x250>
 8000da2:	2301      	movs	r3, #1
 8000da4:	0862      	lsrs	r2, r4, #1
 8000da6:	401c      	ands	r4, r3
 8000da8:	4314      	orrs	r4, r2
 8000daa:	e749      	b.n	8000c40 <__aeabi_fmul+0xd0>
 8000dac:	003e      	movs	r6, r7
 8000dae:	46a1      	mov	r9, r4
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	464b      	mov	r3, r9
 8000db4:	03d2      	lsls	r2, r2, #15
 8000db6:	431a      	orrs	r2, r3
 8000db8:	0252      	lsls	r2, r2, #9
 8000dba:	20ff      	movs	r0, #255	@ 0xff
 8000dbc:	0a52      	lsrs	r2, r2, #9
 8000dbe:	e714      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000dc0:	001d      	movs	r5, r3
 8000dc2:	e73d      	b.n	8000c40 <__aeabi_fmul+0xd0>
 8000dc4:	0192      	lsls	r2, r2, #6
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	0a52      	lsrs	r2, r2, #9
 8000dca:	e70e      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000dcc:	290f      	cmp	r1, #15
 8000dce:	d1ed      	bne.n	8000dac <__aeabi_fmul+0x23c>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	03d2      	lsls	r2, r2, #15
 8000dd6:	4213      	tst	r3, r2
 8000dd8:	d0ea      	beq.n	8000db0 <__aeabi_fmul+0x240>
 8000dda:	4214      	tst	r4, r2
 8000ddc:	d1e8      	bne.n	8000db0 <__aeabi_fmul+0x240>
 8000dde:	003e      	movs	r6, r7
 8000de0:	20ff      	movs	r0, #255	@ 0xff
 8000de2:	4322      	orrs	r2, r4
 8000de4:	e701      	b.n	8000bea <__aeabi_fmul+0x7a>
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	f7ffffff 	.word	0xf7ffffff

08000dec <__aeabi_fsub>:
 8000dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dee:	4647      	mov	r7, r8
 8000df0:	46ce      	mov	lr, r9
 8000df2:	024e      	lsls	r6, r1, #9
 8000df4:	0243      	lsls	r3, r0, #9
 8000df6:	0045      	lsls	r5, r0, #1
 8000df8:	0a72      	lsrs	r2, r6, #9
 8000dfa:	0fc4      	lsrs	r4, r0, #31
 8000dfc:	0048      	lsls	r0, r1, #1
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	4694      	mov	ip, r2
 8000e02:	0a5f      	lsrs	r7, r3, #9
 8000e04:	0e2d      	lsrs	r5, r5, #24
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	0e00      	lsrs	r0, r0, #24
 8000e0a:	0fc9      	lsrs	r1, r1, #31
 8000e0c:	09b6      	lsrs	r6, r6, #6
 8000e0e:	28ff      	cmp	r0, #255	@ 0xff
 8000e10:	d024      	beq.n	8000e5c <__aeabi_fsub+0x70>
 8000e12:	2201      	movs	r2, #1
 8000e14:	4051      	eors	r1, r2
 8000e16:	1a2a      	subs	r2, r5, r0
 8000e18:	428c      	cmp	r4, r1
 8000e1a:	d00f      	beq.n	8000e3c <__aeabi_fsub+0x50>
 8000e1c:	2a00      	cmp	r2, #0
 8000e1e:	dc00      	bgt.n	8000e22 <__aeabi_fsub+0x36>
 8000e20:	e16a      	b.n	80010f8 <__aeabi_fsub+0x30c>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d135      	bne.n	8000e92 <__aeabi_fsub+0xa6>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0x40>
 8000e2a:	e0a2      	b.n	8000f72 <__aeabi_fsub+0x186>
 8000e2c:	1e51      	subs	r1, r2, #1
 8000e2e:	2a01      	cmp	r2, #1
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x48>
 8000e32:	e124      	b.n	800107e <__aeabi_fsub+0x292>
 8000e34:	2aff      	cmp	r2, #255	@ 0xff
 8000e36:	d021      	beq.n	8000e7c <__aeabi_fsub+0x90>
 8000e38:	000a      	movs	r2, r1
 8000e3a:	e02f      	b.n	8000e9c <__aeabi_fsub+0xb0>
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	dc00      	bgt.n	8000e42 <__aeabi_fsub+0x56>
 8000e40:	e167      	b.n	8001112 <__aeabi_fsub+0x326>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d05e      	beq.n	8000f04 <__aeabi_fsub+0x118>
 8000e46:	2dff      	cmp	r5, #255	@ 0xff
 8000e48:	d018      	beq.n	8000e7c <__aeabi_fsub+0x90>
 8000e4a:	2180      	movs	r1, #128	@ 0x80
 8000e4c:	04c9      	lsls	r1, r1, #19
 8000e4e:	430e      	orrs	r6, r1
 8000e50:	2a1b      	cmp	r2, #27
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_fsub+0x6a>
 8000e54:	e076      	b.n	8000f44 <__aeabi_fsub+0x158>
 8000e56:	002a      	movs	r2, r5
 8000e58:	3301      	adds	r3, #1
 8000e5a:	e032      	b.n	8000ec2 <__aeabi_fsub+0xd6>
 8000e5c:	002a      	movs	r2, r5
 8000e5e:	3aff      	subs	r2, #255	@ 0xff
 8000e60:	4691      	mov	r9, r2
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d042      	beq.n	8000eec <__aeabi_fsub+0x100>
 8000e66:	428c      	cmp	r4, r1
 8000e68:	d055      	beq.n	8000f16 <__aeabi_fsub+0x12a>
 8000e6a:	464a      	mov	r2, r9
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_fsub+0x86>
 8000e70:	e09c      	b.n	8000fac <__aeabi_fsub+0x1c0>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x8c>
 8000e76:	e077      	b.n	8000f68 <__aeabi_fsub+0x17c>
 8000e78:	000c      	movs	r4, r1
 8000e7a:	0033      	movs	r3, r6
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_fsub+0x98>
 8000e82:	e06e      	b.n	8000f62 <__aeabi_fsub+0x176>
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	03d2      	lsls	r2, r2, #15
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	025b      	lsls	r3, r3, #9
 8000e8c:	20ff      	movs	r0, #255	@ 0xff
 8000e8e:	0a5b      	lsrs	r3, r3, #9
 8000e90:	e024      	b.n	8000edc <__aeabi_fsub+0xf0>
 8000e92:	2dff      	cmp	r5, #255	@ 0xff
 8000e94:	d0f2      	beq.n	8000e7c <__aeabi_fsub+0x90>
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	04c9      	lsls	r1, r1, #19
 8000e9a:	430e      	orrs	r6, r1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2a1b      	cmp	r2, #27
 8000ea0:	dc08      	bgt.n	8000eb4 <__aeabi_fsub+0xc8>
 8000ea2:	0031      	movs	r1, r6
 8000ea4:	2020      	movs	r0, #32
 8000ea6:	40d1      	lsrs	r1, r2
 8000ea8:	1a82      	subs	r2, r0, r2
 8000eaa:	4096      	lsls	r6, r2
 8000eac:	0032      	movs	r2, r6
 8000eae:	1e50      	subs	r0, r2, #1
 8000eb0:	4182      	sbcs	r2, r0
 8000eb2:	4311      	orrs	r1, r2
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	015a      	lsls	r2, r3, #5
 8000eb8:	d460      	bmi.n	8000f7c <__aeabi_fsub+0x190>
 8000eba:	2107      	movs	r1, #7
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	d057      	beq.n	8000f72 <__aeabi_fsub+0x186>
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	2904      	cmp	r1, #4
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fsub+0xe0>
 8000eca:	3304      	adds	r3, #4
 8000ecc:	0159      	lsls	r1, r3, #5
 8000ece:	d550      	bpl.n	8000f72 <__aeabi_fsub+0x186>
 8000ed0:	1c50      	adds	r0, r2, #1
 8000ed2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ed4:	d045      	beq.n	8000f62 <__aeabi_fsub+0x176>
 8000ed6:	019b      	lsls	r3, r3, #6
 8000ed8:	b2c0      	uxtb	r0, r0
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	05c0      	lsls	r0, r0, #23
 8000ede:	4318      	orrs	r0, r3
 8000ee0:	07e4      	lsls	r4, r4, #31
 8000ee2:	4320      	orrs	r0, r4
 8000ee4:	bcc0      	pop	{r6, r7}
 8000ee6:	46b9      	mov	r9, r7
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eec:	2201      	movs	r2, #1
 8000eee:	4051      	eors	r1, r2
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d1ba      	bne.n	8000e6a <__aeabi_fsub+0x7e>
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d010      	beq.n	8000f1c <__aeabi_fsub+0x130>
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x114>
 8000efe:	e098      	b.n	8001032 <__aeabi_fsub+0x246>
 8000f00:	2300      	movs	r3, #0
 8000f02:	e7bb      	b.n	8000e7c <__aeabi_fsub+0x90>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d034      	beq.n	8000f72 <__aeabi_fsub+0x186>
 8000f08:	1e51      	subs	r1, r2, #1
 8000f0a:	2a01      	cmp	r2, #1
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fsub+0x200>
 8000f0e:	2aff      	cmp	r2, #255	@ 0xff
 8000f10:	d0b4      	beq.n	8000e7c <__aeabi_fsub+0x90>
 8000f12:	000a      	movs	r2, r1
 8000f14:	e79c      	b.n	8000e50 <__aeabi_fsub+0x64>
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fsub+0x130>
 8000f1a:	e088      	b.n	800102e <__aeabi_fsub+0x242>
 8000f1c:	20fe      	movs	r0, #254	@ 0xfe
 8000f1e:	1c6a      	adds	r2, r5, #1
 8000f20:	4210      	tst	r0, r2
 8000f22:	d000      	beq.n	8000f26 <__aeabi_fsub+0x13a>
 8000f24:	e092      	b.n	800104c <__aeabi_fsub+0x260>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d000      	beq.n	8000f2c <__aeabi_fsub+0x140>
 8000f2a:	e0a4      	b.n	8001076 <__aeabi_fsub+0x28a>
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x146>
 8000f30:	e0cb      	b.n	80010ca <__aeabi_fsub+0x2de>
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x14c>
 8000f36:	e0ca      	b.n	80010ce <__aeabi_fsub+0x2e2>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	0a5b      	lsrs	r3, r3, #9
 8000f40:	b2d0      	uxtb	r0, r2
 8000f42:	e7cb      	b.n	8000edc <__aeabi_fsub+0xf0>
 8000f44:	0031      	movs	r1, r6
 8000f46:	2020      	movs	r0, #32
 8000f48:	40d1      	lsrs	r1, r2
 8000f4a:	1a82      	subs	r2, r0, r2
 8000f4c:	4096      	lsls	r6, r2
 8000f4e:	0032      	movs	r2, r6
 8000f50:	1e50      	subs	r0, r2, #1
 8000f52:	4182      	sbcs	r2, r0
 8000f54:	430a      	orrs	r2, r1
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	015a      	lsls	r2, r3, #5
 8000f5a:	d5ae      	bpl.n	8000eba <__aeabi_fsub+0xce>
 8000f5c:	1c6a      	adds	r2, r5, #1
 8000f5e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f60:	d14a      	bne.n	8000ff8 <__aeabi_fsub+0x20c>
 8000f62:	20ff      	movs	r0, #255	@ 0xff
 8000f64:	2300      	movs	r3, #0
 8000f66:	e7b9      	b.n	8000edc <__aeabi_fsub+0xf0>
 8000f68:	22ff      	movs	r2, #255	@ 0xff
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d14b      	bne.n	8001006 <__aeabi_fsub+0x21a>
 8000f6e:	000c      	movs	r4, r1
 8000f70:	0033      	movs	r3, r6
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	2aff      	cmp	r2, #255	@ 0xff
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x18e>
 8000f78:	e781      	b.n	8000e7e <__aeabi_fsub+0x92>
 8000f7a:	e7df      	b.n	8000f3c <__aeabi_fsub+0x150>
 8000f7c:	019f      	lsls	r7, r3, #6
 8000f7e:	09bf      	lsrs	r7, r7, #6
 8000f80:	0038      	movs	r0, r7
 8000f82:	f000 f985 	bl	8001290 <__clzsi2>
 8000f86:	3805      	subs	r0, #5
 8000f88:	4087      	lsls	r7, r0
 8000f8a:	4285      	cmp	r5, r0
 8000f8c:	dc21      	bgt.n	8000fd2 <__aeabi_fsub+0x1e6>
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2120      	movs	r1, #32
 8000f92:	1b42      	subs	r2, r0, r5
 8000f94:	3201      	adds	r2, #1
 8000f96:	40d3      	lsrs	r3, r2
 8000f98:	1a8a      	subs	r2, r1, r2
 8000f9a:	4097      	lsls	r7, r2
 8000f9c:	1e7a      	subs	r2, r7, #1
 8000f9e:	4197      	sbcs	r7, r2
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	433b      	orrs	r3, r7
 8000fa4:	0759      	lsls	r1, r3, #29
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fsub+0x1be>
 8000fa8:	e78b      	b.n	8000ec2 <__aeabi_fsub+0xd6>
 8000faa:	e78f      	b.n	8000ecc <__aeabi_fsub+0xe0>
 8000fac:	20fe      	movs	r0, #254	@ 0xfe
 8000fae:	1c6a      	adds	r2, r5, #1
 8000fb0:	4210      	tst	r0, r2
 8000fb2:	d112      	bne.n	8000fda <__aeabi_fsub+0x1ee>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d152      	bne.n	800105e <__aeabi_fsub+0x272>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d07c      	beq.n	80010b6 <__aeabi_fsub+0x2ca>
 8000fbc:	2e00      	cmp	r6, #0
 8000fbe:	d0bb      	beq.n	8000f38 <__aeabi_fsub+0x14c>
 8000fc0:	1b9a      	subs	r2, r3, r6
 8000fc2:	0150      	lsls	r0, r2, #5
 8000fc4:	d400      	bmi.n	8000fc8 <__aeabi_fsub+0x1dc>
 8000fc6:	e08b      	b.n	80010e0 <__aeabi_fsub+0x2f4>
 8000fc8:	2401      	movs	r4, #1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	1af3      	subs	r3, r6, r3
 8000fce:	400c      	ands	r4, r1
 8000fd0:	e7e8      	b.n	8000fa4 <__aeabi_fsub+0x1b8>
 8000fd2:	4b56      	ldr	r3, [pc, #344]	@ (800112c <__aeabi_fsub+0x340>)
 8000fd4:	1a2a      	subs	r2, r5, r0
 8000fd6:	403b      	ands	r3, r7
 8000fd8:	e7e4      	b.n	8000fa4 <__aeabi_fsub+0x1b8>
 8000fda:	1b9f      	subs	r7, r3, r6
 8000fdc:	017a      	lsls	r2, r7, #5
 8000fde:	d446      	bmi.n	800106e <__aeabi_fsub+0x282>
 8000fe0:	2f00      	cmp	r7, #0
 8000fe2:	d1cd      	bne.n	8000f80 <__aeabi_fsub+0x194>
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e777      	b.n	8000edc <__aeabi_fsub+0xf0>
 8000fec:	199b      	adds	r3, r3, r6
 8000fee:	2501      	movs	r5, #1
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	0159      	lsls	r1, r3, #5
 8000ff4:	d400      	bmi.n	8000ff8 <__aeabi_fsub+0x20c>
 8000ff6:	e760      	b.n	8000eba <__aeabi_fsub+0xce>
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	484d      	ldr	r0, [pc, #308]	@ (8001130 <__aeabi_fsub+0x344>)
 8000ffc:	4019      	ands	r1, r3
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	4003      	ands	r3, r0
 8001002:	430b      	orrs	r3, r1
 8001004:	e7ce      	b.n	8000fa4 <__aeabi_fsub+0x1b8>
 8001006:	1e57      	subs	r7, r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d05a      	beq.n	80010c2 <__aeabi_fsub+0x2d6>
 800100c:	000c      	movs	r4, r1
 800100e:	2aff      	cmp	r2, #255	@ 0xff
 8001010:	d033      	beq.n	800107a <__aeabi_fsub+0x28e>
 8001012:	2201      	movs	r2, #1
 8001014:	2f1b      	cmp	r7, #27
 8001016:	dc07      	bgt.n	8001028 <__aeabi_fsub+0x23c>
 8001018:	2120      	movs	r1, #32
 800101a:	1bc9      	subs	r1, r1, r7
 800101c:	001a      	movs	r2, r3
 800101e:	408b      	lsls	r3, r1
 8001020:	40fa      	lsrs	r2, r7
 8001022:	1e59      	subs	r1, r3, #1
 8001024:	418b      	sbcs	r3, r1
 8001026:	431a      	orrs	r2, r3
 8001028:	0005      	movs	r5, r0
 800102a:	1ab3      	subs	r3, r6, r2
 800102c:	e743      	b.n	8000eb6 <__aeabi_fsub+0xca>
 800102e:	2d00      	cmp	r5, #0
 8001030:	d123      	bne.n	800107a <__aeabi_fsub+0x28e>
 8001032:	22ff      	movs	r2, #255	@ 0xff
 8001034:	2b00      	cmp	r3, #0
 8001036:	d09b      	beq.n	8000f70 <__aeabi_fsub+0x184>
 8001038:	1e51      	subs	r1, r2, #1
 800103a:	2a01      	cmp	r2, #1
 800103c:	d0d6      	beq.n	8000fec <__aeabi_fsub+0x200>
 800103e:	2aff      	cmp	r2, #255	@ 0xff
 8001040:	d01b      	beq.n	800107a <__aeabi_fsub+0x28e>
 8001042:	291b      	cmp	r1, #27
 8001044:	dd2c      	ble.n	80010a0 <__aeabi_fsub+0x2b4>
 8001046:	0002      	movs	r2, r0
 8001048:	1c73      	adds	r3, r6, #1
 800104a:	e73a      	b.n	8000ec2 <__aeabi_fsub+0xd6>
 800104c:	2aff      	cmp	r2, #255	@ 0xff
 800104e:	d088      	beq.n	8000f62 <__aeabi_fsub+0x176>
 8001050:	199b      	adds	r3, r3, r6
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	0759      	lsls	r1, r3, #29
 8001056:	d000      	beq.n	800105a <__aeabi_fsub+0x26e>
 8001058:	e733      	b.n	8000ec2 <__aeabi_fsub+0xd6>
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	e76e      	b.n	8000f3c <__aeabi_fsub+0x150>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d110      	bne.n	8001084 <__aeabi_fsub+0x298>
 8001062:	2e00      	cmp	r6, #0
 8001064:	d043      	beq.n	80010ee <__aeabi_fsub+0x302>
 8001066:	2401      	movs	r4, #1
 8001068:	0033      	movs	r3, r6
 800106a:	400c      	ands	r4, r1
 800106c:	e706      	b.n	8000e7c <__aeabi_fsub+0x90>
 800106e:	2401      	movs	r4, #1
 8001070:	1af7      	subs	r7, r6, r3
 8001072:	400c      	ands	r4, r1
 8001074:	e784      	b.n	8000f80 <__aeabi_fsub+0x194>
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <__aeabi_fsub+0x298>
 800107a:	0033      	movs	r3, r6
 800107c:	e6fe      	b.n	8000e7c <__aeabi_fsub+0x90>
 800107e:	2501      	movs	r5, #1
 8001080:	1b9b      	subs	r3, r3, r6
 8001082:	e718      	b.n	8000eb6 <__aeabi_fsub+0xca>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x29e>
 8001088:	e6f8      	b.n	8000e7c <__aeabi_fsub+0x90>
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	03d2      	lsls	r2, r2, #15
 800108e:	4297      	cmp	r7, r2
 8001090:	d304      	bcc.n	800109c <__aeabi_fsub+0x2b0>
 8001092:	4594      	cmp	ip, r2
 8001094:	d202      	bcs.n	800109c <__aeabi_fsub+0x2b0>
 8001096:	2401      	movs	r4, #1
 8001098:	0033      	movs	r3, r6
 800109a:	400c      	ands	r4, r1
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	e6f1      	b.n	8000e84 <__aeabi_fsub+0x98>
 80010a0:	001a      	movs	r2, r3
 80010a2:	2520      	movs	r5, #32
 80010a4:	40ca      	lsrs	r2, r1
 80010a6:	1a69      	subs	r1, r5, r1
 80010a8:	408b      	lsls	r3, r1
 80010aa:	1e59      	subs	r1, r3, #1
 80010ac:	418b      	sbcs	r3, r1
 80010ae:	4313      	orrs	r3, r2
 80010b0:	0005      	movs	r5, r0
 80010b2:	199b      	adds	r3, r3, r6
 80010b4:	e750      	b.n	8000f58 <__aeabi_fsub+0x16c>
 80010b6:	2e00      	cmp	r6, #0
 80010b8:	d094      	beq.n	8000fe4 <__aeabi_fsub+0x1f8>
 80010ba:	2401      	movs	r4, #1
 80010bc:	0033      	movs	r3, r6
 80010be:	400c      	ands	r4, r1
 80010c0:	e73a      	b.n	8000f38 <__aeabi_fsub+0x14c>
 80010c2:	000c      	movs	r4, r1
 80010c4:	2501      	movs	r5, #1
 80010c6:	1af3      	subs	r3, r6, r3
 80010c8:	e6f5      	b.n	8000eb6 <__aeabi_fsub+0xca>
 80010ca:	0033      	movs	r3, r6
 80010cc:	e734      	b.n	8000f38 <__aeabi_fsub+0x14c>
 80010ce:	199b      	adds	r3, r3, r6
 80010d0:	2200      	movs	r2, #0
 80010d2:	0159      	lsls	r1, r3, #5
 80010d4:	d5c1      	bpl.n	800105a <__aeabi_fsub+0x26e>
 80010d6:	4a15      	ldr	r2, [pc, #84]	@ (800112c <__aeabi_fsub+0x340>)
 80010d8:	4013      	ands	r3, r2
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	2201      	movs	r2, #1
 80010de:	e72d      	b.n	8000f3c <__aeabi_fsub+0x150>
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_fsub+0x2fa>
 80010e4:	e77e      	b.n	8000fe4 <__aeabi_fsub+0x1f8>
 80010e6:	0013      	movs	r3, r2
 80010e8:	2200      	movs	r2, #0
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	e726      	b.n	8000f3c <__aeabi_fsub+0x150>
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	2400      	movs	r4, #0
 80010f2:	20ff      	movs	r0, #255	@ 0xff
 80010f4:	03db      	lsls	r3, r3, #15
 80010f6:	e6f1      	b.n	8000edc <__aeabi_fsub+0xf0>
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x312>
 80010fc:	e756      	b.n	8000fac <__aeabi_fsub+0x1c0>
 80010fe:	1b47      	subs	r7, r0, r5
 8001100:	003a      	movs	r2, r7
 8001102:	2d00      	cmp	r5, #0
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x31c>
 8001106:	e730      	b.n	8000f6a <__aeabi_fsub+0x17e>
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	04d2      	lsls	r2, r2, #19
 800110c:	000c      	movs	r4, r1
 800110e:	4313      	orrs	r3, r2
 8001110:	e77f      	b.n	8001012 <__aeabi_fsub+0x226>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_fsub+0x32c>
 8001116:	e701      	b.n	8000f1c <__aeabi_fsub+0x130>
 8001118:	1b41      	subs	r1, r0, r5
 800111a:	2d00      	cmp	r5, #0
 800111c:	d101      	bne.n	8001122 <__aeabi_fsub+0x336>
 800111e:	000a      	movs	r2, r1
 8001120:	e788      	b.n	8001034 <__aeabi_fsub+0x248>
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	04d2      	lsls	r2, r2, #19
 8001126:	4313      	orrs	r3, r2
 8001128:	e78b      	b.n	8001042 <__aeabi_fsub+0x256>
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	fbffffff 	.word	0xfbffffff
 8001130:	7dffffff 	.word	0x7dffffff

08001134 <__aeabi_f2iz>:
 8001134:	0241      	lsls	r1, r0, #9
 8001136:	0042      	lsls	r2, r0, #1
 8001138:	0fc3      	lsrs	r3, r0, #31
 800113a:	0a49      	lsrs	r1, r1, #9
 800113c:	2000      	movs	r0, #0
 800113e:	0e12      	lsrs	r2, r2, #24
 8001140:	2a7e      	cmp	r2, #126	@ 0x7e
 8001142:	dd03      	ble.n	800114c <__aeabi_f2iz+0x18>
 8001144:	2a9d      	cmp	r2, #157	@ 0x9d
 8001146:	dd02      	ble.n	800114e <__aeabi_f2iz+0x1a>
 8001148:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <__aeabi_f2iz+0x3c>)
 800114a:	1898      	adds	r0, r3, r2
 800114c:	4770      	bx	lr
 800114e:	2080      	movs	r0, #128	@ 0x80
 8001150:	0400      	lsls	r0, r0, #16
 8001152:	4301      	orrs	r1, r0
 8001154:	2a95      	cmp	r2, #149	@ 0x95
 8001156:	dc07      	bgt.n	8001168 <__aeabi_f2iz+0x34>
 8001158:	2096      	movs	r0, #150	@ 0x96
 800115a:	1a82      	subs	r2, r0, r2
 800115c:	40d1      	lsrs	r1, r2
 800115e:	4248      	negs	r0, r1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f3      	bne.n	800114c <__aeabi_f2iz+0x18>
 8001164:	0008      	movs	r0, r1
 8001166:	e7f1      	b.n	800114c <__aeabi_f2iz+0x18>
 8001168:	3a96      	subs	r2, #150	@ 0x96
 800116a:	4091      	lsls	r1, r2
 800116c:	e7f7      	b.n	800115e <__aeabi_f2iz+0x2a>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	7fffffff 	.word	0x7fffffff

08001174 <__aeabi_i2f>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	2800      	cmp	r0, #0
 8001178:	d013      	beq.n	80011a2 <__aeabi_i2f+0x2e>
 800117a:	17c3      	asrs	r3, r0, #31
 800117c:	18c5      	adds	r5, r0, r3
 800117e:	405d      	eors	r5, r3
 8001180:	0fc4      	lsrs	r4, r0, #31
 8001182:	0028      	movs	r0, r5
 8001184:	f000 f884 	bl	8001290 <__clzsi2>
 8001188:	239e      	movs	r3, #158	@ 0x9e
 800118a:	0001      	movs	r1, r0
 800118c:	1a1b      	subs	r3, r3, r0
 800118e:	2b96      	cmp	r3, #150	@ 0x96
 8001190:	dc0f      	bgt.n	80011b2 <__aeabi_i2f+0x3e>
 8001192:	2808      	cmp	r0, #8
 8001194:	d034      	beq.n	8001200 <__aeabi_i2f+0x8c>
 8001196:	3908      	subs	r1, #8
 8001198:	408d      	lsls	r5, r1
 800119a:	026d      	lsls	r5, r5, #9
 800119c:	0a6d      	lsrs	r5, r5, #9
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	e002      	b.n	80011a8 <__aeabi_i2f+0x34>
 80011a2:	2400      	movs	r4, #0
 80011a4:	2000      	movs	r0, #0
 80011a6:	2500      	movs	r5, #0
 80011a8:	05c0      	lsls	r0, r0, #23
 80011aa:	4328      	orrs	r0, r5
 80011ac:	07e4      	lsls	r4, r4, #31
 80011ae:	4320      	orrs	r0, r4
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
 80011b2:	2b99      	cmp	r3, #153	@ 0x99
 80011b4:	dc16      	bgt.n	80011e4 <__aeabi_i2f+0x70>
 80011b6:	1f42      	subs	r2, r0, #5
 80011b8:	2805      	cmp	r0, #5
 80011ba:	d000      	beq.n	80011be <__aeabi_i2f+0x4a>
 80011bc:	4095      	lsls	r5, r2
 80011be:	002a      	movs	r2, r5
 80011c0:	4811      	ldr	r0, [pc, #68]	@ (8001208 <__aeabi_i2f+0x94>)
 80011c2:	4002      	ands	r2, r0
 80011c4:	076e      	lsls	r6, r5, #29
 80011c6:	d009      	beq.n	80011dc <__aeabi_i2f+0x68>
 80011c8:	260f      	movs	r6, #15
 80011ca:	4035      	ands	r5, r6
 80011cc:	2d04      	cmp	r5, #4
 80011ce:	d005      	beq.n	80011dc <__aeabi_i2f+0x68>
 80011d0:	3204      	adds	r2, #4
 80011d2:	0155      	lsls	r5, r2, #5
 80011d4:	d502      	bpl.n	80011dc <__aeabi_i2f+0x68>
 80011d6:	239f      	movs	r3, #159	@ 0x9f
 80011d8:	4002      	ands	r2, r0
 80011da:	1a5b      	subs	r3, r3, r1
 80011dc:	0192      	lsls	r2, r2, #6
 80011de:	0a55      	lsrs	r5, r2, #9
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	e7e1      	b.n	80011a8 <__aeabi_i2f+0x34>
 80011e4:	2205      	movs	r2, #5
 80011e6:	1a12      	subs	r2, r2, r0
 80011e8:	0028      	movs	r0, r5
 80011ea:	40d0      	lsrs	r0, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	0008      	movs	r0, r1
 80011f0:	301b      	adds	r0, #27
 80011f2:	4085      	lsls	r5, r0
 80011f4:	0028      	movs	r0, r5
 80011f6:	1e45      	subs	r5, r0, #1
 80011f8:	41a8      	sbcs	r0, r5
 80011fa:	4302      	orrs	r2, r0
 80011fc:	0015      	movs	r5, r2
 80011fe:	e7de      	b.n	80011be <__aeabi_i2f+0x4a>
 8001200:	026d      	lsls	r5, r5, #9
 8001202:	2096      	movs	r0, #150	@ 0x96
 8001204:	0a6d      	lsrs	r5, r5, #9
 8001206:	e7cf      	b.n	80011a8 <__aeabi_i2f+0x34>
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_ui2f>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	1e04      	subs	r4, r0, #0
 8001210:	d00e      	beq.n	8001230 <__aeabi_ui2f+0x24>
 8001212:	f000 f83d 	bl	8001290 <__clzsi2>
 8001216:	239e      	movs	r3, #158	@ 0x9e
 8001218:	0001      	movs	r1, r0
 800121a:	1a1b      	subs	r3, r3, r0
 800121c:	2b96      	cmp	r3, #150	@ 0x96
 800121e:	dc0c      	bgt.n	800123a <__aeabi_ui2f+0x2e>
 8001220:	2808      	cmp	r0, #8
 8001222:	d02f      	beq.n	8001284 <__aeabi_ui2f+0x78>
 8001224:	3908      	subs	r1, #8
 8001226:	408c      	lsls	r4, r1
 8001228:	0264      	lsls	r4, r4, #9
 800122a:	0a64      	lsrs	r4, r4, #9
 800122c:	b2d8      	uxtb	r0, r3
 800122e:	e001      	b.n	8001234 <__aeabi_ui2f+0x28>
 8001230:	2000      	movs	r0, #0
 8001232:	2400      	movs	r4, #0
 8001234:	05c0      	lsls	r0, r0, #23
 8001236:	4320      	orrs	r0, r4
 8001238:	bd70      	pop	{r4, r5, r6, pc}
 800123a:	2b99      	cmp	r3, #153	@ 0x99
 800123c:	dc16      	bgt.n	800126c <__aeabi_ui2f+0x60>
 800123e:	1f42      	subs	r2, r0, #5
 8001240:	2805      	cmp	r0, #5
 8001242:	d000      	beq.n	8001246 <__aeabi_ui2f+0x3a>
 8001244:	4094      	lsls	r4, r2
 8001246:	0022      	movs	r2, r4
 8001248:	4810      	ldr	r0, [pc, #64]	@ (800128c <__aeabi_ui2f+0x80>)
 800124a:	4002      	ands	r2, r0
 800124c:	0765      	lsls	r5, r4, #29
 800124e:	d009      	beq.n	8001264 <__aeabi_ui2f+0x58>
 8001250:	250f      	movs	r5, #15
 8001252:	402c      	ands	r4, r5
 8001254:	2c04      	cmp	r4, #4
 8001256:	d005      	beq.n	8001264 <__aeabi_ui2f+0x58>
 8001258:	3204      	adds	r2, #4
 800125a:	0154      	lsls	r4, r2, #5
 800125c:	d502      	bpl.n	8001264 <__aeabi_ui2f+0x58>
 800125e:	239f      	movs	r3, #159	@ 0x9f
 8001260:	4002      	ands	r2, r0
 8001262:	1a5b      	subs	r3, r3, r1
 8001264:	0192      	lsls	r2, r2, #6
 8001266:	0a54      	lsrs	r4, r2, #9
 8001268:	b2d8      	uxtb	r0, r3
 800126a:	e7e3      	b.n	8001234 <__aeabi_ui2f+0x28>
 800126c:	0002      	movs	r2, r0
 800126e:	0020      	movs	r0, r4
 8001270:	321b      	adds	r2, #27
 8001272:	4090      	lsls	r0, r2
 8001274:	0002      	movs	r2, r0
 8001276:	1e50      	subs	r0, r2, #1
 8001278:	4182      	sbcs	r2, r0
 800127a:	2005      	movs	r0, #5
 800127c:	1a40      	subs	r0, r0, r1
 800127e:	40c4      	lsrs	r4, r0
 8001280:	4314      	orrs	r4, r2
 8001282:	e7e0      	b.n	8001246 <__aeabi_ui2f+0x3a>
 8001284:	0264      	lsls	r4, r4, #9
 8001286:	2096      	movs	r0, #150	@ 0x96
 8001288:	0a64      	lsrs	r4, r4, #9
 800128a:	e7d3      	b.n	8001234 <__aeabi_ui2f+0x28>
 800128c:	fbffffff 	.word	0xfbffffff

08001290 <__clzsi2>:
 8001290:	211c      	movs	r1, #28
 8001292:	2301      	movs	r3, #1
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	4298      	cmp	r0, r3
 8001298:	d301      	bcc.n	800129e <__clzsi2+0xe>
 800129a:	0c00      	lsrs	r0, r0, #16
 800129c:	3910      	subs	r1, #16
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	4298      	cmp	r0, r3
 80012a2:	d301      	bcc.n	80012a8 <__clzsi2+0x18>
 80012a4:	0a00      	lsrs	r0, r0, #8
 80012a6:	3908      	subs	r1, #8
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d301      	bcc.n	80012b2 <__clzsi2+0x22>
 80012ae:	0900      	lsrs	r0, r0, #4
 80012b0:	3904      	subs	r1, #4
 80012b2:	a202      	add	r2, pc, #8	@ (adr r2, 80012bc <__clzsi2+0x2c>)
 80012b4:	5c10      	ldrb	r0, [r2, r0]
 80012b6:	1840      	adds	r0, r0, r1
 80012b8:	4770      	bx	lr
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	02020304 	.word	0x02020304
 80012c0:	01010101 	.word	0x01010101
	...

080012cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d0:	220c      	movs	r2, #12
 80012d2:	2100      	movs	r1, #0
 80012d4:	a801      	add	r0, sp, #4
 80012d6:	f005 fa05 	bl	80066e4 <memset>
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012da:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 80012dc:	4c2e      	ldr	r4, [pc, #184]	@ (8001398 <MX_ADC1_Init+0xcc>)
 80012de:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <MX_ADC1_Init+0xd0>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e0:	2104      	movs	r1, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012e2:	0392      	lsls	r2, r2, #14
  hadc1.Instance = ADC1;
 80012e4:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012e6:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012e8:	6122      	str	r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ea:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012ec:	05db      	lsls	r3, r3, #23
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ee:	6161      	str	r1, [r4, #20]
  hadc1.Init.NbrOfConversion = 4;
 80012f0:	61e1      	str	r1, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012f2:	3128      	adds	r1, #40	@ 0x28
 80012f4:	5462      	strb	r2, [r4, r1]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012f6:	6063      	str	r3, [r4, #4]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
  hadc1.Init.OversamplingMode = DISABLE;
 80012f8:	2100      	movs	r1, #0
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fa:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012fc:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80012fe:	3206      	adds	r2, #6
 8001300:	6362      	str	r2, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8001302:	3a01      	subs	r2, #1
 8001304:	63a2      	str	r2, [r4, #56]	@ 0x38
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001306:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8001308:	3236      	adds	r2, #54	@ 0x36
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800130e:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001310:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001312:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001314:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8001316:	54a1      	strb	r1, [r4, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001318:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800131a:	f001 fc2b 	bl	8002b74 <HAL_ADC_Init>
 800131e:	2800      	cmp	r0, #0
 8001320:	d12a      	bne.n	8001378 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_ADC1_Init+0xd4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001326:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001328:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132a:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800132e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	f001 fe48 	bl	8002fc4 <HAL_ADC_ConfigChannel>
 8001334:	2800      	cmp	r0, #0
 8001336:	d12b      	bne.n	8001390 <MX_ADC1_Init+0xc4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_ADC1_Init+0xd8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800133c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800133e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001342:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	f001 fe3e 	bl	8002fc4 <HAL_ADC_ConfigChannel>
 8001348:	2800      	cmp	r0, #0
 800134a:	d11e      	bne.n	800138a <MX_ADC1_Init+0xbe>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800134c:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001350:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001354:	3307      	adds	r3, #7
 8001356:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	f001 fe34 	bl	8002fc4 <HAL_ADC_ConfigChannel>
 800135c:	2800      	cmp	r0, #0
 800135e:	d111      	bne.n	8001384 <MX_ADC1_Init+0xb8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_ADC1_Init+0xdc>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001364:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001366:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800136a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	f001 fe2a 	bl	8002fc4 <HAL_ADC_ConfigChannel>
 8001370:	2800      	cmp	r0, #0
 8001372:	d104      	bne.n	800137e <MX_ADC1_Init+0xb2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001374:	b004      	add	sp, #16
 8001376:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001378:	f000 f9d0 	bl	800171c <Error_Handler>
 800137c:	e7d1      	b.n	8001322 <MX_ADC1_Init+0x56>
    Error_Handler();
 800137e:	f000 f9cd 	bl	800171c <Error_Handler>
}
 8001382:	e7f7      	b.n	8001374 <MX_ADC1_Init+0xa8>
    Error_Handler();
 8001384:	f000 f9ca 	bl	800171c <Error_Handler>
 8001388:	e7ea      	b.n	8001360 <MX_ADC1_Init+0x94>
    Error_Handler();
 800138a:	f000 f9c7 	bl	800171c <Error_Handler>
 800138e:	e7dd      	b.n	800134c <MX_ADC1_Init+0x80>
    Error_Handler();
 8001390:	f000 f9c4 	bl	800171c <Error_Handler>
 8001394:	e7d0      	b.n	8001338 <MX_ADC1_Init+0x6c>
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	20000338 	.word	0x20000338
 800139c:	40012400 	.word	0x40012400
 80013a0:	0c000008 	.word	0x0c000008
 80013a4:	10000010 	.word	0x10000010
 80013a8:	b0001000 	.word	0xb0001000

080013ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	0004      	movs	r4, r0
 80013b0:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	2214      	movs	r2, #20
 80013b4:	2100      	movs	r1, #0
 80013b6:	a804      	add	r0, sp, #16
 80013b8:	f005 f994 	bl	80066e4 <memset>
  if(adcHandle->Instance==ADC1)
 80013bc:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_ADC_MspInit+0xc0>)
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013c4:	b00a      	add	sp, #40	@ 0x28
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80013c8:	2180      	movs	r1, #128	@ 0x80
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_ADC_MspInit+0xc4>)
 80013cc:	0349      	lsls	r1, r1, #13
 80013ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80013d2:	430a      	orrs	r2, r1
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80013da:	400a      	ands	r2, r1
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	2201      	movs	r2, #1
 80013e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4311      	orrs	r1, r2
 80013e8:	6359      	str	r1, [r3, #52]	@ 0x34
 80013ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ec:	400a      	ands	r2, r1
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2202      	movs	r2, #2
 80013f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013f6:	4311      	orrs	r1, r2
 80013f8:	6359      	str	r1, [r3, #52]	@ 0x34
 80013fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	401a      	ands	r2, r3
 8001400:	9203      	str	r2, [sp, #12]
 8001402:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VSENSE_Pin|THROTTLE_Pin|ISENSE_Pin|VW_Pin;
 8001404:	2259      	movs	r2, #89	@ 0x59
 8001406:	2303      	movs	r3, #3
 8001408:	9204      	str	r2, [sp, #16]
 800140a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f002 faf8 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VV_Pin|VU_Pin;
 8001410:	2303      	movs	r3, #3
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <HAL_ADC_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	4818      	ldr	r0, [pc, #96]	@ (8001478 <HAL_ADC_MspInit+0xcc>)
 8001416:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = VV_Pin|VU_Pin;
 8001418:	9204      	str	r2, [sp, #16]
 800141a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f002 faef 	bl	8003a00 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001422:	4d16      	ldr	r5, [pc, #88]	@ (800147c <HAL_ADC_MspInit+0xd0>)
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_ADC_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001426:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 8001428:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800142a:	2305      	movs	r3, #5
 800142c:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	337b      	adds	r3, #123	@ 0x7b
 8001430:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001432:	3381      	adds	r3, #129	@ 0x81
 8001434:	33ff      	adds	r3, #255	@ 0xff
 8001436:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800143e:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001440:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001442:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001444:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001446:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001448:	f002 f948 	bl	80036dc <HAL_DMA_Init>
 800144c:	2800      	cmp	r0, #0
 800144e:	d10a      	bne.n	8001466 <HAL_ADC_MspInit+0xba>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	200c      	movs	r0, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001456:	6525      	str	r5, [r4, #80]	@ 0x50
 8001458:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800145a:	f002 f8cf 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800145e:	200c      	movs	r0, #12
 8001460:	f002 f8f6 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 8001464:	e7ae      	b.n	80013c4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001466:	f000 f959 	bl	800171c <Error_Handler>
 800146a:	e7f1      	b.n	8001450 <HAL_ADC_MspInit+0xa4>
 800146c:	40012400 	.word	0x40012400
 8001470:	40021000 	.word	0x40021000
 8001474:	00000402 	.word	0x00000402
 8001478:	50000400 	.word	0x50000400
 800147c:	200002dc 	.word	0x200002dc
 8001480:	40020008 	.word	0x40020008

08001484 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001484:	2301      	movs	r3, #1
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <MX_DMA_Init+0x2c>)
{
 8001488:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 800148c:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4319      	orrs	r1, r3
 8001490:	6391      	str	r1, [r2, #56]	@ 0x38
 8001492:	6b92      	ldr	r2, [r2, #56]	@ 0x38

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001494:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001496:	4013      	ands	r3, r2
 8001498:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a0:	f002 f8ac 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a4:	2009      	movs	r0, #9
 80014a6:	f002 f8d3 	bl	8003650 <HAL_NVIC_EnableIRQ>

}
 80014aa:	b003      	add	sp, #12
 80014ac:	bd00      	pop	{pc}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000

080014b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	2214      	movs	r2, #20
 80014ba:	2100      	movs	r1, #0
 80014bc:	a804      	add	r0, sp, #16
 80014be:	f005 f911 	bl	80066e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	4b29      	ldr	r3, [pc, #164]	@ (800156c <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014c8:	2780      	movs	r7, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014cc:	4c28      	ldr	r4, [pc, #160]	@ (8001570 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	4311      	orrs	r1, r2
 80014d0:	6359      	str	r1, [r3, #52]	@ 0x34
 80014d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014d4:	013f      	lsls	r7, r7, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d6:	400a      	ands	r2, r1
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014de:	0020      	movs	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4332      	orrs	r2, r6
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4032      	ands	r2, r6
 80014ea:	9202      	str	r2, [sp, #8]
 80014ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2202      	movs	r2, #2
 80014f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014f2:	4311      	orrs	r1, r2
 80014f4:	6359      	str	r1, [r3, #52]	@ 0x34
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014f8:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	401a      	ands	r2, r3
 80014fc:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001502:	f002 fb75 	bl	8003bf0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PAS_Pin;
 8001506:	2388      	movs	r3, #136	@ 0x88
  HAL_GPIO_Init(PAS_GPIO_Port, &GPIO_InitStruct);
 8001508:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = PAS_Pin;
 800150a:	2204      	movs	r2, #4
 800150c:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(PAS_GPIO_Port, &GPIO_InitStruct);
 800150e:	a904      	add	r1, sp, #16
 8001510:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = PAS_Pin;
 8001512:	9204      	str	r2, [sp, #16]
 8001514:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(PAS_GPIO_Port, &GPIO_InitStruct);
 8001518:	f002 fa72 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_R_Pin;
 800151c:	2204      	movs	r2, #4
 800151e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 8001520:	0020      	movs	r0, r4
 8001522:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = F_R_Pin;
 8001524:	9204      	str	r2, [sp, #16]
 8001526:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(F_R_GPIO_Port, &GPIO_InitStruct);
 800152a:	f002 fa69 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800152e:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001530:	0020      	movs	r0, r4
 8001532:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001534:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001536:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800153c:	f002 fa60 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 8001540:	2280      	movs	r2, #128	@ 0x80
 8001542:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 8001544:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = BRAKE_Pin;
 8001546:	0152      	lsls	r2, r2, #5
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 8001548:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BRAKE_Pin;
 800154a:	9204      	str	r2, [sp, #16]
 800154c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 8001550:	f002 fa56 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_SPD_Pin;
 8001554:	2388      	movs	r3, #136	@ 0x88
 8001556:	2208      	movs	r2, #8
 8001558:	035b      	lsls	r3, r3, #13
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MOTOR_SPD_GPIO_Port, &GPIO_InitStruct);
 800155a:	0020      	movs	r0, r4
 800155c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = MOTOR_SPD_Pin;
 800155e:	9204      	str	r2, [sp, #16]
 8001560:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(MOTOR_SPD_GPIO_Port, &GPIO_InitStruct);
 8001564:	f002 fa4c 	bl	8003a00 <HAL_GPIO_Init>

}
 8001568:	b00b      	add	sp, #44	@ 0x2c
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	50000400 	.word	0x50000400

08001574 <InitalConfig>:
#include"tim.h"
#include"main.h"

void InitalConfig(void) {

	ControlVals.stateMachine_state = SMS_INITIAL;
 8001574:	2201      	movs	r2, #1
 8001576:	212c      	movs	r1, #44	@ 0x2c
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <InitalConfig+0x80>)
void InitalConfig(void) {
 800157a:	b510      	push	{r4, lr}
	ControlVals.stateMachine_state = SMS_INITIAL;
 800157c:	545a      	strb	r2, [r3, r1]
	MotorRun.runDirectionFlag = FORWARD;
 800157e:	2100      	movs	r1, #0
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001580:	24f0      	movs	r4, #240	@ 0xf0
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <InitalConfig+0x84>)
 8001584:	481d      	ldr	r0, [pc, #116]	@ (80015fc <InitalConfig+0x88>)
 8001586:	7059      	strb	r1, [r3, #1]
 8001588:	6803      	ldr	r3, [r0, #0]
 800158a:	43a3      	bics	r3, r4
 800158c:	3c30      	subs	r4, #48	@ 0x30
 800158e:	4323      	orrs	r3, r4
 8001590:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001592:	2092      	movs	r0, #146	@ 0x92
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <InitalConfig+0x8c>)
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8001596:	3cbc      	subs	r4, #188	@ 0xbc
  WRITE_REG(TIMx->PSC, Prescaler);
 8001598:	6298      	str	r0, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800159a:	6958      	ldr	r0, [r3, #20]
 800159c:	4310      	orrs	r0, r2
 800159e:	6158      	str	r0, [r3, #20]
	//set timer 3 In xor Mode And Enable Input Capture interrupt and Time Base interrupt
	LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, (uint32_t) (12) << 20);
	LL_TIM_SetPrescaler(TIM3, 146);
	LL_TIM_GenerateEvent_UPDATE(TIM3);
	WRITE_REG(TIM3->SR, 0);
 80015a0:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4320      	orrs	r0, r4
 80015a6:	6018      	str	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80015a8:	68d8      	ldr	r0, [r3, #12]
 80015aa:	3c02      	subs	r4, #2
 80015ac:	4320      	orrs	r0, r4
 80015ae:	60d8      	str	r0, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80015b0:	68d8      	ldr	r0, [r3, #12]
 80015b2:	4310      	orrs	r0, r2
 80015b4:	60d8      	str	r0, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80015b6:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 80015b8:	6a19      	ldr	r1, [r3, #32]
 80015ba:	4311      	orrs	r1, r2
 80015bc:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
	LL_TIM_EnableIT_CC1(TIM3);
	LL_TIM_EnableIT_UPDATE(TIM3);
	LL_TIM_SetCounter(TIM3, 0);
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
	LL_TIM_EnableCounter(TIM3);
	initialconfiguration();
 80015c4:	f001 fa80 	bl	8002ac8 <initialconfiguration>
	HAL_TIM_Base_Start_IT(&htim17);
 80015c8:	480e      	ldr	r0, [pc, #56]	@ (8001604 <InitalConfig+0x90>)
 80015ca:	f003 f8f9 	bl	80047c0 <HAL_TIM_Base_Start_IT>
	//enable ADC Calibration
	HAL_ADCEx_Calibration_Start(&hadc1);
 80015ce:	4c0e      	ldr	r4, [pc, #56]	@ (8001608 <InitalConfig+0x94>)
 80015d0:	0020      	movs	r0, r4
 80015d2:	f001 ff3d 	bl	8003450 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, HostVar.rawADCValues, 4);
 80015d6:	2204      	movs	r2, #4
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <InitalConfig+0x98>)
 80015da:	0020      	movs	r0, r4
 80015dc:	f001 fe9a 	bl	8003314 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim14);
 80015e0:	480b      	ldr	r0, [pc, #44]	@ (8001610 <InitalConfig+0x9c>)
 80015e2:	f003 f8ed 	bl	80047c0 <HAL_TIM_Base_Start_IT>
	//Start Display/
	HAL_UART_Receive_IT(&huart1, Communication.rxBuf, DISPLAY_RXBUF_SIZE);
 80015e6:	2214      	movs	r2, #20
 80015e8:	490a      	ldr	r1, [pc, #40]	@ (8001614 <InitalConfig+0xa0>)
 80015ea:	480b      	ldr	r0, [pc, #44]	@ (8001618 <InitalConfig+0xa4>)
 80015ec:	f004 fd84 	bl	80060f8 <HAL_UART_Receive_IT>

}
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	200005a0 	.word	0x200005a0
 80015f8:	20000670 	.word	0x20000670
 80015fc:	40000418 	.word	0x40000418
 8001600:	40000400 	.word	0x40000400
 8001604:	200003e8 	.word	0x200003e8
 8001608:	20000338 	.word	0x20000338
 800160c:	200003d8 	.word	0x200003d8
 8001610:	20000434 	.word	0x20000434
 8001614:	200003ad 	.word	0x200003ad
 8001618:	200004cc 	.word	0x200004cc

0800161c <MX_IWDG_Init>:
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800161c:	4808      	ldr	r0, [pc, #32]	@ (8001640 <MX_IWDG_Init+0x24>)
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_IWDG_Init+0x28>)
{
 8001620:	b510      	push	{r4, lr}
  hiwdg.Instance = IWDG;
 8001622:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001624:	2306      	movs	r3, #6
 8001626:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_IWDG_Init+0x2c>)
 800162a:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 800162c:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800162e:	f002 fb01 	bl	8003c34 <HAL_IWDG_Init>
 8001632:	2800      	cmp	r0, #0
 8001634:	d100      	bne.n	8001638 <MX_IWDG_Init+0x1c>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001636:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001638:	f000 f870 	bl	800171c <Error_Handler>
}
 800163c:	e7fb      	b.n	8001636 <MX_IWDG_Init+0x1a>
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	2000039c 	.word	0x2000039c
 8001644:	40003000 	.word	0x40003000
 8001648:	00000fff 	.word	0x00000fff

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b500      	push	{lr}
 800164e:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001650:	2234      	movs	r2, #52	@ 0x34
 8001652:	2100      	movs	r1, #0
 8001654:	a805      	add	r0, sp, #20
 8001656:	f005 f845 	bl	80066e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165a:	2210      	movs	r2, #16
 800165c:	2100      	movs	r1, #0
 800165e:	4668      	mov	r0, sp
 8001660:	f005 f840 	bl	80066e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2080      	movs	r0, #128	@ 0x80
 8001666:	0080      	lsls	r0, r0, #2
 8001668:	f002 fb20 	bl	8003cac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800166c:	230a      	movs	r3, #10
 800166e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001670:	33f6      	adds	r3, #246	@ 0xf6
 8001672:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001678:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 800167a:	3308      	adds	r3, #8
 800167c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167e:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001680:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001686:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800168a:	3a3f      	subs	r2, #63	@ 0x3f
 800168c:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800168e:	059b      	lsls	r3, r3, #22
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	3201      	adds	r2, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001694:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001696:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001698:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169a:	f002 fb37 	bl	8003d0c <HAL_RCC_OscConfig>
 800169e:	2800      	cmp	r0, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	2207      	movs	r2, #7
 80016a8:	2302      	movs	r3, #2
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b2:	2102      	movs	r1, #2
 80016b4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	9202      	str	r2, [sp, #8]
 80016b8:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ba:	f002 fdd3 	bl	8004264 <HAL_RCC_ClockConfig>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x7a>
 80016c2:	b672      	cpsid	i
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <SystemClock_Config+0x78>
}
 80016c6:	b013      	add	sp, #76	@ 0x4c
 80016c8:	bd00      	pop	{pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)

080016cc <main>:
{
 80016cc:	b510      	push	{r4, lr}
  HAL_Init();
 80016ce:	f001 fa2b 	bl	8002b28 <HAL_Init>
  SystemClock_Config();
 80016d2:	f7ff ffbb 	bl	800164c <SystemClock_Config>
  MX_GPIO_Init();
 80016d6:	f7ff feed 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016da:	f7ff fed3 	bl	8001484 <MX_DMA_Init>
  MX_ADC1_Init();
 80016de:	f7ff fdf5 	bl	80012cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80016e2:	f000 fb45 	bl	8001d70 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016e6:	f000 f9b5 	bl	8001a54 <MX_TIM3_Init>
  MX_TIM14_Init();
 80016ea:	f000 fa77 	bl	8001bdc <MX_TIM14_Init>
  MX_TIM17_Init();
 80016ee:	f000 fa8d 	bl	8001c0c <MX_TIM17_Init>
  MX_IWDG_Init();
 80016f2:	f7ff ff93 	bl	800161c <MX_IWDG_Init>
  MX_USART1_UART_Init();
 80016f6:	f000 fbdb 	bl	8001eb0 <MX_USART1_UART_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2006      	movs	r0, #6
 8001700:	f001 ff7c 	bl	80035fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001704:	2006      	movs	r0, #6
 8001706:	f001 ffa3 	bl	8003650 <HAL_NVIC_EnableIRQ>
  InitalConfig();
 800170a:	f7ff ff33 	bl	8001574 <InitalConfig>
 800170e:	4c02      	ldr	r4, [pc, #8]	@ (8001718 <main+0x4c>)
	  HAL_IWDG_Refresh(&hiwdg);
 8001710:	0020      	movs	r0, r4
 8001712:	f002 fac3 	bl	8003c9c <HAL_IWDG_Refresh>
  while (1)
 8001716:	e7fb      	b.n	8001710 <main+0x44>
 8001718:	2000039c 	.word	0x2000039c

0800171c <Error_Handler>:
 800171c:	b672      	cpsid	i
  while (1)
 800171e:	e7fe      	b.n	800171e <Error_Handler+0x2>

08001720 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001720:	2201      	movs	r2, #1
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_MspInit+0x2c>)
{
 8001724:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001728:	4311      	orrs	r1, r2
 800172a:	6419      	str	r1, [r3, #64]	@ 0x40
 800172c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800172e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001738:	0549      	lsls	r1, r1, #21
 800173a:	430a      	orrs	r2, r1
 800173c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800173e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001740:	400b      	ands	r3, r1
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	b002      	add	sp, #8
 8001748:	4770      	bx	lr
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	40021000 	.word	0x40021000

08001750 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler>
 8001752:	46c0      	nop			@ (mov r8, r8)

08001754 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <HardFault_Handler>
 8001756:	46c0      	nop			@ (mov r8, r8)

08001758 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001758:	4770      	bx	lr
 800175a:	46c0      	nop			@ (mov r8, r8)

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800175c:	4770      	bx	lr
 800175e:	46c0      	nop			@ (mov r8, r8)

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f001 f9f5 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bd10      	pop	{r4, pc}

08001768 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001768:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PAS_Pin);
 800176a:	2004      	movs	r0, #4
 800176c:	f002 fa48 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MOTOR_SPD_Pin);
 8001770:	2008      	movs	r0, #8
 8001772:	f002 fa45 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001776:	bd10      	pop	{r4, pc}

08001778 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001778:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800177a:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Channel1_IRQHandler+0xc>)
 800177c:	f002 f8e4 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001780:	bd10      	pop	{r4, pc}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	200002dc 	.word	0x200002dc

08001788 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001788:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800178a:	4802      	ldr	r0, [pc, #8]	@ (8001794 <ADC1_IRQHandler+0xc>)
 800178c:	f001 fb68 	bl	8002e60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001790:	bd10      	pop	{r4, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	20000338 	.word	0x20000338

08001798 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001798:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800179a:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 800179c:	f003 f9cc 	bl	8004b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	20000480 	.word	0x20000480

080017a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM1_CC_IRQHandler+0xc>)
 80017ac:	f003 f9c4 	bl	8004b38 <HAL_TIM_IRQHandler>
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	20000480 	.word	0x20000480

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80017ba:	2501      	movs	r5, #1
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <TIM3_IRQHandler+0xbc>)
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	4215      	tst	r5, r2
 80017c2:	d012      	beq.n	80017ea <TIM3_IRQHandler+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80017c4:	2202      	movs	r2, #2
 80017c6:	4252      	negs	r2, r2
 80017c8:	611a      	str	r2, [r3, #16]
    	SWS_intHandler(HAL_GetTick());
    }
}

void handleHallOverflow(void){
	Measured.motorSpeed.speedWithoutFilter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	4c2a      	ldr	r4, [pc, #168]	@ (8001878 <TIM3_IRQHandler+0xc0>)
 80017ce:	65e3      	str	r3, [r4, #92]	@ 0x5c
//		measured.motorSpeed.speed = 0;
	Measured.motorPeriod.periodBeforeFilter = MAX_HALL_PERIOD;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <TIM3_IRQHandler+0xc4>)
 80017d2:	6463      	str	r3, [r4, #68]	@ 0x44
	Measured.motorPeriod.period = MAX_HALL_PERIOD;
 80017d4:	64a3      	str	r3, [r4, #72]	@ 0x48
//		calculateMotorSpeed(measured.motorPeriod.period);
//	filterMotorSpeed();
//	getHallPos();
	handle_hall(Measured.hallPosition);
 80017d6:	2334      	movs	r3, #52	@ 0x34
 80017d8:	5ce0      	ldrb	r0, [r4, r3]
 80017da:	f000 ff47 	bl	800266c <handle_hall>
	getHallAngle(MotorRun.hallstate);
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <TIM3_IRQHandler+0xc8>)
 80017e0:	7818      	ldrb	r0, [r3, #0]
 80017e2:	f000 fe87 	bl	80024f4 <getHallAngle>
//	Fixedvalue.phaseIncAcc = 0;
	Measured.motorPeriod.firstCap = 1U;
 80017e6:	234c      	movs	r3, #76	@ 0x4c
 80017e8:	54e5      	strb	r5, [r4, r3]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80017ea:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <TIM3_IRQHandler+0xbc>)
 80017ec:	6913      	ldr	r3, [r2, #16]
 80017ee:	079b      	lsls	r3, r3, #30
 80017f0:	d53a      	bpl.n	8001868 <TIM3_IRQHandler+0xb0>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80017f2:	2303      	movs	r3, #3
		MotorRun.hall_overflowedFlag = 0;
 80017f4:	2600      	movs	r6, #0
 80017f6:	425b      	negs	r3, r3
 80017f8:	4d21      	ldr	r5, [pc, #132]	@ (8001880 <TIM3_IRQHandler+0xc8>)
 80017fa:	6113      	str	r3, [r2, #16]
		        uint8_t hall = ((HAL_GPIO_ReadPin(HW_GPIO_Port, HW_Pin) << 2)
 80017fc:	2101      	movs	r1, #1
 80017fe:	4821      	ldr	r0, [pc, #132]	@ (8001884 <TIM3_IRQHandler+0xcc>)
		MotorRun.hall_overflowedFlag = 0;
 8001800:	762e      	strb	r6, [r5, #24]
		        uint8_t hall = ((HAL_GPIO_ReadPin(HW_GPIO_Port, HW_Pin) << 2)
 8001802:	f002 f9ef 	bl	8003be4 <HAL_GPIO_ReadPin>
		                        | (HAL_GPIO_ReadPin(HV_GPIO_Port, HV_Pin) << 1)
 8001806:	2120      	movs	r1, #32
		        uint8_t hall = ((HAL_GPIO_ReadPin(HW_GPIO_Port, HW_Pin) << 2)
 8001808:	0004      	movs	r4, r0
		                        | (HAL_GPIO_ReadPin(HV_GPIO_Port, HV_Pin) << 1)
 800180a:	481e      	ldr	r0, [pc, #120]	@ (8001884 <TIM3_IRQHandler+0xcc>)
 800180c:	f002 f9ea 	bl	8003be4 <HAL_GPIO_ReadPin>
		        uint8_t hall = ((HAL_GPIO_ReadPin(HW_GPIO_Port, HW_Pin) << 2)
 8001810:	00a4      	lsls	r4, r4, #2
		                        | (HAL_GPIO_ReadPin(HV_GPIO_Port, HV_Pin) << 1)
 8001812:	0040      	lsls	r0, r0, #1
 8001814:	4304      	orrs	r4, r0
		                        | HAL_GPIO_ReadPin(HU_GPIO_Port, HU_Pin));
 8001816:	2110      	movs	r1, #16
 8001818:	481a      	ldr	r0, [pc, #104]	@ (8001884 <TIM3_IRQHandler+0xcc>)
 800181a:	f002 f9e3 	bl	8003be4 <HAL_GPIO_ReadPin>
		        MotorRun.hallstate = hall ^ FixedValue.hallmodifier;
 800181e:	2279      	movs	r2, #121	@ 0x79
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <TIM3_IRQHandler+0xd0>)
		                        | (HAL_GPIO_ReadPin(HV_GPIO_Port, HV_Pin) << 1)
 8001822:	b264      	sxtb	r4, r4
		        MotorRun.hallstate = hall ^ FixedValue.hallmodifier;
 8001824:	5c9b      	ldrb	r3, [r3, r2]
		                        | HAL_GPIO_ReadPin(HU_GPIO_Port, HU_Pin));
 8001826:	4320      	orrs	r0, r4
		        uint8_t hall = ((HAL_GPIO_ReadPin(HW_GPIO_Port, HW_Pin) << 2)
 8001828:	b2c7      	uxtb	r7, r0
		        MotorRun.hallstate = hall ^ FixedValue.hallmodifier;
 800182a:	4058      	eors	r0, r3
				if (Measured.motorPeriod.firstCap == 1U){
 800182c:	234c      	movs	r3, #76	@ 0x4c
 800182e:	4c12      	ldr	r4, [pc, #72]	@ (8001878 <TIM3_IRQHandler+0xc0>)
		        MotorRun.hallstate = hall ^ FixedValue.hallmodifier;
 8001830:	7028      	strb	r0, [r5, #0]
		        MotorRun.phaseIncAcc =0;
 8001832:	842e      	strh	r6, [r5, #32]
				if (Measured.motorPeriod.firstCap == 1U){
 8001834:	5ce2      	ldrb	r2, [r4, r3]
 8001836:	2a01      	cmp	r2, #1
 8001838:	d017      	beq.n	800186a <TIM3_IRQHandler+0xb2>
				Measured.motorPeriod.lastInputCapturedTime = HAL_GetTick();
 800183a:	f001 f995 	bl	8002b68 <HAL_GetTick>
		        Measured.motorPeriod.inputCaptured = 1;
 800183e:	2201      	movs	r2, #1
 8001840:	2338      	movs	r3, #56	@ 0x38
 8001842:	54e2      	strb	r2, [r4, r3]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <TIM3_IRQHandler+0xbc>)
				Measured.motorPeriod.lastInputCapturedTime = HAL_GetTick();
 8001846:	6520      	str	r0, [r4, #80]	@ 0x50
 8001848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		        handle_hall(hall);
 800184a:	0038      	movs	r0, r7
		        Measured.motorPeriod.capturedValue =(uint16_t) LL_TIM_IC_GetCaptureCH1(TIM3);
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	0c1b      	lsrs	r3, r3, #16
 8001850:	63e3      	str	r3, [r4, #60]	@ 0x3c
		        handle_hall(hall);
 8001852:	f000 ff0b 	bl	800266c <handle_hall>
				calculateMotorPeriod(Measured.motorPeriod.capturedValue);
 8001856:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001858:	f000 fdee 	bl	8002438 <calculateMotorPeriod>
				calculateMotorSpeed(Measured.motorPeriod.periodBeforeClamp);
 800185c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800185e:	f000 fe15 	bl	800248c <calculateMotorSpeed>
				getHallAngle(MotorRun.hallstate);
 8001862:	7828      	ldrb	r0, [r5, #0]
 8001864:	f000 fe46 	bl	80024f4 <getHallAngle>
}
 8001868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					Measured.motorPeriod.firstCap = 0U;
 800186a:	2200      	movs	r2, #0
 800186c:	54e2      	strb	r2, [r4, r3]
					Measured.motorPeriod.capturedValue = MAX_HALL_PERIOD;
 800186e:	4b03      	ldr	r3, [pc, #12]	@ (800187c <TIM3_IRQHandler+0xc4>)
 8001870:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001872:	e7e2      	b.n	800183a <TIM3_IRQHandler+0x82>
 8001874:	40000400 	.word	0x40000400
 8001878:	200005fc 	.word	0x200005fc
 800187c:	0000ab3b 	.word	0x0000ab3b
 8001880:	20000670 	.word	0x20000670
 8001884:	50000400 	.word	0x50000400
 8001888:	2000069c 	.word	0x2000069c

0800188c <TIM14_IRQHandler>:
{
 800188c:	b510      	push	{r4, lr}
	MotorRun.counter++;
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <TIM14_IRQHandler+0x48>)
 8001890:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
		TIM1->CCR3 = MotorRun.PDC1Latch;
 8001892:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
	MotorRun.counter++;
 8001894:	3201      	adds	r2, #1
 8001896:	851a      	strh	r2, [r3, #40]	@ 0x28
		TIM1->CCR3 = MotorRun.PDC1Latch;
 8001898:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <TIM14_IRQHandler+0x4c>)
 800189a:	63d1      	str	r1, [r2, #60]	@ 0x3c
		TIM1->CCR2 = MotorRun.PDC3Latch;
 800189c:	8cd9      	ldrh	r1, [r3, #38]	@ 0x26
 800189e:	6391      	str	r1, [r2, #56]	@ 0x38
		TIM1->CCR1 = MotorRun.PDC2Latch;
 80018a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018a2:	6353      	str	r3, [r2, #52]	@ 0x34
	fast_loop();
 80018a4:	f000 ff00 	bl	80026a8 <fast_loop>
	phaseAdv_updateAngle();
 80018a8:	f000 fff6 	bl	8002898 <phaseAdv_updateAngle>
	filterMotorPeriod();
 80018ac:	f000 fde0 	bl	8002470 <filterMotorPeriod>
	filterMotorSpeed();
 80018b0:	f000 fe10 	bl	80024d4 <filterMotorSpeed>
	uint32_t brake = HAL_GPIO_ReadPin(BRAKE_GPIO_Port, BRAKE_Pin);
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	4809      	ldr	r0, [pc, #36]	@ (80018dc <TIM14_IRQHandler+0x50>)
 80018b8:	0149      	lsls	r1, r1, #5
 80018ba:	f002 f993 	bl	8003be4 <HAL_GPIO_ReadPin>
	update_brakevalue(brake);
 80018be:	f000 ff21 	bl	8002704 <update_brakevalue>
	handleDrivingInputSource();
 80018c2:	f000 fd21 	bl	8002308 <handleDrivingInputSource>
	stateMachine_handle();
 80018c6:	f000 fe5f 	bl	8002588 <stateMachine_handle>
  HAL_TIM_IRQHandler(&htim14);
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <TIM14_IRQHandler+0x54>)
 80018cc:	f003 f934 	bl	8004b38 <HAL_TIM_IRQHandler>
}
 80018d0:	bd10      	pop	{r4, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	20000670 	.word	0x20000670
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	50000400 	.word	0x50000400
 80018e0:	20000434 	.word	0x20000434

080018e4 <TIM17_IRQHandler>:
{
 80018e4:	b510      	push	{r4, lr}
	    updateSpeedPIValues();
 80018e6:	f000 fc37 	bl	8002158 <updateSpeedPIValues>
	    slow_loop();
 80018ea:	f000 ff11 	bl	8002710 <slow_loop>
		SWS_calculateSpeed();
 80018ee:	f000 fba7 	bl	8002040 <SWS_calculateSpeed>
		pedal_handle();
 80018f2:	f000 fbfb 	bl	80020ec <pedal_handle>
		uint32_t sec = HAL_GetTick();
 80018f6:	f001 f937 	bl	8002b68 <HAL_GetTick>
  HAL_TIM_IRQHandler(&htim17);
 80018fa:	4802      	ldr	r0, [pc, #8]	@ (8001904 <TIM17_IRQHandler+0x20>)
 80018fc:	f003 f91c 	bl	8004b38 <HAL_TIM_IRQHandler>
}
 8001900:	bd10      	pop	{r4, pc}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	200003e8 	.word	0x200003e8

08001908 <USART1_IRQHandler>:
{
 8001908:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&huart1);
 800190a:	4802      	ldr	r0, [pc, #8]	@ (8001914 <USART1_IRQHandler+0xc>)
 800190c:	f003 fcbc 	bl	8005288 <HAL_UART_IRQHandler>
}
 8001910:	bd10      	pop	{r4, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	200004cc 	.word	0x200004cc

08001918 <motorenable>:
void motorenable() {
 8001918:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800191a:	4c0d      	ldr	r4, [pc, #52]	@ (8001950 <motorenable+0x38>)
 800191c:	2100      	movs	r1, #0
 800191e:	0020      	movs	r0, r4
 8001920:	f003 f840 	bl	80049a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001924:	2104      	movs	r1, #4
 8001926:	0020      	movs	r0, r4
 8001928:	f003 f83c 	bl	80049a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800192c:	2108      	movs	r1, #8
 800192e:	0020      	movs	r0, r4
 8001930:	f003 f838 	bl	80049a4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001934:	2100      	movs	r1, #0
 8001936:	0020      	movs	r0, r4
 8001938:	f003 fbc2 	bl	80050c0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800193c:	2104      	movs	r1, #4
 800193e:	0020      	movs	r0, r4
 8001940:	f003 fbbe 	bl	80050c0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001944:	2108      	movs	r1, #8
 8001946:	0020      	movs	r0, r4
 8001948:	f003 fbba 	bl	80050c0 <HAL_TIMEx_PWMN_Start>
}
 800194c:	bd10      	pop	{r4, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	20000480 	.word	0x20000480

08001954 <motordisable>:
void motordisable() {
 8001954:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001956:	4c0d      	ldr	r4, [pc, #52]	@ (800198c <motordisable+0x38>)
 8001958:	2100      	movs	r1, #0
 800195a:	0020      	movs	r0, r4
 800195c:	f003 f826 	bl	80049ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001960:	2104      	movs	r1, #4
 8001962:	0020      	movs	r0, r4
 8001964:	f003 f822 	bl	80049ac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001968:	2108      	movs	r1, #8
 800196a:	0020      	movs	r0, r4
 800196c:	f003 f81e 	bl	80049ac <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001970:	2100      	movs	r1, #0
 8001972:	0020      	movs	r0, r4
 8001974:	f003 fba8 	bl	80050c8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001978:	2104      	movs	r1, #4
 800197a:	0020      	movs	r0, r4
 800197c:	f003 fba4 	bl	80050c8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8001980:	2108      	movs	r1, #8
 8001982:	0020      	movs	r0, r4
 8001984:	f003 fba0 	bl	80050c8 <HAL_TIMEx_PWMN_Stop>
}
 8001988:	bd10      	pop	{r4, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	20000480 	.word	0x20000480

08001990 <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001990:	b510      	push	{r4, lr}
    if (GPIO_Pin == PAS_Pin) {
 8001992:	2804      	cmp	r0, #4
 8001994:	d002      	beq.n	800199c <HAL_GPIO_EXTI_Rising_Callback+0xc>
    if (GPIO_Pin == MOTOR_SPD_Pin) {
 8001996:	2808      	cmp	r0, #8
 8001998:	d005      	beq.n	80019a6 <HAL_GPIO_EXTI_Rising_Callback+0x16>
}
 800199a:	bd10      	pop	{r4, pc}
    	pedal_riseIntHandler(HAL_GetTick());
 800199c:	f001 f8e4 	bl	8002b68 <HAL_GetTick>
 80019a0:	f000 fb5e 	bl	8002060 <pedal_riseIntHandler>
    if (GPIO_Pin == MOTOR_SPD_Pin) {
 80019a4:	e7f9      	b.n	800199a <HAL_GPIO_EXTI_Rising_Callback+0xa>
    	SWS_intHandler(HAL_GetTick());
 80019a6:	f001 f8df 	bl	8002b68 <HAL_GetTick>
 80019aa:	f000 fb3f 	bl	800202c <SWS_intHandler>
}
 80019ae:	e7f4      	b.n	800199a <HAL_GPIO_EXTI_Rising_Callback+0xa>

080019b0 <HAL_ADC_ConvCpltCallback>:
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {

    if (hadc->Instance == ADC1) {
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_ADC_ConvCpltCallback+0x1c>)
 80019b2:	6802      	ldr	r2, [r0, #0]
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80019b4:	b510      	push	{r4, lr}
    if (hadc->Instance == ADC1) {
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d000      	beq.n	80019bc <HAL_ADC_ConvCpltCallback+0xc>
    	// Call the function to process ADC values and check protections

    	update_ADC(current,voltage,throttle,temperature);

    }
}
 80019ba:	bd10      	pop	{r4, pc}
    	uint32_t temperature = HostVar.rawADCValues[3];
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <HAL_ADC_ConvCpltCallback+0x20>)
    	update_ADC(current,voltage,throttle,temperature);
 80019be:	68c3      	ldr	r3, [r0, #12]
 80019c0:	6802      	ldr	r2, [r0, #0]
 80019c2:	6881      	ldr	r1, [r0, #8]
 80019c4:	6840      	ldr	r0, [r0, #4]
 80019c6:	f000 fe65 	bl	8002694 <update_ADC>
}
 80019ca:	e7f6      	b.n	80019ba <HAL_ADC_ConvCpltCallback+0xa>
 80019cc:	40012400 	.word	0x40012400
 80019d0:	200003d8 	.word	0x200003d8

080019d4 <acceptDataIfAddressMatch>:

static uint8_t validAddress[3] = { 0x01, 0x14, 0x01 };
void acceptDataIfAddressMatch() {
 80019d4:	b570      	push	{r4, r5, r6, lr}
	if (Communication.rxBuf[0] == validAddress[0]
 80019d6:	4c0f      	ldr	r4, [pc, #60]	@ (8001a14 <acceptDataIfAddressMatch+0x40>)
 80019d8:	7863      	ldrb	r3, [r4, #1]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d000      	beq.n	80019e0 <acceptDataIfAddressMatch+0xc>
			&& Communication.rxBuf[2] == validAddress[2]) {
		memcpy(Communication.rawData, Communication.rxBuf, DISPLAY_RX_SIZE);
		display_parse();
		Communication.source = 0;
	}
}
 80019de:	bd70      	pop	{r4, r5, r6, pc}
			&& Communication.rxBuf[1] == validAddress[1]
 80019e0:	78a3      	ldrb	r3, [r4, #2]
 80019e2:	2b14      	cmp	r3, #20
 80019e4:	d1fb      	bne.n	80019de <acceptDataIfAddressMatch+0xa>
			&& Communication.rxBuf[2] == validAddress[2]) {
 80019e6:	78e5      	ldrb	r5, [r4, #3]
 80019e8:	2d01      	cmp	r5, #1
 80019ea:	d1f8      	bne.n	80019de <acceptDataIfAddressMatch+0xa>
		memcpy(Communication.rawData, Communication.rxBuf, DISPLAY_RX_SIZE);
 80019ec:	0020      	movs	r0, r4
 80019ee:	2214      	movs	r2, #20
 80019f0:	3015      	adds	r0, #21
 80019f2:	1c61      	adds	r1, r4, #1
 80019f4:	f004 fea2 	bl	800673c <memcpy>
		}
	}
}

void display_parse() {
	Display.in.parsed.pedalAssist = Communication.rawData[4];
 80019f8:	7e62      	ldrb	r2, [r4, #25]
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <acceptDataIfAddressMatch+0x44>)
 80019fc:	701a      	strb	r2, [r3, #0]
	Display.in.parsed.multiParam.value = Communication.rawData[5];
 80019fe:	7ea2      	ldrb	r2, [r4, #26]
 8001a00:	705a      	strb	r2, [r3, #1]
	if (Display.in.parsed.multiParam.cruiseSignal == 1) {
 8001a02:	4215      	tst	r5, r2
 8001a04:	d102      	bne.n	8001a0c <acceptDataIfAddressMatch+0x38>
		Communication.source = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	7023      	strb	r3, [r4, #0]
}
 8001a0a:	e7e8      	b.n	80019de <acceptDataIfAddressMatch+0xa>
		cruise_toggle();
 8001a0c:	f000 fc52 	bl	80022b4 <cruise_toggle>
 8001a10:	e7f9      	b.n	8001a06 <acceptDataIfAddressMatch+0x32>
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	200003ac 	.word	0x200003ac
 8001a18:	20000560 	.word	0x20000560

08001a1c <HAL_UART_RxCpltCallback>:
	if (huart->Instance == USART1) {
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_UART_RxCpltCallback+0x24>)
 8001a1e:	6802      	ldr	r2, [r0, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a20:	b510      	push	{r4, lr}
	if (huart->Instance == USART1) {
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d000      	beq.n	8001a28 <HAL_UART_RxCpltCallback+0xc>
}
 8001a26:	bd10      	pop	{r4, pc}
		acceptDataIfAddressMatch();
 8001a28:	f7ff ffd4 	bl	80019d4 <acceptDataIfAddressMatch>
		HAL_UART_Receive_IT(&huart1, Communication.rxBuf, DISPLAY_RX_SIZE);
 8001a2c:	2214      	movs	r2, #20
 8001a2e:	4905      	ldr	r1, [pc, #20]	@ (8001a44 <HAL_UART_RxCpltCallback+0x28>)
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <HAL_UART_RxCpltCallback+0x2c>)
 8001a32:	f004 fb61 	bl	80060f8 <HAL_UART_Receive_IT>
		Display.lastReceptionTime = HAL_GetTick();
 8001a36:	f001 f897 	bl	8002b68 <HAL_GetTick>
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <HAL_UART_RxCpltCallback+0x30>)
 8001a3c:	6098      	str	r0, [r3, #8]
}
 8001a3e:	e7f2      	b.n	8001a26 <HAL_UART_RxCpltCallback+0xa>
 8001a40:	40013800 	.word	0x40013800
 8001a44:	200003ad 	.word	0x200003ad
 8001a48:	200004cc 	.word	0x200004cc
 8001a4c:	20000560 	.word	0x20000560

08001a50 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	4770      	bx	lr
 8001a52:	46c0      	nop			@ (mov r8, r8)

08001a54 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	46ce      	mov	lr, r9
 8001a58:	4647      	mov	r7, r8
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8001a5a:	2402      	movs	r4, #2
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b097      	sub	sp, #92	@ 0x5c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a60:	ab03      	add	r3, sp, #12
 8001a62:	0018      	movs	r0, r3
 8001a64:	2214      	movs	r2, #20
 8001a66:	2100      	movs	r1, #0
 8001a68:	4698      	mov	r8, r3
 8001a6a:	f004 fe3b 	bl	80066e4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2100      	movs	r1, #0
 8001a72:	a80e      	add	r0, sp, #56	@ 0x38
 8001a74:	f004 fe36 	bl	80066e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	220c      	movs	r2, #12
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	a80a      	add	r0, sp, #40	@ 0x28
 8001a7e:	f004 fe31 	bl	80066e4 <memset>
 8001a82:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <MX_TIM3_Init+0x160>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	a908      	add	r1, sp, #32
 8001a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a88:	2500      	movs	r5, #0
 8001a8a:	4322      	orrs	r2, r4
 8001a8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a90:	2600      	movs	r6, #0
 8001a92:	4022      	ands	r2, r4
 8001a94:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a96:	9a02      	ldr	r2, [sp, #8]
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a9a:	2701      	movs	r7, #1
 8001a9c:	4322      	orrs	r2, r4
 8001a9e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4023      	ands	r3, r4
 8001aa6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	2302      	movs	r3, #2
 8001aac:	9208      	str	r2, [sp, #32]
 8001aae:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	930d      	str	r3, [sp, #52]	@ 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <MX_TIM3_Init+0x164>)
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f004 fbe3 	bl	8006284 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001abe:	2310      	movs	r3, #16
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	a908      	add	r1, sp, #32
 8001ac2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001ac4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ac6:	960c      	str	r6, [sp, #48]	@ 0x30
 8001ac8:	970d      	str	r7, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aca:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001acc:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ace:	950b      	str	r5, [sp, #44]	@ 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f004 fbd8 	bl	8006284 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ad4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	a908      	add	r1, sp, #32
 8001ad8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ada:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001adc:	960c      	str	r6, [sp, #48]	@ 0x30
 8001ade:	970d      	str	r7, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ae0:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ae2:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ae4:	950b      	str	r5, [sp, #44]	@ 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f004 fbcd 	bl	8006284 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aea:	21c4      	movs	r1, #196	@ 0xc4
 8001aec:	20ff      	movs	r0, #255	@ 0xff
 8001aee:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <MX_TIM3_Init+0x168>)
 8001af0:	0089      	lsls	r1, r1, #2
 8001af2:	585a      	ldr	r2, [r3, r1]
 8001af4:	4382      	bics	r2, r0
 8001af6:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	0252      	lsls	r2, r2, #9
 8001afc:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM3_IRQn);

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 146-LL_TIM_IC_FILTER_FDIV1_N2;
 8001afe:	2392      	movs	r3, #146	@ 0x92
 8001b00:	4642      	mov	r2, r8
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b02:	2780      	movs	r7, #128	@ 0x80
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 65535;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b04:	4c2e      	ldr	r4, [pc, #184]	@ (8001bc0 <MX_TIM3_Init+0x16c>)
  TIM_InitStruct.Prescaler = 146-LL_TIM_IC_FILTER_FDIV1_N2;
 8001b06:	8013      	strh	r3, [r2, #0]
  TIM_InitStruct.Autoreload = 65535;
 8001b08:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <MX_TIM3_Init+0x170>)
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b0a:	4641      	mov	r1, r8
 8001b0c:	0020      	movs	r0, r4
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b0e:	6055      	str	r5, [r2, #4]
  TIM_InitStruct.Autoreload = 65535;
 8001b10:	6093      	str	r3, [r2, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b12:	60d5      	str	r5, [r2, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b14:	f004 fc3a 	bl	800638c <LL_TIM_Init>
 8001b18:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc8 <MX_TIM3_Init+0x174>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b1c:	43bb      	bics	r3, r7
 8001b1e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b20:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b22:	4e2a      	ldr	r6, [pc, #168]	@ (8001bcc <MX_TIM3_Init+0x178>)
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b24:	4013      	ands	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 8001b26:	2211      	movs	r2, #17
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b28:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001b2a:	6a23      	ldr	r3, [r4, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;

  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	4393      	bics	r3, r2
 8001b30:	6223      	str	r3, [r4, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b32:	6833      	ldr	r3, [r6, #0]
 8001b34:	3a0e      	subs	r2, #14
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6033      	str	r3, [r6, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b3a:	6833      	ldr	r3, [r6, #0]
 8001b3c:	3209      	adds	r2, #9
 8001b3e:	4393      	bics	r3, r2
 8001b40:	6033      	str	r3, [r6, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	32e4      	adds	r2, #228	@ 0xe4
 8001b46:	4393      	bics	r3, r2
 8001b48:	3a10      	subs	r2, #16
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001b4e:	6a23      	ldr	r3, [r4, #32]
 8001b50:	3ad6      	subs	r2, #214	@ 0xd6
 8001b52:	4393      	bics	r3, r2
 8001b54:	6223      	str	r3, [r4, #32]
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8001b56:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001b58:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd0 <MX_TIM3_Init+0x17c>)
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8001b5a:	433b      	orrs	r3, r7
 8001b5c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001b5e:	68a3      	ldr	r3, [r4, #8]
 8001b60:	0020      	movs	r0, r4
 8001b62:	4013      	ands	r3, r2
 8001b64:	2240      	movs	r2, #64	@ 0x40
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001b6a:	68a3      	ldr	r3, [r4, #8]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <MX_TIM3_Init+0x180>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2204      	movs	r2, #4
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60a3      	str	r3, [r4, #8]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001b76:	2370      	movs	r3, #112	@ 0x70
 8001b78:	4698      	mov	r8, r3
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001b7a:	aa0e      	add	r2, sp, #56	@ 0x38
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001b7c:	930e      	str	r3, [sp, #56]	@ 0x38
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001b7e:	950f      	str	r5, [sp, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001b80:	9510      	str	r5, [sp, #64]	@ 0x40
  TIM_OC_InitStruct.CompareValue = 0;
 8001b82:	9511      	str	r5, [sp, #68]	@ 0x44
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b84:	9512      	str	r5, [sp, #72]	@ 0x48
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001b86:	9513      	str	r5, [sp, #76]	@ 0x4c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b88:	9514      	str	r5, [sp, #80]	@ 0x50
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b8a:	9515      	str	r5, [sp, #84]	@ 0x54
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001b8c:	f004 fc3e 	bl	800640c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b90:	6833      	ldr	r3, [r6, #0]
 8001b92:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <MX_TIM3_Init+0x184>)
 8001b94:	4013      	ands	r3, r2
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b96:	4642      	mov	r2, r8
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b98:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b9a:	6863      	ldr	r3, [r4, #4]
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	3a20      	subs	r2, #32
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001ba4:	68a3      	ldr	r3, [r4, #8]
 8001ba6:	43bb      	bics	r3, r7
 8001ba8:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM3);
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001baa:	b017      	add	sp, #92	@ 0x5c
 8001bac:	bcc0      	pop	{r6, r7}
 8001bae:	46b9      	mov	r9, r7
 8001bb0:	46b0      	mov	r8, r6
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	50000400 	.word	0x50000400
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	0000ffff 	.word	0x0000ffff
 8001bc8:	fffebff8 	.word	0xfffebff8
 8001bcc:	40000418 	.word	0x40000418
 8001bd0:	ffcfff8f 	.word	0xffcfff8f
 8001bd4:	fffefff8 	.word	0xfffefff8
 8001bd8:	fffffbff 	.word	0xfffffbff

08001bdc <MX_TIM14_Init>:
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001bdc:	4809      	ldr	r0, [pc, #36]	@ (8001c04 <MX_TIM14_Init+0x28>)
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <MX_TIM14_Init+0x2c>)
  htim14.Init.Prescaler = 0;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 3200;
 8001be0:	22c8      	movs	r2, #200	@ 0xc8
{
 8001be2:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001be4:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 0;
 8001be6:	2300      	movs	r3, #0
  htim14.Init.Period = 3200;
 8001be8:	0112      	lsls	r2, r2, #4
  htim14.Init.Prescaler = 0;
 8001bea:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 3200;
 8001bee:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001bf4:	f003 f8aa 	bl	8004d4c <HAL_TIM_Base_Init>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d100      	bne.n	8001bfe <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001bfc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001bfe:	f7ff fd8d 	bl	800171c <Error_Handler>
}
 8001c02:	e7fb      	b.n	8001bfc <MX_TIM14_Init+0x20>
 8001c04:	20000434 	.word	0x20000434
 8001c08:	40002000 	.word	0x40002000

08001c0c <MX_TIM17_Init>:
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c0c:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <MX_TIM17_Init+0x2c>)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_TIM17_Init+0x30>)
{
 8001c10:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8001c12:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 8;
 8001c14:	2308      	movs	r3, #8
 8001c16:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	2300      	movs	r3, #0
  htim17.Init.Period = 65535;
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <MX_TIM17_Init+0x34>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8001c1e:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c22:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c26:	f003 f891 	bl	8004d4c <HAL_TIM_Base_Init>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d100      	bne.n	8001c30 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001c2e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c30:	f7ff fd74 	bl	800171c <Error_Handler>
}
 8001c34:	e7fb      	b.n	8001c2e <MX_TIM17_Init+0x22>
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	200003e8 	.word	0x200003e8
 8001c3c:	40014800 	.word	0x40014800
 8001c40:	0000ffff 	.word	0x0000ffff

08001c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c44:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM1)
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xa0>)
{
 8001c4a:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM1)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8001c50:	4a25      	ldr	r2, [pc, #148]	@ (8001ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_TIM_Base_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 8001c56:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_TIM_Base_MspInit+0xa8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d02f      	beq.n	8001cbc <HAL_TIM_Base_MspInit+0x78>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001c5c:	b005      	add	sp, #20
 8001c5e:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <HAL_TIM_Base_MspInit+0xac>)
 8001c64:	0109      	lsls	r1, r1, #4
 8001c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001c68:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c72:	400b      	ands	r3, r1
 8001c74:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001c76:	2100      	movs	r1, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c78:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001c7a:	f001 fcbf 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001c7e:	200d      	movs	r0, #13
 8001c80:	f001 fce6 	bl	8003650 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	200e      	movs	r0, #14
 8001c8a:	f001 fcb7 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c8e:	200e      	movs	r0, #14
 8001c90:	f001 fcde 	bl	8003650 <HAL_NVIC_EnableIRQ>
 8001c94:	e7e2      	b.n	8001c5c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c96:	2180      	movs	r1, #128	@ 0x80
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_TIM_Base_MspInit+0xac>)
 8001c9a:	0209      	lsls	r1, r1, #8
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001c9e:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ca8:	400b      	ands	r3, r1
 8001caa:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001cac:	2100      	movs	r1, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001cae:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001cb0:	f001 fca4 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001cb4:	2013      	movs	r0, #19
 8001cb6:	f001 fccb 	bl	8003650 <HAL_NVIC_EnableIRQ>
 8001cba:	e7cf      	b.n	8001c5c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <HAL_TIM_Base_MspInit+0xac>)
 8001cc0:	02c9      	lsls	r1, r1, #11
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001cc4:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cce:	400b      	ands	r3, r1
 8001cd0:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001cd2:	2100      	movs	r1, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cd4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001cd6:	f001 fc91 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001cda:	2016      	movs	r0, #22
 8001cdc:	f001 fcb8 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 8001ce0:	e7bc      	b.n	8001c5c <HAL_TIM_Base_MspInit+0x18>
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40002000 	.word	0x40002000
 8001cec:	40014800 	.word	0x40014800
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	0004      	movs	r4, r0
 8001cf8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	2214      	movs	r2, #20
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	a802      	add	r0, sp, #8
 8001d00:	f004 fcf0 	bl	80066e4 <memset>
  if(timHandle->Instance==TIM1)
 8001d04:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_TIM_MspPostInit+0x70>)
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d0c:	b008      	add	sp, #32
 8001d0e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	2402      	movs	r4, #2
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_TIM_MspPostInit+0x74>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	4815      	ldr	r0, [pc, #84]	@ (8001d6c <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d18:	4322      	orrs	r2, r4
 8001d1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d1e:	4022      	ands	r2, r4
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	2201      	movs	r2, #1
 8001d26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d28:	4311      	orrs	r1, r2
 8001d2a:	6359      	str	r1, [r3, #52]	@ 0x34
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	401a      	ands	r2, r3
 8001d32:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d34:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	0212      	lsls	r2, r2, #8
 8001d3c:	9202      	str	r2, [sp, #8]
 8001d3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d40:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f001 fe5d 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d46:	23e0      	movs	r3, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	a902      	add	r1, sp, #8
 8001d52:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d5a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f001 fe50 	bl	8003a00 <HAL_GPIO_Init>
}
 8001d60:	e7d4      	b.n	8001d0c <HAL_TIM_MspPostInit+0x18>
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	50000400 	.word	0x50000400

08001d70 <MX_TIM1_Init>:
{
 8001d70:	b510      	push	{r4, lr}
 8001d72:	b09c      	sub	sp, #112	@ 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d74:	2210      	movs	r2, #16
 8001d76:	2100      	movs	r1, #0
 8001d78:	a804      	add	r0, sp, #16
 8001d7a:	f004 fcb3 	bl	80066e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7e:	220c      	movs	r2, #12
 8001d80:	2100      	movs	r1, #0
 8001d82:	4668      	mov	r0, sp
 8001d84:	f004 fcae 	bl	80066e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d88:	221c      	movs	r2, #28
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	a808      	add	r0, sp, #32
 8001d8e:	f004 fca9 	bl	80066e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d92:	2234      	movs	r2, #52	@ 0x34
 8001d94:	2100      	movs	r1, #0
 8001d96:	a80f      	add	r0, sp, #60	@ 0x3c
 8001d98:	f004 fca4 	bl	80066e4 <memset>
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d9c:	2220      	movs	r2, #32
  htim1.Instance = TIM1;
 8001d9e:	4c42      	ldr	r4, [pc, #264]	@ (8001ea8 <MX_TIM1_Init+0x138>)
 8001da0:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <MX_TIM1_Init+0x13c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001da2:	60a2      	str	r2, [r4, #8]
  htim1.Instance = TIM1;
 8001da4:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 3200;
 8001da6:	22c8      	movs	r2, #200	@ 0xc8
  htim1.Init.Prescaler = 0;
 8001da8:	2300      	movs	r3, #0
  htim1.Init.Period = 3200;
 8001daa:	0112      	lsls	r2, r2, #4
  htim1.Init.Prescaler = 0;
 8001dac:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db0:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001db2:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001db4:	3380      	adds	r3, #128	@ 0x80
  htim1.Init.Period = 3200;
 8001db6:	60e2      	str	r2, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001db8:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dba:	f002 ffc7 	bl	8004d4c <HAL_TIM_Base_Init>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d159      	bne.n	8001e76 <MX_TIM1_Init+0x106>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dc4:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc6:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dc8:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dca:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dcc:	f002 fdf2 	bl	80049b4 <HAL_TIM_ConfigClockSource>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d165      	bne.n	8001ea0 <MX_TIM1_Init+0x130>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dd4:	0020      	movs	r0, r4
 8001dd6:	f002 ffe9 	bl	8004dac <HAL_TIM_PWM_Init>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d15d      	bne.n	8001e9a <MX_TIM1_Init+0x12a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	2200      	movs	r2, #0
 8001de2:	9200      	str	r2, [sp, #0]
 8001de4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001de8:	4669      	mov	r1, sp
 8001dea:	0020      	movs	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dee:	f003 f96f 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d14e      	bne.n	8001e94 <MX_TIM1_Init+0x124>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df6:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001df8:	2202      	movs	r2, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	2100      	movs	r1, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfe:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8001e00:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001e02:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e04:	3206      	adds	r2, #6
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	900c      	str	r0, [sp, #48]	@ 0x30
 8001e08:	910d      	str	r1, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001e0a:	920b      	str	r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0c:	0020      	movs	r0, r4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	a908      	add	r1, sp, #32
  sConfigOC.Pulse = 0;
 8001e12:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e14:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e16:	f003 f835 	bl	8004e84 <HAL_TIM_PWM_ConfigChannel>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d137      	bne.n	8001e8e <MX_TIM1_Init+0x11e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	0020      	movs	r0, r4
 8001e22:	a908      	add	r1, sp, #32
 8001e24:	f003 f82e 	bl	8004e84 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d12d      	bne.n	8001e88 <MX_TIM1_Init+0x118>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	0020      	movs	r0, r4
 8001e30:	a908      	add	r1, sp, #32
 8001e32:	f003 f827 	bl	8004e84 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d123      	bne.n	8001e82 <MX_TIM1_Init+0x112>
  sBreakDeadTimeConfig.DeadTime = 130-1;
 8001e3a:	2281      	movs	r2, #129	@ 0x81
 8001e3c:	9212      	str	r2, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	0192      	lsls	r2, r2, #6
 8001e42:	9214      	str	r2, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e44:	2280      	movs	r2, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e46:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e48:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4a:	0020      	movs	r0, r4
 8001e4c:	a90f      	add	r1, sp, #60	@ 0x3c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e4e:	930f      	str	r3, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e50:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e52:	9311      	str	r3, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e54:	9313      	str	r3, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e56:	9315      	str	r3, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e58:	9316      	str	r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e5a:	9317      	str	r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e5c:	9218      	str	r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e5e:	9319      	str	r3, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e60:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e62:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e64:	f003 f968 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d107      	bne.n	8001e7c <MX_TIM1_Init+0x10c>
  HAL_TIM_MspPostInit(&htim1);
 8001e6c:	0020      	movs	r0, r4
 8001e6e:	f7ff ff41 	bl	8001cf4 <HAL_TIM_MspPostInit>
}
 8001e72:	b01c      	add	sp, #112	@ 0x70
 8001e74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e76:	f7ff fc51 	bl	800171c <Error_Handler>
 8001e7a:	e7a2      	b.n	8001dc2 <MX_TIM1_Init+0x52>
    Error_Handler();
 8001e7c:	f7ff fc4e 	bl	800171c <Error_Handler>
 8001e80:	e7f4      	b.n	8001e6c <MX_TIM1_Init+0xfc>
    Error_Handler();
 8001e82:	f7ff fc4b 	bl	800171c <Error_Handler>
 8001e86:	e7d8      	b.n	8001e3a <MX_TIM1_Init+0xca>
    Error_Handler();
 8001e88:	f7ff fc48 	bl	800171c <Error_Handler>
 8001e8c:	e7ce      	b.n	8001e2c <MX_TIM1_Init+0xbc>
    Error_Handler();
 8001e8e:	f7ff fc45 	bl	800171c <Error_Handler>
 8001e92:	e7c4      	b.n	8001e1e <MX_TIM1_Init+0xae>
    Error_Handler();
 8001e94:	f7ff fc42 	bl	800171c <Error_Handler>
 8001e98:	e7ad      	b.n	8001df6 <MX_TIM1_Init+0x86>
    Error_Handler();
 8001e9a:	f7ff fc3f 	bl	800171c <Error_Handler>
 8001e9e:	e79e      	b.n	8001dde <MX_TIM1_Init+0x6e>
    Error_Handler();
 8001ea0:	f7ff fc3c 	bl	800171c <Error_Handler>
 8001ea4:	e796      	b.n	8001dd4 <MX_TIM1_Init+0x64>
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	20000480 	.word	0x20000480
 8001eac:	40012c00 	.word	0x40012c00

08001eb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <MX_USART1_UART_Init+0x88>)
 8001eb4:	4c21      	ldr	r4, [pc, #132]	@ (8001f3c <MX_USART1_UART_Init+0x8c>)
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb6:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8001eb8:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 8001eba:	2396      	movs	r3, #150	@ 0x96
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec0:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ec2:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec4:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec6:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ec8:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eca:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ecc:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ece:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed0:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed2:	6263      	str	r3, [r4, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed4:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed6:	f004 f82b 	bl	8005f30 <HAL_UART_Init>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d111      	bne.n	8001f02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	0020      	movs	r0, r4
 8001ee2:	f004 f979 	bl	80061d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d113      	bne.n	8001f12 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eea:	2100      	movs	r1, #0
 8001eec:	0020      	movs	r0, r4
 8001eee:	f004 f99d 	bl	800622c <HAL_UARTEx_SetRxFifoThreshold>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d115      	bne.n	8001f22 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ef6:	0020      	movs	r0, r4
 8001ef8:	f004 f952 	bl	80061a0 <HAL_UARTEx_DisableFifoMode>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d117      	bne.n	8001f30 <MX_USART1_UART_Init+0x80>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f00:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001f02:	f7ff fc0b 	bl	800171c <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f06:	2100      	movs	r1, #0
 8001f08:	0020      	movs	r0, r4
 8001f0a:	f004 f965 	bl	80061d8 <HAL_UARTEx_SetTxFifoThreshold>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d0eb      	beq.n	8001eea <MX_USART1_UART_Init+0x3a>
    Error_Handler();
 8001f12:	f7ff fc03 	bl	800171c <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	0020      	movs	r0, r4
 8001f1a:	f004 f987 	bl	800622c <HAL_UARTEx_SetRxFifoThreshold>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d0e9      	beq.n	8001ef6 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 8001f22:	f7ff fbfb 	bl	800171c <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f26:	0020      	movs	r0, r4
 8001f28:	f004 f93a 	bl	80061a0 <HAL_UARTEx_DisableFifoMode>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d0e7      	beq.n	8001f00 <MX_USART1_UART_Init+0x50>
    Error_Handler();
 8001f30:	f7ff fbf4 	bl	800171c <Error_Handler>
}
 8001f34:	e7e4      	b.n	8001f00 <MX_USART1_UART_Init+0x50>
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	200004cc 	.word	0x200004cc

08001f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	0004      	movs	r4, r0
 8001f44:	b08e      	sub	sp, #56	@ 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	2214      	movs	r2, #20
 8001f48:	2100      	movs	r1, #0
 8001f4a:	a802      	add	r0, sp, #8
 8001f4c:	f004 fbca 	bl	80066e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f50:	2218      	movs	r2, #24
 8001f52:	2100      	movs	r1, #0
 8001f54:	a808      	add	r0, sp, #32
 8001f56:	f004 fbc5 	bl	80066e4 <memset>
  if(uartHandle->Instance==USART1)
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <HAL_UART_MspInit+0x8c>)
 8001f5c:	6822      	ldr	r2, [r4, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d001      	beq.n	8001f66 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f62:	b00e      	add	sp, #56	@ 0x38
 8001f64:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f66:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f6a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6c:	f002 fa56 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d128      	bne.n	8001fc6 <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f74:	2180      	movs	r1, #128	@ 0x80
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_UART_MspInit+0x90>)
 8001f78:	01c9      	lsls	r1, r1, #7
 8001f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	4815      	ldr	r0, [pc, #84]	@ (8001fd4 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f84:	400a      	ands	r2, r1
 8001f86:	9200      	str	r2, [sp, #0]
 8001f88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	6359      	str	r1, [r3, #52]	@ 0x34
 8001f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	401a      	ands	r2, r3
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f9c:	22c0      	movs	r2, #192	@ 0xc0
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	9202      	str	r2, [sp, #8]
 8001fa2:	9303      	str	r3, [sp, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9204      	str	r2, [sp, #16]
 8001faa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f001 fd26 	bl	8003a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	201b      	movs	r0, #27
 8001fba:	f001 fb1f 	bl	80035fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fbe:	201b      	movs	r0, #27
 8001fc0:	f001 fb46 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 8001fc4:	e7cd      	b.n	8001f62 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001fc6:	f7ff fba9 	bl	800171c <Error_Handler>
 8001fca:	e7d3      	b.n	8001f74 <HAL_UART_MspInit+0x34>
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	50000400 	.word	0x50000400

08001fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fd8:	480d      	ldr	r0, [pc, #52]	@ (8002010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fdc:	f7ff fd38 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe2:	490d      	ldr	r1, [pc, #52]	@ (8002018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800201c <LoopForever+0xe>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8002024 <LoopForever+0x16>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002006:	f004 fb75 	bl	80066f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800200a:	f7ff fb5f 	bl	80016cc <main>

0800200e <LoopForever>:

LoopForever:
  b LoopForever
 800200e:	e7fe      	b.n	800200e <LoopForever>
  ldr   r0, =_estack
 8002010:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002018:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 800201c:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8002020:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002024:	20000758 	.word	0x20000758

08002028 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

0800202c <SWS_intHandler>:
#include "sharedData.h"
#include "SWS.h"


void SWS_intHandler(uint32_t msec){
	Measured.singleWireSpeed.tk = msec;
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <SWS_intHandler+0x10>)
	Measured.singleWireSpeed.rawTickDiff = Measured.singleWireSpeed.tk - Measured.singleWireSpeed.lastTick;
 800202e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
	Measured.singleWireSpeed.tk = msec;
 8002030:	6718      	str	r0, [r3, #112]	@ 0x70
	Measured.singleWireSpeed.rawTickDiff = Measured.singleWireSpeed.tk - Measured.singleWireSpeed.lastTick;
 8002032:	1a82      	subs	r2, r0, r2
 8002034:	665a      	str	r2, [r3, #100]	@ 0x64
	Measured.singleWireSpeed.lastTick = Measured.singleWireSpeed.tk;
 8002036:	6698      	str	r0, [r3, #104]	@ 0x68
}
 8002038:	4770      	bx	lr
 800203a:	46c0      	nop			@ (mov r8, r8)
 800203c:	200005fc 	.word	0x200005fc

08002040 <SWS_calculateSpeed>:

void SWS_calculateSpeed(uint32_t msec){
	Measured.singleWireSpeed.tk = msec;
	if (Measured.singleWireSpeed.tk > Measured.singleWireSpeed.lastTick + 1000){
 8002040:	21fa      	movs	r1, #250	@ 0xfa
 8002042:	0089      	lsls	r1, r1, #2
 8002044:	468c      	mov	ip, r1
	Measured.singleWireSpeed.tk = msec;
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <SWS_calculateSpeed+0x1c>)
		Measured.singleWireSpeed.tickDiff = 0;
 8002048:	2100      	movs	r1, #0
	if (Measured.singleWireSpeed.tk > Measured.singleWireSpeed.lastTick + 1000){
 800204a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
	Measured.singleWireSpeed.tk = msec;
 800204c:	6718      	str	r0, [r3, #112]	@ 0x70
	if (Measured.singleWireSpeed.tk > Measured.singleWireSpeed.lastTick + 1000){
 800204e:	4462      	add	r2, ip
 8002050:	4282      	cmp	r2, r0
 8002052:	d300      	bcc.n	8002056 <SWS_calculateSpeed+0x16>
	} else {
		Measured.singleWireSpeed.tickDiff = (uint32_t)(Measured.singleWireSpeed.rawTickDiff);
 8002054:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002056:	66d9      	str	r1, [r3, #108]	@ 0x6c
	}
}
 8002058:	4770      	bx	lr
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	200005fc 	.word	0x200005fc

08002060 <pedal_riseIntHandler>:
#include"cruisecontrol.h"
PEDAL_ASSIST_t PedalAssist;

void pedal_riseIntHandler( uint32_t msec){
	uint32_t tick = msec;
	PedalAssist.diff = tick - PedalAssist.lastTick;
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <pedal_riseIntHandler+0x30>)
 8002062:	681a      	ldr	r2, [r3, #0]

	if (PedalAssist.diff > PedalAssist.maxDiff){
 8002064:	8999      	ldrh	r1, [r3, #12]
 8002066:	1a82      	subs	r2, r0, r2
 8002068:	428a      	cmp	r2, r1
 800206a:	d900      	bls.n	800206e <pedal_riseIntHandler+0xe>
 800206c:	000a      	movs	r2, r1
		PedalAssist.diff = PedalAssist.maxDiff;
	}
	if (PedalAssist.diff < PedalAssist.minDiff){
 800206e:	89d9      	ldrh	r1, [r3, #14]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	4291      	cmp	r1, r2
 8002074:	d809      	bhi.n	800208a <pedal_riseIntHandler+0x2a>
		return;
	}
	PedalAssist.lastTick = tick;

	int16_t value = PedalAssist.value + PedalAssist.addAmount;
 8002076:	8a99      	ldrh	r1, [r3, #20]
 8002078:	689a      	ldr	r2, [r3, #8]
	PedalAssist.lastTick = tick;
 800207a:	6018      	str	r0, [r3, #0]
	int16_t value = PedalAssist.value + PedalAssist.addAmount;
 800207c:	1852      	adds	r2, r2, r1
	if (value > FixedValue.adcResolution){
 800207e:	4905      	ldr	r1, [pc, #20]	@ (8002094 <pedal_riseIntHandler+0x34>)
	int16_t value = PedalAssist.value + PedalAssist.addAmount;
 8002080:	b212      	sxth	r2, r2
	if (value > FixedValue.adcResolution){
 8002082:	6809      	ldr	r1, [r1, #0]
 8002084:	428a      	cmp	r2, r1
 8002086:	d801      	bhi.n	800208c <pedal_riseIntHandler+0x2c>
		value = FixedValue.adcResolution ;
	}
	PedalAssist.value = value;
 8002088:	829a      	strh	r2, [r3, #20]
}
 800208a:	4770      	bx	lr
		value = FixedValue.adcResolution ;
 800208c:	b20a      	sxth	r2, r1
 800208e:	e7fb      	b.n	8002088 <pedal_riseIntHandler+0x28>
 8002090:	20000570 	.word	0x20000570
 8002094:	2000069c 	.word	0x2000069c

08002098 <pedal_setLimits>:
		PedalAssist.targetRPM = filteredSpeed;
	}
}

void pedal_setLimits() {
	PedalAssist.level = Display.in.parsed.pedalAssist;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <pedal_setLimits+0x48>)
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <pedal_setLimits+0x4c>)
 800209e:	769a      	strb	r2, [r3, #26]
	switch (PedalAssist.level) {
 80020a0:	2a0f      	cmp	r2, #15
 80020a2:	d803      	bhi.n	80020ac <pedal_setLimits+0x14>
 80020a4:	4810      	ldr	r0, [pc, #64]	@ (80020e8 <pedal_setLimits+0x50>)
 80020a6:	0091      	lsls	r1, r2, #2
 80020a8:	5841      	ldr	r1, [r0, r1]
 80020aa:	468f      	mov	pc, r1
 80020ac:	2100      	movs	r1, #0
	case 0:
		PedalAssist.maxRPM = PedalAssist.mode0RPM;
 80020ae:	8319      	strh	r1, [r3, #24]
	default:
		PedalAssist.maxRPM = 0;
		break;
	}

	if (PedalAssist.prevLevel != PedalAssist.level) {
 80020b0:	7ed9      	ldrb	r1, [r3, #27]
 80020b2:	4291      	cmp	r1, r2
 80020b4:	d000      	beq.n	80020b8 <pedal_setLimits+0x20>
//		cruise_stop();
		PedalAssist.prevLevel = PedalAssist.level;
 80020b6:	76da      	strb	r2, [r3, #27]
	}
}
 80020b8:	4770      	bx	lr
		PedalAssist.maxRPM = PedalAssist.mode5RPM;
 80020ba:	2026      	movs	r0, #38	@ 0x26
 80020bc:	5e19      	ldrsh	r1, [r3, r0]
		break;
 80020be:	e7f6      	b.n	80020ae <pedal_setLimits+0x16>
		PedalAssist.maxRPM = PedalAssist.mode0RPM;
 80020c0:	201c      	movs	r0, #28
 80020c2:	5e19      	ldrsh	r1, [r3, r0]
		break;
 80020c4:	e7f3      	b.n	80020ae <pedal_setLimits+0x16>
		PedalAssist.maxRPM = PedalAssist.mode1RPM;
 80020c6:	201e      	movs	r0, #30
 80020c8:	5e19      	ldrsh	r1, [r3, r0]
		break;
 80020ca:	e7f0      	b.n	80020ae <pedal_setLimits+0x16>
		PedalAssist.maxRPM = PedalAssist.mode2RPM;
 80020cc:	2020      	movs	r0, #32
 80020ce:	5e19      	ldrsh	r1, [r3, r0]
		break;
 80020d0:	e7ed      	b.n	80020ae <pedal_setLimits+0x16>
		PedalAssist.maxRPM = PedalAssist.mode3RPM;
 80020d2:	2022      	movs	r0, #34	@ 0x22
 80020d4:	5e19      	ldrsh	r1, [r3, r0]
		break;
 80020d6:	e7ea      	b.n	80020ae <pedal_setLimits+0x16>
		PedalAssist.maxRPM = PedalAssist.mode4RPM;
 80020d8:	2024      	movs	r0, #36	@ 0x24
 80020da:	5e19      	ldrsh	r1, [r3, r0]
		break;
 80020dc:	e7e7      	b.n	80020ae <pedal_setLimits+0x16>
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	20000560 	.word	0x20000560
 80020e4:	20000570 	.word	0x20000570
 80020e8:	08006844 	.word	0x08006844

080020ec <pedal_handle>:
void pedal_handle( uint32_t tick){
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	0006      	movs	r6, r0
	pedal_setLimits();
 80020f0:	f7ff ffd2 	bl	8002098 <pedal_setLimits>
	int32_t pedalValue = PedalAssist.value - ((int32_t)(tick - PedalAssist.lastTick) / PedalAssist.derampFactor);
 80020f4:	4c16      	ldr	r4, [pc, #88]	@ (8002150 <pedal_handle+0x64>)
 80020f6:	6827      	ldr	r7, [r4, #0]
 80020f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80020fa:	1bf0      	subs	r0, r6, r7
 80020fc:	f7fe f800 	bl	8000100 <__udivsi3>
 8002100:	2314      	movs	r3, #20
 8002102:	5ee5      	ldrsh	r5, [r4, r3]
 8002104:	1a28      	subs	r0, r5, r0
	if (pedalValue < 0){
 8002106:	d420      	bmi.n	800214a <pedal_handle+0x5e>
		PedalAssist.value = pedalValue;
 8002108:	b203      	sxth	r3, r0
	int16_t speed = (PedalAssist.value * PedalAssist.maxRPM) >> PedalAssist.scale;
 800210a:	001a      	movs	r2, r3
 800210c:	82a3      	strh	r3, [r4, #20]
 800210e:	2318      	movs	r3, #24
 8002110:	5ee5      	ldrsh	r5, [r4, r3]
	if (tick > PedalAssist.lastTick + PedalAssist.timeout){
 8002112:	8a23      	ldrh	r3, [r4, #16]
 8002114:	2100      	movs	r1, #0
 8002116:	19db      	adds	r3, r3, r7
	int16_t speed = (PedalAssist.value * PedalAssist.maxRPM) >> PedalAssist.scale;
 8002118:	7ca0      	ldrb	r0, [r4, #18]
	if (tick > PedalAssist.lastTick + PedalAssist.timeout){
 800211a:	42b3      	cmp	r3, r6
 800211c:	d305      	bcc.n	800212a <pedal_handle+0x3e>
	int16_t speed = (PedalAssist.value * PedalAssist.maxRPM) >> PedalAssist.scale;
 800211e:	436a      	muls	r2, r5
 8002120:	4102      	asrs	r2, r0
	int32_t filteredSpeed = ((30 * speed) + (34 * PedalAssist.targetRPM)) >> 6;
 8002122:	b212      	sxth	r2, r2
 8002124:	0111      	lsls	r1, r2, #4
 8002126:	1a89      	subs	r1, r1, r2
 8002128:	0049      	lsls	r1, r1, #1
 800212a:	2316      	movs	r3, #22
 800212c:	5ee2      	ldrsh	r2, [r4, r3]
 800212e:	0113      	lsls	r3, r2, #4
 8002130:	189b      	adds	r3, r3, r2
	if (filteredSpeed > FixedValue.max_rpm){
 8002132:	4a08      	ldr	r2, [pc, #32]	@ (8002154 <pedal_handle+0x68>)
	int32_t filteredSpeed = ((30 * speed) + (34 * PedalAssist.targetRPM)) >> 6;
 8002134:	005b      	lsls	r3, r3, #1
	if (filteredSpeed > FixedValue.max_rpm){
 8002136:	6892      	ldr	r2, [r2, #8]
	int32_t filteredSpeed = ((30 * speed) + (34 * PedalAssist.targetRPM)) >> 6;
 8002138:	185b      	adds	r3, r3, r1
 800213a:	119b      	asrs	r3, r3, #6
	if (filteredSpeed > FixedValue.max_rpm){
 800213c:	429a      	cmp	r2, r3
 800213e:	d202      	bcs.n	8002146 <pedal_handle+0x5a>
		PedalAssist.targetRPM = FixedValue.max_rpm;
 8002140:	b213      	sxth	r3, r2
 8002142:	82e3      	strh	r3, [r4, #22]
}
 8002144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PedalAssist.targetRPM = filteredSpeed;
 8002146:	b21b      	sxth	r3, r3
 8002148:	e7fb      	b.n	8002142 <pedal_handle+0x56>
 800214a:	2200      	movs	r2, #0
 800214c:	2300      	movs	r3, #0
 800214e:	e7dd      	b.n	800210c <pedal_handle+0x20>
 8002150:	20000570 	.word	0x20000570
 8002154:	2000069c 	.word	0x2000069c

08002158 <updateSpeedPIValues>:
controlLoop_t ControlVals;
void updateSpeedPIValues(void){
	int16_t r = (int16_t)Measured.TargetRPM;

	// for Kp
	if (r > FixedValue.controlPI.speedPI_highRPMShelf){
 8002158:	2290      	movs	r2, #144	@ 0x90
	int16_t r = (int16_t)Measured.TargetRPM;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <updateSpeedPIValues+0x44>)
	if (r > FixedValue.controlPI.speedPI_highRPMShelf){
 800215c:	2124      	movs	r1, #36	@ 0x24
 800215e:	5e59      	ldrsh	r1, [r3, r1]
 8002160:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <updateSpeedPIValues+0x48>)
 8002162:	589a      	ldr	r2, [r3, r2]
 8002164:	4291      	cmp	r1, r2
 8002166:	dd07      	ble.n	8002178 <updateSpeedPIValues+0x20>
		ControlVals.speedPI_kp= FixedValue.controlPI.speedPI_kp_highRPM;
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	589a      	ldr	r2, [r3, r2]
 800216c:	490d      	ldr	r1, [pc, #52]	@ (80021a4 <updateSpeedPIValues+0x4c>)
 800216e:	600a      	str	r2, [r1, #0]
	} else {
		ControlVals.speedPI_kp = FixedValue.controlPI.speedPI_kp_lowRPM;
	}

	// for Ki
	ControlVals.speedPI_ki = FixedValue.controlPI.speedPI_ki_lowRPM;
 8002170:	2284      	movs	r2, #132	@ 0x84
 8002172:	589b      	ldr	r3, [r3, r2]
 8002174:	604b      	str	r3, [r1, #4]
}
 8002176:	4770      	bx	lr
	} else if (r > FixedValue.controlPI.speedPI_lowRPMShelf){
 8002178:	208c      	movs	r0, #140	@ 0x8c
 800217a:	5818      	ldr	r0, [r3, r0]
 800217c:	4281      	cmp	r1, r0
 800217e:	dd0a      	ble.n	8002196 <updateSpeedPIValues+0x3e>
		int32_t uniqueDiff = FixedValue.controlPI.speedPI_highRPMShelf - r;
 8002180:	1a51      	subs	r1, r2, r1
		ControlVals.speedPI_kp = ((uniqueDiff * FixedValue.controlPI.speedPI_schMul) >> FixedValue.controlPI.speedPI_schMulSc) + FixedValue.controlPI.speedPI_kp_highRPM;
 8002182:	2294      	movs	r2, #148	@ 0x94
 8002184:	589a      	ldr	r2, [r3, r2]
 8002186:	434a      	muls	r2, r1
 8002188:	2198      	movs	r1, #152	@ 0x98
 800218a:	5859      	ldr	r1, [r3, r1]
 800218c:	410a      	asrs	r2, r1
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	5859      	ldr	r1, [r3, r1]
 8002192:	1852      	adds	r2, r2, r1
 8002194:	e7ea      	b.n	800216c <updateSpeedPIValues+0x14>
		ControlVals.speedPI_kp = FixedValue.controlPI.speedPI_kp_lowRPM;
 8002196:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002198:	e7e8      	b.n	800216c <updateSpeedPIValues+0x14>
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	200005fc 	.word	0x200005fc
 80021a0:	2000069c 	.word	0x2000069c
 80021a4:	200005a0 	.word	0x200005a0

080021a8 <speedPI>:

// To get the Iref value
void speedPI(){
	ControlVals.speedPI_error = (int32_t)Measured.TargetRPM - Measured.motorSpeed.speed;
 80021a8:	2260      	movs	r2, #96	@ 0x60
void speedPI(){
 80021aa:	b510      	push	{r4, lr}
	ControlVals.speedPI_error = (int32_t)Measured.TargetRPM - Measured.motorSpeed.speed;
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <speedPI+0x50>)
 80021ae:	2400      	movs	r4, #0
 80021b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80021b2:	5a9b      	ldrh	r3, [r3, r2]
 80021b4:	4a11      	ldr	r2, [pc, #68]	@ (80021fc <speedPI+0x54>)
 80021b6:	1ac9      	subs	r1, r1, r3
//	controlVals.speedPI_error = (int32_t)controlVals.targetRPM - 0;
	ControlVals.speedPI_integral += (int32_t)ControlVals.speedPI_error * (int32_t)ControlVals.speedPI_ki * (int32_t)ControlVals.speedPI_sat;
 80021b8:	6853      	ldr	r3, [r2, #4]
	ControlVals.speedPI_error = (int32_t)Measured.TargetRPM - Measured.motorSpeed.speed;
 80021ba:	b209      	sxth	r1, r1
	ControlVals.speedPI_integral += (int32_t)ControlVals.speedPI_error * (int32_t)ControlVals.speedPI_ki * (int32_t)ControlVals.speedPI_sat;
 80021bc:	434b      	muls	r3, r1
 80021be:	7a10      	ldrb	r0, [r2, #8]
	ControlVals.speedPI_error = (int32_t)Measured.TargetRPM - Measured.motorSpeed.speed;
 80021c0:	8151      	strh	r1, [r2, #10]
	ControlVals.speedPI_integral += (int32_t)ControlVals.speedPI_error * (int32_t)ControlVals.speedPI_ki * (int32_t)ControlVals.speedPI_sat;
 80021c2:	4358      	muls	r0, r3
 80021c4:	6913      	ldr	r3, [r2, #16]
 80021c6:	18c0      	adds	r0, r0, r3
	int16_t controlSignal = (int32_t)((ControlVals.speedPI_error * ControlVals.speedPI_kp) + ControlVals.speedPI_integral) >> FixedValue.controlPI.speedPI_scale;
 80021c8:	6813      	ldr	r3, [r2, #0]
	ControlVals.speedPI_integral += (int32_t)ControlVals.speedPI_error * (int32_t)ControlVals.speedPI_ki * (int32_t)ControlVals.speedPI_sat;
 80021ca:	6110      	str	r0, [r2, #16]
	int16_t controlSignal = (int32_t)((ControlVals.speedPI_error * ControlVals.speedPI_kp) + ControlVals.speedPI_integral) >> FixedValue.controlPI.speedPI_scale;
 80021cc:	434b      	muls	r3, r1
 80021ce:	181b      	adds	r3, r3, r0
 80021d0:	20a0      	movs	r0, #160	@ 0xa0
 80021d2:	490b      	ldr	r1, [pc, #44]	@ (8002200 <speedPI+0x58>)
 80021d4:	5c08      	ldrb	r0, [r1, r0]
 80021d6:	4103      	asrs	r3, r0

	if (controlSignal > (int16_t)FixedValue.current_nominal){
 80021d8:	6b08      	ldr	r0, [r1, #48]	@ 0x30
	int16_t controlSignal = (int32_t)((ControlVals.speedPI_error * ControlVals.speedPI_kp) + ControlVals.speedPI_integral) >> FixedValue.controlPI.speedPI_scale;
 80021da:	b21b      	sxth	r3, r3
	if (controlSignal > (int16_t)FixedValue.current_nominal){
 80021dc:	b201      	sxth	r1, r0
 80021de:	4299      	cmp	r1, r3
 80021e0:	db04      	blt.n	80021ec <speedPI+0x44>
		ControlVals.speedPI_output = (int16_t)FixedValue.current_nominal;
		ControlVals.speedPI_sat = 0U;
	} else if (controlSignal < -(int16_t)FixedValue.current_nominal){
 80021e2:	4249      	negs	r1, r1
 80021e4:	428b      	cmp	r3, r1
 80021e6:	da04      	bge.n	80021f2 <speedPI+0x4a>
		ControlVals.speedPI_output = -(int16_t)FixedValue.current_nominal;
 80021e8:	4240      	negs	r0, r0
 80021ea:	b201      	sxth	r1, r0
		ControlVals.speedPI_output = (int16_t)FixedValue.current_nominal;
 80021ec:	8191      	strh	r1, [r2, #12]
		ControlVals.speedPI_sat = 0U;
 80021ee:	7214      	strb	r4, [r2, #8]
		ControlVals.speedPI_sat = 0U;
	} else {
		ControlVals.speedPI_output = controlSignal;
		ControlVals.speedPI_sat = 1U;
	}
}
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	0019      	movs	r1, r3
 80021f4:	2401      	movs	r4, #1
 80021f6:	e7f9      	b.n	80021ec <speedPI+0x44>
 80021f8:	200005fc 	.word	0x200005fc
 80021fc:	200005a0 	.word	0x200005a0
 8002200:	2000069c 	.word	0x2000069c

08002204 <currentPI>:

// To get the "volts" value
void currentPI(){
	if (0 == Measured.TargetRPM){
 8002204:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <currentPI+0x5c>)
void currentPI(){
 8002206:	b530      	push	{r4, r5, lr}
	if (0 == Measured.TargetRPM){
 8002208:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800220a:	4816      	ldr	r0, [pc, #88]	@ (8002264 <currentPI+0x60>)
 800220c:	2d00      	cmp	r5, #0
 800220e:	d000      	beq.n	8002212 <currentPI+0xe>
		ControlVals.currentPI_integral = 0;
	}
	ControlVals.currentPI_error = (int32_t)ControlVals.speedPI_output - (int32_t)Measured.Current.calculated;
//	controlVals.currentPI_error = (int32_t)controlVals.speedPI_output - (int32_t)0;		// bypassing current
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 8002210:	6a85      	ldr	r5, [r0, #40]	@ 0x28
	ControlVals.currentPI_error = (int32_t)ControlVals.speedPI_output - (int32_t)Measured.Current.calculated;
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	8982      	ldrh	r2, [r0, #12]
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 8002216:	2120      	movs	r1, #32
	ControlVals.currentPI_error = (int32_t)ControlVals.speedPI_output - (int32_t)Measured.Current.calculated;
 8002218:	1ad2      	subs	r2, r2, r3
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 800221a:	23b0      	movs	r3, #176	@ 0xb0
 800221c:	4c12      	ldr	r4, [pc, #72]	@ (8002268 <currentPI+0x64>)
	ControlVals.currentPI_error = (int32_t)ControlVals.speedPI_output - (int32_t)Measured.Current.calculated;
 800221e:	b212      	sxth	r2, r2
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 8002220:	58e3      	ldr	r3, [r4, r3]
	ControlVals.currentPI_error = (int32_t)ControlVals.speedPI_output - (int32_t)Measured.Current.calculated;
 8002222:	8442      	strh	r2, [r0, #34]	@ 0x22
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 8002224:	4353      	muls	r3, r2
 8002226:	5c41      	ldrb	r1, [r0, r1]
 8002228:	4359      	muls	r1, r3
	int32_t controlSignal = (int32_t)((ControlVals.currentPI_error * FixedValue.controlPI.currentPI_kp) + ControlVals.currentPI_integral) >> FixedValue.controlPI.currentPI_scale;
 800222a:	23ac      	movs	r3, #172	@ 0xac
 800222c:	58e3      	ldr	r3, [r4, r3]
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 800222e:	1949      	adds	r1, r1, r5
	int32_t controlSignal = (int32_t)((ControlVals.currentPI_error * FixedValue.controlPI.currentPI_kp) + ControlVals.currentPI_integral) >> FixedValue.controlPI.currentPI_scale;
 8002230:	4353      	muls	r3, r2
 8002232:	22b4      	movs	r2, #180	@ 0xb4
	ControlVals.currentPI_integral += (int32_t)ControlVals.currentPI_error * (int32_t)FixedValue.controlPI.currentPI_ki * (int32_t)ControlVals.currentPI_sat;
 8002234:	6281      	str	r1, [r0, #40]	@ 0x28
	int32_t controlSignal = (int32_t)((ControlVals.currentPI_error * FixedValue.controlPI.currentPI_kp) + ControlVals.currentPI_integral) >> FixedValue.controlPI.currentPI_scale;
 8002236:	5ca2      	ldrb	r2, [r4, r2]
 8002238:	185b      	adds	r3, r3, r1
 800223a:	4113      	asrs	r3, r2

	if (controlSignal > 32767){				// this 32767 value should be verified asap
 800223c:	2280      	movs	r2, #128	@ 0x80
 800223e:	0212      	lsls	r2, r2, #8
 8002240:	4293      	cmp	r3, r2
 8002242:	da04      	bge.n	800224e <currentPI+0x4a>
		ControlVals.currentPI_output = 32767;
		ControlVals.currentPI_sat = 0U;
	} else if (controlSignal < 0){
 8002244:	2b00      	cmp	r3, #0
 8002246:	db08      	blt.n	800225a <currentPI+0x56>
		ControlVals.currentPI_output = 0;
		ControlVals.currentPI_sat = 0U;
	} else {
		ControlVals.currentPI_output = controlSignal;
 8002248:	2201      	movs	r2, #1
 800224a:	b21b      	sxth	r3, r3
		ControlVals.currentPI_sat = 1U;
 800224c:	e001      	b.n	8002252 <currentPI+0x4e>
 800224e:	2200      	movs	r2, #0
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <currentPI+0x68>)
		ControlVals.currentPI_output = 32767;
 8002252:	8483      	strh	r3, [r0, #36]	@ 0x24
		ControlVals.currentPI_sat = 0U;
 8002254:	2320      	movs	r3, #32
 8002256:	54c2      	strb	r2, [r0, r3]
	}

}
 8002258:	bd30      	pop	{r4, r5, pc}
 800225a:	2300      	movs	r3, #0
 800225c:	2200      	movs	r2, #0
 800225e:	e7f8      	b.n	8002252 <currentPI+0x4e>
 8002260:	200005fc 	.word	0x200005fc
 8002264:	200005a0 	.word	0x200005a0
 8002268:	2000069c 	.word	0x2000069c
 800226c:	00007fff 	.word	0x00007fff

08002270 <controlLoop_run>:

// Handle the control loop in one function.
void controlLoop_run(){
	// To run speedPI slower than currentPI
	ControlVals.speedPI_counter++;
	if (ControlVals.speedPI_counter >= FixedValue.controlPI.speedPI_maxCounter){
 8002270:	219c      	movs	r1, #156	@ 0x9c
void controlLoop_run(){
 8002272:	b510      	push	{r4, lr}
	ControlVals.speedPI_counter++;
 8002274:	4c07      	ldr	r4, [pc, #28]	@ (8002294 <controlLoop_run+0x24>)
	if (ControlVals.speedPI_counter >= FixedValue.controlPI.speedPI_maxCounter){
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <controlLoop_run+0x28>)
	ControlVals.speedPI_counter++;
 8002278:	6963      	ldr	r3, [r4, #20]
	if (ControlVals.speedPI_counter >= FixedValue.controlPI.speedPI_maxCounter){
 800227a:	5852      	ldr	r2, [r2, r1]
	ControlVals.speedPI_counter++;
 800227c:	3301      	adds	r3, #1
 800227e:	6163      	str	r3, [r4, #20]
	if (ControlVals.speedPI_counter >= FixedValue.controlPI.speedPI_maxCounter){
 8002280:	4293      	cmp	r3, r2
 8002282:	d202      	bcs.n	800228a <controlLoop_run+0x1a>
		speedPI();
		ControlVals.speedPI_counter = 0;
	}
	currentPI();
 8002284:	f7ff ffbe 	bl	8002204 <currentPI>
}
 8002288:	bd10      	pop	{r4, pc}
		speedPI();
 800228a:	f7ff ff8d 	bl	80021a8 <speedPI>
		ControlVals.speedPI_counter = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	6163      	str	r3, [r4, #20]
 8002292:	e7f7      	b.n	8002284 <controlLoop_run+0x14>
 8002294:	200005a0 	.word	0x200005a0
 8002298:	2000069c 	.word	0x2000069c

0800229c <controlLoop_reset>:

// Reset the control loop
void controlLoop_reset(){
	ControlVals.speedPI_output = 0;
 800229c:	2200      	movs	r2, #0
	ControlVals.speedPI_integral = 0;
 800229e:	2000      	movs	r0, #0
 80022a0:	2100      	movs	r1, #0
	ControlVals.speedPI_output = 0;
 80022a2:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <controlLoop_reset+0x14>)
	ControlVals.speedPI_integral = 0;
 80022a4:	6118      	str	r0, [r3, #16]
 80022a6:	6159      	str	r1, [r3, #20]
	ControlVals.speedPI_output = 0;
 80022a8:	819a      	strh	r2, [r3, #12]
	ControlVals.currentPI_output = 0;
 80022aa:	849a      	strh	r2, [r3, #36]	@ 0x24
	ControlVals.currentPI_integral = 0;
 80022ac:	629a      	str	r2, [r3, #40]	@ 0x28
	ControlVals.speedPI_counter = 0;
}
 80022ae:	4770      	bx	lr
 80022b0:	200005a0 	.word	0x200005a0

080022b4 <cruise_toggle>:
	CruiseMode.flags.isCruising = 0U;
	Display.out.errorCode8.cruise = 0U;
	CruiseMode.speed = 0;
}
void cruise_toggle(){
	if (0U == CruiseMode.flags.isCruising){
 80022b4:	2120      	movs	r1, #32
 80022b6:	2001      	movs	r0, #1
void cruise_toggle(){
 80022b8:	b530      	push	{r4, r5, lr}
	if (0U == CruiseMode.flags.isCruising){
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <cruise_toggle+0x48>)
 80022bc:	5c53      	ldrb	r3, [r2, r1]
 80022be:	4218      	tst	r0, r3
 80022c0:	d009      	beq.n	80022d6 <cruise_toggle+0x22>
	CruiseMode.flags.isCruising = 0U;
 80022c2:	4383      	bics	r3, r0
	Display.out.errorCode8.cruise = 0U;
 80022c4:	2004      	movs	r0, #4
	CruiseMode.flags.isCruising = 0U;
 80022c6:	5453      	strb	r3, [r2, r1]
	Display.out.errorCode8.cruise = 0U;
 80022c8:	490d      	ldr	r1, [pc, #52]	@ (8002300 <cruise_toggle+0x4c>)
 80022ca:	788b      	ldrb	r3, [r1, #2]
 80022cc:	4383      	bics	r3, r0
 80022ce:	708b      	strb	r3, [r1, #2]
	CruiseMode.speed = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61d3      	str	r3, [r2, #28]
	} else if (1U == CruiseMode.flags.isCruising){
		cruise_stop();
	} else {
		// Do nothing
	}
}
 80022d4:	bd30      	pop	{r4, r5, pc}
	if (Measured.motorSpeed.speed >= CruiseMode.cruiseSetBaseValue){
 80022d6:	2460      	movs	r4, #96	@ 0x60
 80022d8:	480a      	ldr	r0, [pc, #40]	@ (8002304 <cruise_toggle+0x50>)
 80022da:	5f04      	ldrsh	r4, [r0, r4]
 80022dc:	250e      	movs	r5, #14
 80022de:	5f50      	ldrsh	r0, [r2, r5]
 80022e0:	4284      	cmp	r4, r0
 80022e2:	dbf7      	blt.n	80022d4 <cruise_toggle+0x20>
		CruiseMode.flags.isCruising = 1U;
 80022e4:	2001      	movs	r0, #1
 80022e6:	4303      	orrs	r3, r0
		Display.out.errorCode8.cruise = 1U;
 80022e8:	2004      	movs	r0, #4
		CruiseMode.flags.isCruising = 1U;
 80022ea:	5453      	strb	r3, [r2, r1]
		Display.out.errorCode8.cruise = 1U;
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <cruise_toggle+0x4c>)
 80022ee:	788b      	ldrb	r3, [r1, #2]
 80022f0:	4303      	orrs	r3, r0
 80022f2:	708b      	strb	r3, [r1, #2]
		CruiseMode.speed = CruiseMode.throttleBaseValue;
 80022f4:	2106      	movs	r1, #6
 80022f6:	5e53      	ldrsh	r3, [r2, r1]
 80022f8:	61d3      	str	r3, [r2, #28]
}
 80022fa:	e7eb      	b.n	80022d4 <cruise_toggle+0x20>
 80022fc:	200005d4 	.word	0x200005d4
 8002300:	20000560 	.word	0x20000560
 8002304:	200005fc 	.word	0x200005fc

08002308 <handleDrivingInputSource>:
//		ControlVals.brakeStatus = 0;
//	}
//}


void handleDrivingInputSource(void){
 8002308:	b570      	push	{r4, r5, r6, lr}
//    update_rpm_based_on_brake_status(Measured.brakeRaw);
	pedal_handle();
 800230a:	f7ff feef 	bl	80020ec <pedal_handle>
	calculate_throttle(Measured.throttle.raw,FixedValue.max_rpm);
 800230e:	4c10      	ldr	r4, [pc, #64]	@ (8002350 <handleDrivingInputSource+0x48>)
 8002310:	4d10      	ldr	r5, [pc, #64]	@ (8002354 <handleDrivingInputSource+0x4c>)
 8002312:	8a20      	ldrh	r0, [r4, #16]
 8002314:	68a9      	ldr	r1, [r5, #8]
 8002316:	f000 f823 	bl	8002360 <calculate_throttle>

	if (Measured.brakeRaw == 0){
 800231a:	6a23      	ldr	r3, [r4, #32]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <handleDrivingInputSource+0x22>
		Display.out.brake = 0x20;
 8002320:	2120      	movs	r1, #32
 8002322:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <handleDrivingInputSource+0x50>)
 8002324:	70d1      	strb	r1, [r2, #3]
		Measured.TargetRPM = 0;
 8002326:	6263      	str	r3, [r4, #36]	@ 0x24
		} else {
			Measured.TargetRPM= trpm;
		}

     }
}
 8002328:	bd70      	pop	{r4, r5, r6, pc}
		Display.out.brake = 0x00;
 800232a:	2200      	movs	r2, #0
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <handleDrivingInputSource+0x50>)
 800232e:	70da      	strb	r2, [r3, #3]
		uint32_t pas = PedalAssist.targetRPM;
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <handleDrivingInputSource+0x54>)
 8002332:	2216      	movs	r2, #22
 8002334:	5e9a      	ldrsh	r2, [r3, r2]
 8002336:	6963      	ldr	r3, [r4, #20]
 8002338:	4293      	cmp	r3, r2
 800233a:	d304      	bcc.n	8002346 <handleDrivingInputSource+0x3e>
		} else if (trpm > FixedValue.maxRPMLimit){
 800233c:	68ea      	ldr	r2, [r5, #12]
 800233e:	429a      	cmp	r2, r3
 8002340:	d2f1      	bcs.n	8002326 <handleDrivingInputSource+0x1e>
			Measured.TargetRPM = FixedValue.maxRPMLimit;
 8002342:	0013      	movs	r3, r2
 8002344:	e7ef      	b.n	8002326 <handleDrivingInputSource+0x1e>
 8002346:	0013      	movs	r3, r2
		} else if (trpm > FixedValue.maxRPMLimit){
 8002348:	68ea      	ldr	r2, [r5, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d2eb      	bcs.n	8002326 <handleDrivingInputSource+0x1e>
 800234e:	e7f8      	b.n	8002342 <handleDrivingInputSource+0x3a>
 8002350:	200005fc 	.word	0x200005fc
 8002354:	2000069c 	.word	0x2000069c
 8002358:	20000560 	.word	0x20000560
 800235c:	20000570 	.word	0x20000570

08002360 <calculate_throttle>:
    // Calculate RPM
    return (effective_adc_value * max_rpm) / effective_adc_range;
}

// Function to calculate RPM based on ADC value
uint32_t calculate_throttle(uint32_t adc_value,uint32_t max_rpm) {
 8002360:	b510      	push	{r4, lr}
    
    // Calculate RPM
    return adc_to_rpm(adc_value,FixedValue.max_rpm, FixedValue.adc_max_value, FixedValue.throttle_start_adc);
 8002362:	4c09      	ldr	r4, [pc, #36]	@ (8002388 <calculate_throttle+0x28>)
uint32_t calculate_throttle(uint32_t adc_value,uint32_t max_rpm) {
 8002364:	0003      	movs	r3, r0
    return adc_to_rpm(adc_value,FixedValue.max_rpm, FixedValue.adc_max_value, FixedValue.throttle_start_adc);
 8002366:	6862      	ldr	r2, [r4, #4]
    if (adc_value < throttle_start_adc) {
 8002368:	2000      	movs	r0, #0
 800236a:	429a      	cmp	r2, r3
 800236c:	d809      	bhi.n	8002382 <calculate_throttle+0x22>
    return adc_to_rpm(adc_value,FixedValue.max_rpm, FixedValue.adc_max_value, FixedValue.throttle_start_adc);
 800236e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    uint32_t effective_adc_value = adc_value - throttle_start_adc;
 8002370:	0008      	movs	r0, r1
 8002372:	4299      	cmp	r1, r3
 8002374:	d806      	bhi.n	8002384 <calculate_throttle+0x24>
 8002376:	1a83      	subs	r3, r0, r2
    return (effective_adc_value * max_rpm) / effective_adc_range;
 8002378:	68a0      	ldr	r0, [r4, #8]
    uint32_t effective_adc_range = adc_max_value - throttle_start_adc;
 800237a:	1a89      	subs	r1, r1, r2
    return (effective_adc_value * max_rpm) / effective_adc_range;
 800237c:	4358      	muls	r0, r3
 800237e:	f7fd febf 	bl	8000100 <__udivsi3>
}
 8002382:	bd10      	pop	{r4, pc}
    uint32_t effective_adc_value = adc_value - throttle_start_adc;
 8002384:	0018      	movs	r0, r3
 8002386:	e7f6      	b.n	8002376 <calculate_throttle+0x16>
 8002388:	2000069c 	.word	0x2000069c

0800238c <calculate_voltage>:

// Function to calculate the input voltage based on ADC value
uint32_t calculate_voltage(uint32_t adc_value) {
 800238c:	b570      	push	{r4, r5, r6, lr}
    // Calculate the output voltage from ADC value
    uint32_t Vout = (adc_value * FixedValue.ref_voltage) / FixedValue.adcResolution;

    // Calculate the input voltage based on the voltage divider formula
    uint32_t voltage = (Vout * (FixedValue.r1 + FixedValue.r2)) / FixedValue.r2;
 800238e:	4c07      	ldr	r4, [pc, #28]	@ (80023ac <calculate_voltage+0x20>)
    uint32_t Vout = (adc_value * FixedValue.ref_voltage) / FixedValue.adcResolution;
 8002390:	6923      	ldr	r3, [r4, #16]
 8002392:	6821      	ldr	r1, [r4, #0]
 8002394:	4358      	muls	r0, r3
 8002396:	f7fd feb3 	bl	8000100 <__udivsi3>
    uint32_t voltage = (Vout * (FixedValue.r1 + FixedValue.r2)) / FixedValue.r2;
 800239a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800239c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800239e:	0029      	movs	r1, r5
 80023a0:	18eb      	adds	r3, r5, r3
 80023a2:	4358      	muls	r0, r3
 80023a4:	f7fd feac 	bl	8000100 <__udivsi3>
    return voltage;
}
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	2000069c 	.word	0x2000069c

080023b0 <calculate_current>:


uint32_t calculate_current(uint32_t adc_value) {
 80023b0:	b570      	push	{r4, r5, r6, lr}
    // Apply a simple low-pass filter to smooth out the current measurement
    uint32_t difference = adc_value - FixedValue.filtered_current;
 80023b2:	4c14      	ldr	r4, [pc, #80]	@ (8002404 <calculate_current+0x54>)
 80023b4:	f7fe ff2a 	bl	800120c <__aeabi_ui2f>
 80023b8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80023ba:	1c29      	adds	r1, r5, #0
 80023bc:	f7fe fd16 	bl	8000dec <__aeabi_fsub>
 80023c0:	f7fe f84e 	bl	8000460 <__aeabi_f2uiz>
    uint32_t filtered_increment = difference / (1 << FixedValue.filter_shift);
 80023c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023c6:	40d8      	lsrs	r0, r3
    FixedValue.filtered_current += filtered_increment;
 80023c8:	f7fe ff20 	bl	800120c <__aeabi_ui2f>
 80023cc:	1c29      	adds	r1, r5, #0
 80023ce:	f7fe f85f 	bl	8000490 <__aeabi_fadd>
 80023d2:	1c05      	adds	r5, r0, #0
 80023d4:	6260      	str	r0, [r4, #36]	@ 0x24

    // Calculate the actual current value in amperes
    uint32_t current = ((FixedValue.filtered_current * FixedValue.ref_voltage) /( FixedValue.adcResolution* FixedValue.shunt_resistor * FixedValue.gain));
 80023d6:	6920      	ldr	r0, [r4, #16]
 80023d8:	f7fe ff18 	bl	800120c <__aeabi_ui2f>
 80023dc:	1c29      	adds	r1, r5, #0
 80023de:	f7fe fbc7 	bl	8000b70 <__aeabi_fmul>
 80023e2:	1c05      	adds	r5, r0, #0
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	f7fe ff11 	bl	800120c <__aeabi_ui2f>
 80023ea:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80023ec:	f7fe fbc0 	bl	8000b70 <__aeabi_fmul>
 80023f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80023f2:	f7fe fbbd 	bl	8000b70 <__aeabi_fmul>
 80023f6:	1c01      	adds	r1, r0, #0
 80023f8:	1c28      	adds	r0, r5, #0
 80023fa:	f7fe f9d3 	bl	80007a4 <__aeabi_fdiv>
 80023fe:	f7fe f82f 	bl	8000460 <__aeabi_f2uiz>

    // Return current as an unsigned int, assuming it's appropriate for your needs
    return current;
}
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	2000069c 	.word	0x2000069c

08002408 <measure_temperature>:

uint32_t measure_temperature(uint32_t adc_value){
 8002408:	b510      	push	{r4, lr}
    uint32_t temperature =((FixedValue.v25 - FixedValue.vsense* adc_value)/FixedValue.avg_slope + 25.0f);
 800240a:	4c09      	ldr	r4, [pc, #36]	@ (8002430 <measure_temperature+0x28>)
 800240c:	f7fe fefe 	bl	800120c <__aeabi_ui2f>
 8002410:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002412:	f7fe fbad 	bl	8000b70 <__aeabi_fmul>
 8002416:	1c01      	adds	r1, r0, #0
 8002418:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800241a:	f7fe fce7 	bl	8000dec <__aeabi_fsub>
 800241e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002420:	f7fe f9c0 	bl	80007a4 <__aeabi_fdiv>
 8002424:	4903      	ldr	r1, [pc, #12]	@ (8002434 <measure_temperature+0x2c>)
 8002426:	f7fe f833 	bl	8000490 <__aeabi_fadd>
 800242a:	f7fe f819 	bl	8000460 <__aeabi_f2uiz>
    return temperature;
}
 800242e:	bd10      	pop	{r4, pc}
 8002430:	2000069c 	.word	0x2000069c
 8002434:	41c80000 	.word	0x41c80000

08002438 <calculateMotorPeriod>:

void calculateMotorPeriod(uint32_t cap){
	if (cap >MAX_HALL_PERIOD + 100){
 8002438:	0002      	movs	r2, r0
 800243a:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <calculateMotorPeriod+0x2c>)
 800243c:	3ac3      	subs	r2, #195	@ 0xc3
 800243e:	3aff      	subs	r2, #255	@ 0xff
 8002440:	429a      	cmp	r2, r3
 8002442:	d80b      	bhi.n	800245c <calculateMotorPeriod+0x24>
	}
	else if (cap < 450)
	{
		return;
	}
	Measured.motorPeriod.periodBeforeClamp = cap;
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <calculateMotorPeriod+0x30>)
	if (cap < MIN_HALL_PERIOD)
	{
		cap = MIN_HALL_PERIOD;
	}
	else if (cap > MAX_HALL_PERIOD)
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <calculateMotorPeriod+0x34>)
	Measured.motorPeriod.periodBeforeClamp = cap;
 8002448:	6418      	str	r0, [r3, #64]	@ 0x40
	else if (cap > MAX_HALL_PERIOD)
 800244a:	4290      	cmp	r0, r2
 800244c:	d807      	bhi.n	800245e <calculateMotorPeriod+0x26>
	{
		cap = MAX_HALL_PERIOD;
	}
	Measured.motorPeriod.periodBeforeFilter = cap;
 800244e:	22f3      	movs	r2, #243	@ 0xf3
 8002450:	0052      	lsls	r2, r2, #1
 8002452:	4290      	cmp	r0, r2
 8002454:	d801      	bhi.n	800245a <calculateMotorPeriod+0x22>
 8002456:	20e8      	movs	r0, #232	@ 0xe8
 8002458:	30ff      	adds	r0, #255	@ 0xff
 800245a:	6458      	str	r0, [r3, #68]	@ 0x44

}
 800245c:	4770      	bx	lr
	else if (cap > MAX_HALL_PERIOD)
 800245e:	0010      	movs	r0, r2
 8002460:	e7f5      	b.n	800244e <calculateMotorPeriod+0x16>
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	0000a9dd 	.word	0x0000a9dd
 8002468:	200005fc 	.word	0x200005fc
 800246c:	0000ab3b 	.word	0x0000ab3b

08002470 <filterMotorPeriod>:
void resetMotorPeriod(void){
	Measured.motorPeriod.periodBeforeFilter = MAX_HALL_PERIOD;
}

void filterMotorPeriod(void){
	Measured.motorPeriod.period = ((50 * Measured.motorPeriod.periodBeforeFilter) + (14 * Measured.motorPeriod.period)) >> 6;
 8002470:	2232      	movs	r2, #50	@ 0x32
 8002472:	4905      	ldr	r1, [pc, #20]	@ (8002488 <filterMotorPeriod+0x18>)
 8002474:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8002476:	6c88      	ldr	r0, [r1, #72]	@ 0x48
 8002478:	4353      	muls	r3, r2
 800247a:	00c2      	lsls	r2, r0, #3
 800247c:	1a12      	subs	r2, r2, r0
 800247e:	0052      	lsls	r2, r2, #1
 8002480:	189b      	adds	r3, r3, r2
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	648b      	str	r3, [r1, #72]	@ 0x48
}
 8002486:	4770      	bx	lr
 8002488:	200005fc 	.word	0x200005fc

0800248c <calculateMotorSpeed>:

// To get motor RPM
void calculateMotorSpeed(uint32_t cap){
	// I guess this could be optimized
	Measured.motorSpeed.counter++;
 800248c:	2254      	movs	r2, #84	@ 0x54
void calculateMotorSpeed(uint32_t cap){
 800248e:	b510      	push	{r4, lr}
	Measured.motorSpeed.counter++;
 8002490:	4c0d      	ldr	r4, [pc, #52]	@ (80024c8 <calculateMotorSpeed+0x3c>)
 8002492:	5ca3      	ldrb	r3, [r4, r2]
	Measured.motorSpeed.acc += cap;
 8002494:	6da1      	ldr	r1, [r4, #88]	@ 0x58
	Measured.motorSpeed.counter++;
 8002496:	3301      	adds	r3, #1
 8002498:	b25b      	sxtb	r3, r3
 800249a:	54a3      	strb	r3, [r4, r2]

	// Filter for speed
	if ((6 == MotorRun.hallstate) && Measured.motorSpeed.counter >= 6){		// should try some better logic
 800249c:	4a0b      	ldr	r2, [pc, #44]	@ (80024cc <calculateMotorSpeed+0x40>)
	Measured.motorSpeed.acc += cap;
 800249e:	1841      	adds	r1, r0, r1
	if ((6 == MotorRun.hallstate) && Measured.motorSpeed.counter >= 6){		// should try some better logic
 80024a0:	7812      	ldrb	r2, [r2, #0]
	Measured.motorSpeed.acc += cap;
 80024a2:	65a1      	str	r1, [r4, #88]	@ 0x58
	if ((6 == MotorRun.hallstate) && Measured.motorSpeed.counter >= 6){		// should try some better logic
 80024a4:	2a06      	cmp	r2, #6
 80024a6:	d000      	beq.n	80024aa <calculateMotorSpeed+0x1e>
		}
		Measured.motorSpeed.speedWithoutFilter = (int16_t) (SPEED_MULTI / Measured.motorSpeed.acc);
		Measured.motorSpeed.counter = 0;
		Measured.motorSpeed.acc = 0;
	}
}
 80024a8:	bd10      	pop	{r4, pc}
	if ((6 == MotorRun.hallstate) && Measured.motorSpeed.counter >= 6){		// should try some better logic
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	ddfc      	ble.n	80024a8 <calculateMotorSpeed+0x1c>
		Measured.motorSpeed.speedWithoutFilter = (int16_t) (SPEED_MULTI / Measured.motorSpeed.acc);
 80024ae:	2900      	cmp	r1, #0
 80024b0:	d100      	bne.n	80024b4 <calculateMotorSpeed+0x28>
 80024b2:	3101      	adds	r1, #1
 80024b4:	4806      	ldr	r0, [pc, #24]	@ (80024d0 <calculateMotorSpeed+0x44>)
 80024b6:	f7fd fe23 	bl	8000100 <__udivsi3>
		Measured.motorSpeed.counter = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	2254      	movs	r2, #84	@ 0x54
		Measured.motorSpeed.speedWithoutFilter = (int16_t) (SPEED_MULTI / Measured.motorSpeed.acc);
 80024be:	b200      	sxth	r0, r0
 80024c0:	65e0      	str	r0, [r4, #92]	@ 0x5c
		Measured.motorSpeed.counter = 0;
 80024c2:	54a3      	strb	r3, [r4, r2]
		Measured.motorSpeed.acc = 0;
 80024c4:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 80024c6:	e7ef      	b.n	80024a8 <calculateMotorSpeed+0x1c>
 80024c8:	200005fc 	.word	0x200005fc
 80024cc:	20000670 	.word	0x20000670
 80024d0:	002821f9 	.word	0x002821f9

080024d4 <filterMotorSpeed>:

void filterMotorSpeed(void){
	Measured.motorSpeed.speed = ((30 * Measured.motorSpeed.speed) + (34 * Measured.motorSpeed.speedWithoutFilter)) >> 6;
 80024d4:	2060      	movs	r0, #96	@ 0x60
void filterMotorSpeed(void){
 80024d6:	b510      	push	{r4, lr}
	Measured.motorSpeed.speed = ((30 * Measured.motorSpeed.speed) + (34 * Measured.motorSpeed.speedWithoutFilter)) >> 6;
 80024d8:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <filterMotorSpeed+0x1c>)
 80024da:	5e13      	ldrsh	r3, [r2, r0]
 80024dc:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
 80024de:	0119      	lsls	r1, r3, #4
 80024e0:	1ac9      	subs	r1, r1, r3
 80024e2:	0123      	lsls	r3, r4, #4
 80024e4:	191b      	adds	r3, r3, r4
 80024e6:	185b      	adds	r3, r3, r1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	099b      	lsrs	r3, r3, #6
 80024ec:	5213      	strh	r3, [r2, r0]
}
 80024ee:	bd10      	pop	{r4, pc}
 80024f0:	200005fc 	.word	0x200005fc

080024f4 <getHallAngle>:
const int PhaseValues[8] = {0, PHASE_FOUR, PHASE_TWO, PHASE_THREE, PHASE_ZERO, PHASE_FIVE, PHASE_ONE, 0};
const int ReversePhaseValues[8] = {0, PHASE_ZERO, PHASE_FOUR, PHASE_FIVE, PHASE_TWO, PHASE_ONE, PHASE_THREE, 0};
const int ForwardPhaseValues[8] = {0, PHASE_FOUR, PHASE_TWO, PHASE_THREE, PHASE_ZERO, PHASE_FIVE, PHASE_ONE, 0};
void getHallAngle(uint8_t hall){
//	MotorRun.phase =PhaseValues[hp]+ MotorRun.phaseOffset;
	if(MotorRun.runDirectionFlag == REVERSE){
 80024f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <getHallAngle+0x2c>)
 80024f6:	7853      	ldrb	r3, [r2, #1]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d009      	beq.n	8002510 <getHallAngle+0x1c>
		MotorRun.phase = ReversePhaseValues[hall] + MotorRun.reverseOffset;
	} else{
		MotorRun.phase = ForwardPhaseValues[hall] + MotorRun.forwardOffset;
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <getHallAngle+0x30>)
 80024fe:	0080      	lsls	r0, r0, #2
 8002500:	58c3      	ldr	r3, [r0, r3]
 8002502:	6891      	ldr	r1, [r2, #8]
 8002504:	185b      	adds	r3, r3, r1
 8002506:	b29b      	uxth	r3, r3
	}
	MotorRun.phase += MotorRun.phaseAdv.advanceAngle;
 8002508:	8b51      	ldrh	r1, [r2, #26]
 800250a:	185b      	adds	r3, r3, r1
 800250c:	8053      	strh	r3, [r2, #2]
}
 800250e:	4770      	bx	lr
		MotorRun.phase = ReversePhaseValues[hall] + MotorRun.reverseOffset;
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <getHallAngle+0x34>)
 8002512:	0080      	lsls	r0, r0, #2
 8002514:	58c3      	ldr	r3, [r0, r3]
 8002516:	6851      	ldr	r1, [r2, #4]
 8002518:	185b      	adds	r3, r3, r1
 800251a:	b29b      	uxth	r3, r3
 800251c:	e7f4      	b.n	8002508 <getHallAngle+0x14>
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	20000670 	.word	0x20000670
 8002524:	08006884 	.word	0x08006884
 8002528:	080068a4 	.word	0x080068a4

0800252c <check_hall_protection>:

//FIXED_VALS_t fixedvalue;
// Function to check if the input number is between 1 and 6
uint32_t check_hall_protection(uint32_t num) {
    // Perform the check
    return (num >= 1 && num <= 6) ? 0 : 1; // Return 0 for pass, 1 for fail
 800252c:	2305      	movs	r3, #5
 800252e:	3801      	subs	r0, #1
 8002530:	4283      	cmp	r3, r0
 8002532:	4180      	sbcs	r0, r0
 8002534:	4240      	negs	r0, r0
}
 8002536:	4770      	bx	lr

08002538 <check_throttle>:

uint32_t check_throttle(uint32_t rpm) {
    // Check if throttle is greater than 800
    return (rpm > 800) ? 0 : 1; // Return 1 if throttle exceeds protection limit, 0 otherwise
 8002538:	22c8      	movs	r2, #200	@ 0xc8
uint32_t check_throttle(uint32_t rpm) {
 800253a:	0003      	movs	r3, r0
    return (rpm > 800) ? 0 : 1; // Return 1 if throttle exceeds protection limit, 0 otherwise
 800253c:	2000      	movs	r0, #0
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	4140      	adcs	r0, r0
}
 8002544:	4770      	bx	lr
 8002546:	46c0      	nop			@ (mov r8, r8)

08002548 <check_overvoltage>:

// Function to check for overvoltage
uint32_t check_overvoltage(uint32_t voltage) {
    return (voltage > FixedValue.over_voltage_threshold) ? 1 : 0; // Return 1 if overvoltage, 0 otherwise
 8002548:	4b02      	ldr	r3, [pc, #8]	@ (8002554 <check_overvoltage+0xc>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	4283      	cmp	r3, r0
 800254e:	4180      	sbcs	r0, r0
 8002550:	4240      	negs	r0, r0
}
 8002552:	4770      	bx	lr
 8002554:	2000069c 	.word	0x2000069c

08002558 <check_undervoltage>:

// Function to check for undervoltage
uint32_t check_undervoltage(uint32_t voltage) {
    return (voltage < FixedValue.under_voltage_threshold) ? 1 : 0; // Return 1 if undervoltage, 0 otherwise
 8002558:	4b02      	ldr	r3, [pc, #8]	@ (8002564 <check_undervoltage+0xc>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4298      	cmp	r0, r3
 800255e:	4180      	sbcs	r0, r0
 8002560:	4240      	negs	r0, r0
}
 8002562:	4770      	bx	lr
 8002564:	2000069c 	.word	0x2000069c

08002568 <check_overCurrent>:

uint32_t check_overCurrent(uint32_t current) {
    // Check if the current exceeds the maximum allowed value
    return (current > FixedValue.current_threshold) ? 1 : 0; // Return 0 for fail, 1 for pass
 8002568:	4b02      	ldr	r3, [pc, #8]	@ (8002574 <check_overCurrent+0xc>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	4283      	cmp	r3, r0
 800256e:	4180      	sbcs	r0, r0
 8002570:	4240      	negs	r0, r0
}
 8002572:	4770      	bx	lr
 8002574:	2000069c 	.word	0x2000069c

08002578 <check_overTemperature>:

uint32_t check_overTemperature(uint32_t temperature) {
    // Check if the current exceeds the maximum allowed value
    return (temperature > FixedValue.temperature_threshold) ? 1 : 0; // Return 0 for fail, 1 for pass
 8002578:	4b02      	ldr	r3, [pc, #8]	@ (8002584 <check_overTemperature+0xc>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4283      	cmp	r3, r0
 800257e:	4180      	sbcs	r0, r0
 8002580:	4240      	negs	r0, r0
}
 8002582:	4770      	bx	lr
 8002584:	2000069c 	.word	0x2000069c

08002588 <stateMachine_handle>:
#include "initialconfig.h"
#include "motor.h"
#include "statemachine.h"
#include"controlLoop.h"

void stateMachine_handle(void){
 8002588:	b570      	push	{r4, r5, r6, lr}

	if (Protection.faults.value != 0){
 800258a:	4d34      	ldr	r5, [pc, #208]	@ (800265c <stateMachine_handle+0xd4>)
//	stall_reset();
	ControlVals.stateMachine_state = SMS_RUN;
}

void stateMachine_stepIntoError(void){
	ControlVals.stateMachine_state = SMS_ERROR;
 800258c:	4c34      	ldr	r4, [pc, #208]	@ (8002660 <stateMachine_handle+0xd8>)
	if (Protection.faults.value != 0){
 800258e:	882a      	ldrh	r2, [r5, #0]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d01f      	beq.n	80025d4 <stateMachine_handle+0x4c>
	ControlVals.stateMachine_state = SMS_ERROR;
 8002594:	232c      	movs	r3, #44	@ 0x2c
 8002596:	2104      	movs	r1, #4
 8002598:	54e1      	strb	r1, [r4, r3]
		if (1 == FixedValue.istimerON_A || 1 == FixedValue.islowersideON_A ||1 == FixedValue.istimerON_B || 1 == FixedValue.islowersideON_B ||1 == FixedValue.istimerON_C || 1 == FixedValue.islowersideON_C ){
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <stateMachine_handle+0xdc>)
 800259c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800259e:	2901      	cmp	r1, #1
 80025a0:	d00e      	beq.n	80025c0 <stateMachine_handle+0x38>
 80025a2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80025a4:	2901      	cmp	r1, #1
 80025a6:	d00b      	beq.n	80025c0 <stateMachine_handle+0x38>
 80025a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025aa:	2901      	cmp	r1, #1
 80025ac:	d008      	beq.n	80025c0 <stateMachine_handle+0x38>
 80025ae:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80025b0:	2901      	cmp	r1, #1
 80025b2:	d005      	beq.n	80025c0 <stateMachine_handle+0x38>
 80025b4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80025b6:	2901      	cmp	r1, #1
 80025b8:	d002      	beq.n	80025c0 <stateMachine_handle+0x38>
 80025ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <stateMachine_handle+0x3e>
			motordisable();
 80025c0:	f7ff f9c8 	bl	8001954 <motordisable>
		if (0 == Protection.faults.value){
 80025c4:	882a      	ldrh	r2, [r5, #0]
 80025c6:	2a00      	cmp	r2, #0
 80025c8:	d103      	bne.n	80025d2 <stateMachine_handle+0x4a>
			if (0 == Measured.throttle.calculated){
 80025ca:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <stateMachine_handle+0xe0>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d017      	beq.n	8002602 <stateMachine_handle+0x7a>
}
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
	switch (ControlVals.stateMachine_state){
 80025d4:	262c      	movs	r6, #44	@ 0x2c
 80025d6:	5da3      	ldrb	r3, [r4, r6]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d01d      	beq.n	8002618 <stateMachine_handle+0x90>
 80025dc:	d908      	bls.n	80025f0 <stateMachine_handle+0x68>
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d117      	bne.n	8002612 <stateMachine_handle+0x8a>
		if (Measured.TargetRPM > 0){
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <stateMachine_handle+0xe0>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	dd0b      	ble.n	8002602 <stateMachine_handle+0x7a>
			motor_sineCommutation();
 80025ea:	f000 f987 	bl	80028fc <motor_sineCommutation>
 80025ee:	e7f0      	b.n	80025d2 <stateMachine_handle+0x4a>
	switch (ControlVals.stateMachine_state){
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d1ee      	bne.n	80025d2 <stateMachine_handle+0x4a>
		if (0 == Measured.throttle.calculated && 1 == ControlVals.initialAssignmentsCompleted){
 80025f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <stateMachine_handle+0xe0>)
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ea      	bne.n	80025d2 <stateMachine_handle+0x4a>
 80025fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d1e7      	bne.n	80025d2 <stateMachine_handle+0x4a>
	controlLoop_reset();
 8002602:	f7ff fe4b 	bl	800229c <controlLoop_reset>
	motordisable();
 8002606:	f7ff f9a5 	bl	8001954 <motordisable>
	ControlVals.stateMachine_state = SMS_IDLE;
 800260a:	232c      	movs	r3, #44	@ 0x2c
 800260c:	2202      	movs	r2, #2
 800260e:	54e2      	strb	r2, [r4, r3]
}
 8002610:	e7df      	b.n	80025d2 <stateMachine_handle+0x4a>
	switch (ControlVals.stateMachine_state){
 8002612:	2b04      	cmp	r3, #4
 8002614:	d1dd      	bne.n	80025d2 <stateMachine_handle+0x4a>
 8002616:	e7c0      	b.n	800259a <stateMachine_handle+0x12>
		if (Measured.TargetRPM > 0){
 8002618:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <stateMachine_handle+0xe0>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	dc15      	bgt.n	800264c <stateMachine_handle+0xc4>
			if(1 == FixedValue.istimerON_A || 1 == FixedValue.islowersideON_A ||1 == FixedValue.istimerON_B || 1 == FixedValue.islowersideON_B ||1 == FixedValue.istimerON_C || 1 == FixedValue.islowersideON_C ){
 8002620:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <stateMachine_handle+0xdc>)
 8002622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002624:	2a01      	cmp	r2, #1
 8002626:	d00e      	beq.n	8002646 <stateMachine_handle+0xbe>
 8002628:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800262a:	2a01      	cmp	r2, #1
 800262c:	d00b      	beq.n	8002646 <stateMachine_handle+0xbe>
 800262e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002630:	2a01      	cmp	r2, #1
 8002632:	d008      	beq.n	8002646 <stateMachine_handle+0xbe>
 8002634:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002636:	2a01      	cmp	r2, #1
 8002638:	d005      	beq.n	8002646 <stateMachine_handle+0xbe>
 800263a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800263c:	2a01      	cmp	r2, #1
 800263e:	d002      	beq.n	8002646 <stateMachine_handle+0xbe>
 8002640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002642:	2b01      	cmp	r3, #1
 8002644:	d1c5      	bne.n	80025d2 <stateMachine_handle+0x4a>
				motordisable();
 8002646:	f7ff f985 	bl	8001954 <motordisable>
 800264a:	e7c2      	b.n	80025d2 <stateMachine_handle+0x4a>
	controlLoop_reset();
 800264c:	f7ff fe26 	bl	800229c <controlLoop_reset>
	motorenable();
 8002650:	f7ff f962 	bl	8001918 <motorenable>
	ControlVals.stateMachine_state = SMS_RUN;
 8002654:	2303      	movs	r3, #3
 8002656:	55a3      	strb	r3, [r4, r6]
}
 8002658:	e7bb      	b.n	80025d2 <stateMachine_handle+0x4a>
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	200005f8 	.word	0x200005f8
 8002660:	200005a0 	.word	0x200005a0
 8002664:	2000069c 	.word	0x2000069c
 8002668:	200005fc 	.word	0x200005fc

0800266c <handle_hall>:
PROTECTION_t Protection;

// Function to handle hall position and protection
void handle_hall(uint8_t hall) {
    // Update hall position
    Measured.hallPosition = hall;
 800266c:	2234      	movs	r2, #52	@ 0x34
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <handle_hall+0x20>)
void handle_hall(uint8_t hall) {
 8002670:	b510      	push	{r4, lr}
    Measured.hallPosition = hall;
 8002672:	5498      	strb	r0, [r3, r2]

    // Check hall protection and update protection status
    Protection.faults.hallInvalid = check_hall_protection(hall);
 8002674:	f7ff ff5a 	bl	800252c <check_hall_protection>
 8002678:	2101      	movs	r1, #1
 800267a:	0002      	movs	r2, r0
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <handle_hall+0x24>)
 800267e:	400a      	ands	r2, r1
 8002680:	7818      	ldrb	r0, [r3, #0]
 8002682:	4388      	bics	r0, r1
 8002684:	4310      	orrs	r0, r2
 8002686:	7018      	strb	r0, [r3, #0]
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	200005fc 	.word	0x200005fc
 8002690:	200005f8 	.word	0x200005f8

08002694 <update_ADC>:

// Main loop or fast loop function

void update_ADC(uint32_t current,uint32_t voltage,uint32_t throttle,uint32_t temperature){
 8002694:	b510      	push	{r4, lr}
	 Measured.Current.raw = current;
 8002696:	4c03      	ldr	r4, [pc, #12]	@ (80026a4 <update_ADC+0x10>)
 8002698:	8020      	strh	r0, [r4, #0]
	 Measured.Voltage.raw = voltage;
 800269a:	8121      	strh	r1, [r4, #8]
	 Measured.throttle.raw =throttle;
 800269c:	8222      	strh	r2, [r4, #16]
     Measured.temperature.raw =temperature;
 800269e:	8323      	strh	r3, [r4, #24]
}
 80026a0:	bd10      	pop	{r4, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	200005fc 	.word	0x200005fc

080026a8 <fast_loop>:
void fast_loop(void) {
 80026a8:	b570      	push	{r4, r5, r6, lr}

    // Calculate current and voltage
    Measured.Current.calculated = calculate_current(Measured.Current.raw);
 80026aa:	4d14      	ldr	r5, [pc, #80]	@ (80026fc <fast_loop+0x54>)
    Measured.Voltage.calculated = calculate_voltage(Measured.Voltage.raw);
    Protection.faults.overVolt = check_overvoltage(Measured.Voltage.calculated);
 80026ac:	2601      	movs	r6, #1
    Measured.Current.calculated = calculate_current(Measured.Current.raw);
 80026ae:	8828      	ldrh	r0, [r5, #0]
 80026b0:	f7ff fe7e 	bl	80023b0 <calculate_current>
 80026b4:	6068      	str	r0, [r5, #4]
    Measured.Voltage.calculated = calculate_voltage(Measured.Voltage.raw);
 80026b6:	8928      	ldrh	r0, [r5, #8]
 80026b8:	f7ff fe68 	bl	800238c <calculate_voltage>
 80026bc:	60e8      	str	r0, [r5, #12]
    Protection.faults.overVolt = check_overvoltage(Measured.Voltage.calculated);
 80026be:	f7ff ff43 	bl	8002548 <check_overvoltage>
 80026c2:	2220      	movs	r2, #32
 80026c4:	4c0e      	ldr	r4, [pc, #56]	@ (8002700 <fast_loop+0x58>)
 80026c6:	4030      	ands	r0, r6
 80026c8:	0143      	lsls	r3, r0, #5
 80026ca:	7820      	ldrb	r0, [r4, #0]
 80026cc:	4390      	bics	r0, r2
 80026ce:	4318      	orrs	r0, r3
 80026d0:	7020      	strb	r0, [r4, #0]
    Protection.faults.underVolt = check_undervoltage(Measured.Voltage.calculated);
 80026d2:	68e8      	ldr	r0, [r5, #12]
 80026d4:	f7ff ff40 	bl	8002558 <check_undervoltage>
 80026d8:	2210      	movs	r2, #16
 80026da:	7823      	ldrb	r3, [r4, #0]
 80026dc:	4006      	ands	r6, r0
 80026de:	0136      	lsls	r6, r6, #4
 80026e0:	4393      	bics	r3, r2
 80026e2:	4333      	orrs	r3, r6
    Protection.faults.overCurrent = check_overCurrent(Measured.Current.calculated);
 80026e4:	6868      	ldr	r0, [r5, #4]
    Protection.faults.underVolt = check_undervoltage(Measured.Voltage.calculated);
 80026e6:	7023      	strb	r3, [r4, #0]
    Protection.faults.overCurrent = check_overCurrent(Measured.Current.calculated);
 80026e8:	f7ff ff3e 	bl	8002568 <check_overCurrent>
 80026ec:	01c3      	lsls	r3, r0, #7
 80026ee:	207f      	movs	r0, #127	@ 0x7f
 80026f0:	7822      	ldrb	r2, [r4, #0]
 80026f2:	4010      	ands	r0, r2
 80026f4:	4318      	orrs	r0, r3
 80026f6:	7020      	strb	r0, [r4, #0]
}
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	200005fc 	.word	0x200005fc
 8002700:	200005f8 	.word	0x200005f8

08002704 <update_brakevalue>:


void update_brakevalue(uint8_t brake){
    Measured.brakeRaw = brake;
 8002704:	4b01      	ldr	r3, [pc, #4]	@ (800270c <update_brakevalue+0x8>)
 8002706:	6218      	str	r0, [r3, #32]
}
 8002708:	4770      	bx	lr
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	200005fc 	.word	0x200005fc

08002710 <slow_loop>:
// Slow loop function to check brake status and adjust RPM accordingly
void slow_loop(void) {
 8002710:	b570      	push	{r4, r5, r6, lr}

   Measured.throttle.calculated =calculate_throttle(Measured.throttle.raw,FixedValue.max_rpm);
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <slow_loop+0x48>)
 8002714:	4e11      	ldr	r6, [pc, #68]	@ (800275c <slow_loop+0x4c>)
 8002716:	6899      	ldr	r1, [r3, #8]
 8002718:	8a30      	ldrh	r0, [r6, #16]
 800271a:	f7ff fe21 	bl	8002360 <calculate_throttle>
 800271e:	6170      	str	r0, [r6, #20]
   Measured.temperature.calculated =measure_temperature(Measured.temperature.raw);
 8002720:	8b30      	ldrh	r0, [r6, #24]
 8002722:	f7ff fe71 	bl	8002408 <measure_temperature>
 8002726:	61f0      	str	r0, [r6, #28]
   Protection.faults.throttle = check_throttle(Measured.throttle.raw);
 8002728:	8a30      	ldrh	r0, [r6, #16]
 800272a:	f7ff ff05 	bl	8002538 <check_throttle>
 800272e:	2501      	movs	r5, #1
 8002730:	2204      	movs	r2, #4
 8002732:	4c0b      	ldr	r4, [pc, #44]	@ (8002760 <slow_loop+0x50>)
 8002734:	4028      	ands	r0, r5
 8002736:	0083      	lsls	r3, r0, #2
 8002738:	7820      	ldrb	r0, [r4, #0]
 800273a:	4390      	bics	r0, r2
 800273c:	4318      	orrs	r0, r3
 800273e:	7020      	strb	r0, [r4, #0]
   Protection.faults.overTemperature = check_overTemperature(Measured.temperature.calculated);
 8002740:	69f0      	ldr	r0, [r6, #28]
 8002742:	f7ff ff19 	bl	8002578 <check_overTemperature>
 8002746:	2202      	movs	r2, #2
 8002748:	7863      	ldrb	r3, [r4, #1]
 800274a:	4005      	ands	r5, r0
 800274c:	006d      	lsls	r5, r5, #1
 800274e:	4393      	bics	r3, r2
 8002750:	432b      	orrs	r3, r5
 8002752:	7063      	strb	r3, [r4, #1]
      
}
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	2000069c 	.word	0x2000069c
 800275c:	200005fc 	.word	0x200005fc
 8002760:	200005f8 	.word	0x200005f8

08002764 <updatePWM>:

	updatePWM(angle, half_t0, t1, t2);
}

void updatePWM(int angle, unsigned int half_t0, unsigned int t1,
		unsigned int t2) {
 8002764:	b530      	push	{r4, r5, lr}
	MotorRun.PDC1Latch, MotorRun.PDC2Latch, MotorRun.PDC3Latch;
	if (angle < 0x8000) {
 8002766:	2580      	movs	r5, #128	@ 0x80
		if (angle < 0x5555) {
			if (angle < 0x2aaa) {
				MotorRun.PDC1Latch = t1 + t2 + half_t0;
 8002768:	b289      	uxth	r1, r1
 800276a:	18cb      	adds	r3, r1, r3
 800276c:	b292      	uxth	r2, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	18d4      	adds	r4, r2, r3
 8002772:	b2a4      	uxth	r4, r4
	if (angle < 0x8000) {
 8002774:	022d      	lsls	r5, r5, #8
 8002776:	42a8      	cmp	r0, r5
 8002778:	da0e      	bge.n	8002798 <updatePWM+0x34>
		if (angle < 0x5555) {
 800277a:	4d14      	ldr	r5, [pc, #80]	@ (80027cc <updatePWM+0x68>)
 800277c:	42a8      	cmp	r0, r5
 800277e:	dc06      	bgt.n	800278e <updatePWM+0x2a>
			if (angle < 0x2aaa) {
 8002780:	4d13      	ldr	r5, [pc, #76]	@ (80027d0 <updatePWM+0x6c>)
 8002782:	42a8      	cmp	r0, r5
 8002784:	dc18      	bgt.n	80027b8 <updatePWM+0x54>
 8002786:	001a      	movs	r2, r3
 8002788:	000b      	movs	r3, r1
 800278a:	0021      	movs	r1, r4
 800278c:	0014      	movs	r4, r2
				MotorRun.PDC1Latch = t1 + half_t0;
				MotorRun.PDC2Latch = t1 + t2 + half_t0;
				MotorRun.PDC3Latch = half_t0;
			}
		} else {
			MotorRun.PDC1Latch = half_t0;
 800278e:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <updatePWM+0x70>)
 8002790:	8451      	strh	r1, [r2, #34]	@ 0x22
			MotorRun.PDC2Latch = t1 + t2 + half_t0;
 8002792:	8494      	strh	r4, [r2, #36]	@ 0x24
			MotorRun.PDC3Latch = t2 + half_t0;
 8002794:	84d3      	strh	r3, [r2, #38]	@ 0x26
//	 Dutycycle2 =PDC2Latch;
//	 Dutycycle3 =PDC3Latch;
//	TIM1->CCR3 = PDC1Latch;
//	TIM1->CCR2 = PDC3Latch;
//	TIM1->CCR1 = PDC2Latch;
}
 8002796:	bd30      	pop	{r4, r5, pc}
		if (angle < 0xd555) {
 8002798:	4d0f      	ldr	r5, [pc, #60]	@ (80027d8 <updatePWM+0x74>)
 800279a:	42a8      	cmp	r0, r5
 800279c:	dc06      	bgt.n	80027ac <updatePWM+0x48>
			if (angle < 0xaaaa) {
 800279e:	4d0f      	ldr	r5, [pc, #60]	@ (80027dc <updatePWM+0x78>)
 80027a0:	42a8      	cmp	r0, r5
 80027a2:	dc0d      	bgt.n	80027c0 <updatePWM+0x5c>
				MotorRun.PDC2Latch = t1 + half_t0;
 80027a4:	1852      	adds	r2, r2, r1
 80027a6:	0023      	movs	r3, r4
 80027a8:	b294      	uxth	r4, r2
 80027aa:	e7f0      	b.n	800278e <updatePWM+0x2a>
			MotorRun.PDC3Latch = t1 + half_t0;
 80027ac:	1852      	adds	r2, r2, r1
 80027ae:	b293      	uxth	r3, r2
 80027b0:	0022      	movs	r2, r4
 80027b2:	000c      	movs	r4, r1
 80027b4:	0011      	movs	r1, r2
 80027b6:	e7ea      	b.n	800278e <updatePWM+0x2a>
				MotorRun.PDC1Latch = t1 + half_t0;
 80027b8:	1852      	adds	r2, r2, r1
 80027ba:	000b      	movs	r3, r1
 80027bc:	b291      	uxth	r1, r2
 80027be:	e7e6      	b.n	800278e <updatePWM+0x2a>
 80027c0:	001a      	movs	r2, r3
 80027c2:	0023      	movs	r3, r4
 80027c4:	000c      	movs	r4, r1
 80027c6:	0011      	movs	r1, r2
 80027c8:	e7e1      	b.n	800278e <updatePWM+0x2a>
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	00005554 	.word	0x00005554
 80027d0:	00002aa9 	.word	0x00002aa9
 80027d4:	20000670 	.word	0x20000670
 80027d8:	0000d554 	.word	0x0000d554
 80027dc:	0000aaa9 	.word	0x0000aaa9

080027e0 <SVMRun>:
void SVMRun(int16_t volts, uint16_t angle) {
 80027e0:	0003      	movs	r3, r0
 80027e2:	0008      	movs	r0, r1
	if (volts > VOLTS_LIMIT)
 80027e4:	491f      	ldr	r1, [pc, #124]	@ (8002864 <SVMRun+0x84>)
void SVMRun(int16_t volts, uint16_t angle) {
 80027e6:	b570      	push	{r4, r5, r6, lr}
	if (volts > VOLTS_LIMIT)
 80027e8:	1c1a      	adds	r2, r3, #0
 80027ea:	428b      	cmp	r3, r1
 80027ec:	dd00      	ble.n	80027f0 <SVMRun+0x10>
 80027ee:	1c0a      	adds	r2, r1, #0
	if (angle < 0x8000) {
 80027f0:	2380      	movs	r3, #128	@ 0x80
	if (volts > VOLTS_LIMIT)
 80027f2:	b212      	sxth	r2, r2
	if (angle < 0x8000) {
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	4298      	cmp	r0, r3
 80027f8:	da23      	bge.n	8002842 <SVMRun+0x62>
		if (angle < 0x5555) {
 80027fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <SVMRun+0x88>)
 80027fc:	4298      	cmp	r0, r3
 80027fe:	dc2b      	bgt.n	8002858 <SVMRun+0x78>
			if (angle < 0x2aaa) {
 8002800:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <SVMRun+0x8c>)
 8002802:	0001      	movs	r1, r0
 8002804:	4298      	cmp	r0, r3
 8002806:	dd01      	ble.n	800280c <SVMRun+0x2c>
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <SVMRun+0x90>)
 800280a:	18c1      	adds	r1, r0, r3
	voltstpwm = (int) ((volts * tpwm) >> 15);
 800280c:	0093      	lsls	r3, r2, #2
 800280e:	189b      	adds	r3, r3, r2
 8002810:	009c      	lsls	r4, r3, #2
 8002812:	191c      	adds	r4, r3, r4
	angle1 = SIXTY_DEG - angle2;
 8002814:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <SVMRun+0x94>)
	t1 = sinetable[(unsigned char) (angle1 >> 6)];
 8002816:	4d18      	ldr	r5, [pc, #96]	@ (8002878 <SVMRun+0x98>)
	angle1 = SIXTY_DEG - angle2;
 8002818:	1a5b      	subs	r3, r3, r1
	t1 = sinetable[(unsigned char) (angle1 >> 6)];
 800281a:	099b      	lsrs	r3, r3, #6
	t2 = sinetable[(unsigned char) (angle2 >> 6)];
 800281c:	0989      	lsrs	r1, r1, #6
	t1 = sinetable[(unsigned char) (angle1 >> 6)];
 800281e:	009b      	lsls	r3, r3, #2
	t2 = sinetable[(unsigned char) (angle2 >> 6)];
 8002820:	0089      	lsls	r1, r1, #2
	voltstpwm = (int) ((volts * tpwm) >> 15);
 8002822:	01e4      	lsls	r4, r4, #7
 8002824:	1aa4      	subs	r4, r4, r2
	t1 = (int) ((t1 * voltstpwm) >> 15);
 8002826:	595a      	ldr	r2, [r3, r5]
	t2 = (int) ((t2 * voltstpwm) >> 15);
 8002828:	594b      	ldr	r3, [r1, r5]
	voltstpwm = (int) ((volts * tpwm) >> 15);
 800282a:	0be4      	lsrs	r4, r4, #15
	t2 = (int) ((t2 * voltstpwm) >> 15);
 800282c:	4363      	muls	r3, r4
	t1 = (int) ((t1 * voltstpwm) >> 15);
 800282e:	4362      	muls	r2, r4
	half_t0 = (tpwm - t1 - t2) >> 1;
 8002830:	4c12      	ldr	r4, [pc, #72]	@ (800287c <SVMRun+0x9c>)
	t2 = (int) ((t2 * voltstpwm) >> 15);
 8002832:	0bdb      	lsrs	r3, r3, #15
	t1 = (int) ((t1 * voltstpwm) >> 15);
 8002834:	0bd2      	lsrs	r2, r2, #15
	half_t0 = (tpwm - t1 - t2) >> 1;
 8002836:	1ae4      	subs	r4, r4, r3
 8002838:	1aa4      	subs	r4, r4, r2
 800283a:	0861      	lsrs	r1, r4, #1
	updatePWM(angle, half_t0, t1, t2);
 800283c:	f7ff ff92 	bl	8002764 <updatePWM>
}
 8002840:	bd70      	pop	{r4, r5, r6, pc}
		if (angle < 0xd555) {
 8002842:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <SVMRun+0xa0>)
 8002844:	4298      	cmp	r0, r3
 8002846:	dc0a      	bgt.n	800285e <SVMRun+0x7e>
			if (angle < 0xaaaa) {
 8002848:	490e      	ldr	r1, [pc, #56]	@ (8002884 <SVMRun+0xa4>)
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <SVMRun+0xa8>)
 800284c:	1841      	adds	r1, r0, r1
 800284e:	4298      	cmp	r0, r3
 8002850:	dddc      	ble.n	800280c <SVMRun+0x2c>
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <SVMRun+0xac>)
 8002854:	18c1      	adds	r1, r0, r3
 8002856:	e7d9      	b.n	800280c <SVMRun+0x2c>
 8002858:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <SVMRun+0xb0>)
 800285a:	18c1      	adds	r1, r0, r3
 800285c:	e7d6      	b.n	800280c <SVMRun+0x2c>
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <SVMRun+0xb4>)
 8002860:	18c1      	adds	r1, r0, r3
 8002862:	e7d3      	b.n	800280c <SVMRun+0x2c>
 8002864:	00006ed9 	.word	0x00006ed9
 8002868:	00005554 	.word	0x00005554
 800286c:	00002aa9 	.word	0x00002aa9
 8002870:	ffffd556 	.word	0xffffd556
 8002874:	00002aaa 	.word	0x00002aaa
 8002878:	20000004 	.word	0x20000004
 800287c:	00000c7f 	.word	0x00000c7f
 8002880:	0000d554 	.word	0x0000d554
 8002884:	ffff8000 	.word	0xffff8000
 8002888:	0000aaa9 	.word	0x0000aaa9
 800288c:	ffff5556 	.word	0xffff5556
 8002890:	ffffaaab 	.word	0xffffaaab
 8002894:	ffff2aab 	.word	0xffff2aab

08002898 <phaseAdv_updateAngle>:
//    	return Measured.PhaseC;// Return 0 if phase C is low
//    }
//}

void phaseAdv_updateAngle(void){
	if (Measured.motorSpeed.speed <= FixedValue.phaseAdv_baseSpeed){
 8002898:	2260      	movs	r2, #96	@ 0x60
void phaseAdv_updateAngle(void){
 800289a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (Measured.motorSpeed.speed <= FixedValue.phaseAdv_baseSpeed){
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <phaseAdv_updateAngle+0x58>)
 800289e:	5e9f      	ldrsh	r7, [r3, r2]
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <phaseAdv_updateAngle+0x5c>)
		float linearAdv = ((float)Measured.motorSpeed.speed / (float)FixedValue.phaseAdv_baseSpeed) * (float)FixedValue.phaseAdv_maxAngle;
 80028a2:	3210      	adds	r2, #16
	if (Measured.motorSpeed.speed <= FixedValue.phaseAdv_baseSpeed){
 80028a4:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
		float linearAdv = ((float)Measured.motorSpeed.speed / (float)FixedValue.phaseAdv_baseSpeed) * (float)FixedValue.phaseAdv_maxAngle;
 80028a6:	5e9c      	ldrsh	r4, [r3, r2]
	if (Measured.motorSpeed.speed <= FixedValue.phaseAdv_baseSpeed){
 80028a8:	42b7      	cmp	r7, r6
 80028aa:	dc18      	bgt.n	80028de <phaseAdv_updateAngle+0x46>
		float linearAdv = ((float)Measured.motorSpeed.speed / (float)FixedValue.phaseAdv_baseSpeed) * (float)FixedValue.phaseAdv_maxAngle;
 80028ac:	0020      	movs	r0, r4
 80028ae:	f7fe fc61 	bl	8001174 <__aeabi_i2f>
 80028b2:	1c05      	adds	r5, r0, #0
 80028b4:	0038      	movs	r0, r7
 80028b6:	f7fe fc5d 	bl	8001174 <__aeabi_i2f>
 80028ba:	1c07      	adds	r7, r0, #0
 80028bc:	0030      	movs	r0, r6
 80028be:	f7fe fc59 	bl	8001174 <__aeabi_i2f>
 80028c2:	1c01      	adds	r1, r0, #0
 80028c4:	1c38      	adds	r0, r7, #0
 80028c6:	f7fd ff6d 	bl	80007a4 <__aeabi_fdiv>
 80028ca:	1c29      	adds	r1, r5, #0
 80028cc:	f7fe f950 	bl	8000b70 <__aeabi_fmul>
 80028d0:	1c06      	adds	r6, r0, #0
		MotorRun.phaseAdv.advanceAngle = (linearAdv > FixedValue.phaseAdv_maxAngle)? FixedValue.phaseAdv_maxAngle : linearAdv;
 80028d2:	1c01      	adds	r1, r0, #0
 80028d4:	1c28      	adds	r0, r5, #0
 80028d6:	f7fd fd9b 	bl	8000410 <__aeabi_fcmplt>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d003      	beq.n	80028e6 <phaseAdv_updateAngle+0x4e>
	} else {
		MotorRun.phaseAdv.advanceAngle = FixedValue.phaseAdv_maxAngle;
 80028de:	b2a4      	uxth	r4, r4
		MotorRun.phaseAdv.advanceAngle = (linearAdv > FixedValue.phaseAdv_maxAngle)? FixedValue.phaseAdv_maxAngle : linearAdv;
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <phaseAdv_updateAngle+0x60>)
 80028e2:	835c      	strh	r4, [r3, #26]
	}
}
 80028e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MotorRun.phaseAdv.advanceAngle = (linearAdv > FixedValue.phaseAdv_maxAngle)? FixedValue.phaseAdv_maxAngle : linearAdv;
 80028e6:	1c30      	adds	r0, r6, #0
 80028e8:	f7fd fdba 	bl	8000460 <__aeabi_f2uiz>
 80028ec:	b284      	uxth	r4, r0
 80028ee:	e7f7      	b.n	80028e0 <phaseAdv_updateAngle+0x48>
 80028f0:	200005fc 	.word	0x200005fc
 80028f4:	2000069c 	.word	0x2000069c
 80028f8:	20000670 	.word	0x20000670

080028fc <motor_sineCommutation>:

void motor_sineCommutation(void){
 80028fc:	b570      	push	{r4, r5, r6, lr}
//	}
//
//	TestVals.sineComCalled++;
//	TestVals.comStarted++;
//	controlLoop_run();
	controlLoop_run();
 80028fe:	f7ff fcb7 	bl	8002270 <controlLoop_run>
	uint16_t period = Measured.motorPeriod.period;
 8002902:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <motor_sineCommutation+0x6c>)
 8002904:	6c99      	ldr	r1, [r3, #72]	@ 0x48

	if (period != 0){
 8002906:	b28b      	uxth	r3, r1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d112      	bne.n	8002932 <motor_sineCommutation+0x36>
		MotorRun.phaseInc = ((uint32_t) PHASE_INC_CALC / (uint32_t) period);
	} else {
		// Add some handling for zero period here
	}
	MotorRun.phaseIncAcc += MotorRun.phaseInc;
 800290c:	4b17      	ldr	r3, [pc, #92]	@ (800296c <motor_sineCommutation+0x70>)
 800290e:	8b98      	ldrh	r0, [r3, #28]
 8002910:	8c1a      	ldrh	r2, [r3, #32]
	if (MotorRun.phaseIncAcc >= 10923){
 8002912:	4c17      	ldr	r4, [pc, #92]	@ (8002970 <motor_sineCommutation+0x74>)
	MotorRun.phaseIncAcc += MotorRun.phaseInc;
 8002914:	1882      	adds	r2, r0, r2
 8002916:	b292      	uxth	r2, r2
		MotorRun.phaseIncAcc = 10923;
	}
	else{
		if (FixedValue.invertMotor == 1){
			if(MotorRun.runDirectionFlag == REVERSE){
				MotorRun.phase -= MotorRun.phaseInc;
 8002918:	8859      	ldrh	r1, [r3, #2]
	MotorRun.phaseIncAcc += MotorRun.phaseInc;
 800291a:	841a      	strh	r2, [r3, #32]
	if (MotorRun.phaseIncAcc >= 10923){
 800291c:	42a2      	cmp	r2, r4
 800291e:	d911      	bls.n	8002944 <motor_sineCommutation+0x48>
		MotorRun.phaseIncAcc = 10923;
 8002920:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <motor_sineCommutation+0x78>)
 8002922:	841a      	strh	r2, [r3, #32]
//	} else {
//		motorRun.phase = W
//	}


	MotorRun.volts = ControlVals.currentPI_output;
 8002924:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <motor_sineCommutation+0x7c>)
 8002926:	2024      	movs	r0, #36	@ 0x24
 8002928:	5e10      	ldrsh	r0, [r2, r0]
 800292a:	83d8      	strh	r0, [r3, #30]

	SVMRun(MotorRun.volts, MotorRun.phase);
 800292c:	f7ff ff58 	bl	80027e0 <SVMRun>
//	TestVals.comCompleted++;
//	SVMRun(controlVals.targetRPM, motorRun.phase);
}
 8002930:	bd70      	pop	{r4, r5, r6, pc}
		MotorRun.phaseInc = ((uint32_t) PHASE_INC_CALC / (uint32_t) period);
 8002932:	0409      	lsls	r1, r1, #16
 8002934:	4811      	ldr	r0, [pc, #68]	@ (800297c <motor_sineCommutation+0x80>)
 8002936:	0c09      	lsrs	r1, r1, #16
 8002938:	f7fd fbe2 	bl	8000100 <__udivsi3>
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <motor_sineCommutation+0x70>)
 800293e:	b280      	uxth	r0, r0
 8002940:	8398      	strh	r0, [r3, #28]
 8002942:	e7e5      	b.n	8002910 <motor_sineCommutation+0x14>
		if (FixedValue.invertMotor == 1){
 8002944:	2578      	movs	r5, #120	@ 0x78
 8002946:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <motor_sineCommutation+0x84>)
			if(MotorRun.runDirectionFlag == REVERSE){
 8002948:	785c      	ldrb	r4, [r3, #1]
		if (FixedValue.invertMotor == 1){
 800294a:	5752      	ldrsb	r2, [r2, r5]
 800294c:	2a01      	cmp	r2, #1
 800294e:	d005      	beq.n	800295c <motor_sineCommutation+0x60>
			if(MotorRun.runDirectionFlag == REVERSE){
 8002950:	2c01      	cmp	r4, #1
 8002952:	d005      	beq.n	8002960 <motor_sineCommutation+0x64>
				MotorRun.phase -= MotorRun.phaseInc;
 8002954:	1a09      	subs	r1, r1, r0
 8002956:	b289      	uxth	r1, r1
 8002958:	8059      	strh	r1, [r3, #2]
 800295a:	e7e3      	b.n	8002924 <motor_sineCommutation+0x28>
			if(MotorRun.runDirectionFlag == REVERSE){
 800295c:	2c01      	cmp	r4, #1
 800295e:	d0f9      	beq.n	8002954 <motor_sineCommutation+0x58>
				MotorRun.phase += MotorRun.phaseInc;
 8002960:	1841      	adds	r1, r0, r1
 8002962:	b289      	uxth	r1, r1
 8002964:	8059      	strh	r1, [r3, #2]
 8002966:	e7dd      	b.n	8002924 <motor_sineCommutation+0x28>
 8002968:	200005fc 	.word	0x200005fc
 800296c:	20000670 	.word	0x20000670
 8002970:	00002aaa 	.word	0x00002aaa
 8002974:	00002aab 	.word	0x00002aab
 8002978:	200005a0 	.word	0x200005a0
 800297c:	0003a71a 	.word	0x0003a71a
 8002980:	2000069c 	.word	0x2000069c

08002984 <initialvalueassignment>:
	ControlVals.initialAssignmentsCompleted = 1;

}


void initialvalueassignment(void){
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}

	FixedValue.hallmodifier = 0;
	FixedValue.phaseoffsetDeg = 170U;
 8002986:	22aa      	movs	r2, #170	@ 0xaa
void initialvalueassignment(void){
 8002988:	46c6      	mov	lr, r8
	FixedValue.invertMotor = 0;
 800298a:	2100      	movs	r1, #0
	FixedValue.phaseoffsetDeg = 170U;
 800298c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <initialvalueassignment+0xf4>)
void initialvalueassignment(void){
 800298e:	b500      	push	{lr}
	FixedValue.phaseoffsetDeg = 170U;
 8002990:	675a      	str	r2, [r3, #116]	@ 0x74
	FixedValue.invertMotor = 0;
 8002992:	3a32      	subs	r2, #50	@ 0x32
 8002994:	5299      	strh	r1, [r3, r2]

	//Advance Angle
	FixedValue.phaseAdv_baseSpeed = 0;
	FixedValue.phaseAdv_maxAngle = 0;
 8002996:	3a08      	subs	r2, #8
 8002998:	5299      	strh	r1, [r3, r2]

	//current calculation
	FixedValue.filtered_current = 0;
 800299a:	2200      	movs	r2, #0
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24
	FixedValue.current_nominal = 1400;
 800299e:	22af      	movs	r2, #175	@ 0xaf

	//voltage calculation
	FixedValue.r1 = 2000000;
	FixedValue.r2 = 120000;
	FixedValue.adcResolution = 4096;
	FixedValue.ref_voltage = 330;
 80029a0:	20a5      	movs	r0, #165	@ 0xa5
	FixedValue.current_nominal = 1400;
 80029a2:	00d2      	lsls	r2, r2, #3
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
	FixedValue.shunt_resistor = 0.005;
 80029a6:	4a35      	ldr	r2, [pc, #212]	@ (8002a7c <initialvalueassignment+0xf8>)
	FixedValue.ref_voltage = 330;
 80029a8:	0040      	lsls	r0, r0, #1
	FixedValue.shunt_resistor = 0.005;
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
	FixedValue.gain = 8.5;
 80029ac:	4a34      	ldr	r2, [pc, #208]	@ (8002a80 <initialvalueassignment+0xfc>)
	FixedValue.ref_voltage = 330;
 80029ae:	6118      	str	r0, [r3, #16]
	FixedValue.gain = 8.5;
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	FixedValue.filter_shift =6;
 80029b2:	2206      	movs	r2, #6

	//Threshold values
	FixedValue.over_voltage_threshold= 4800;
 80029b4:	2096      	movs	r0, #150	@ 0x96
	FixedValue.filter_shift =6;
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
	FixedValue.r1 = 2000000;
 80029b8:	4a32      	ldr	r2, [pc, #200]	@ (8002a84 <initialvalueassignment+0x100>)
	FixedValue.over_voltage_threshold= 4800;
 80029ba:	0140      	lsls	r0, r0, #5
	FixedValue.r1 = 2000000;
 80029bc:	639a      	str	r2, [r3, #56]	@ 0x38
	FixedValue.r2 = 120000;
 80029be:	4a32      	ldr	r2, [pc, #200]	@ (8002a88 <initialvalueassignment+0x104>)
	FixedValue.over_voltage_threshold= 4800;
 80029c0:	6158      	str	r0, [r3, #20]
	FixedValue.r2 = 120000;
 80029c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	FixedValue.adcResolution = 4096;
 80029c4:	2280      	movs	r2, #128	@ 0x80
	FixedValue.under_voltage_threshold = 2800;
 80029c6:	20af      	movs	r0, #175	@ 0xaf
	FixedValue.adcResolution = 4096;
 80029c8:	0152      	lsls	r2, r2, #5
 80029ca:	601a      	str	r2, [r3, #0]
	FixedValue.current_threshold = 2000;
	FixedValue.temperature_threshold =9000;
	FixedValue.throttle_start_adc = 1300;
	FixedValue.max_rpm = 1300;
	FixedValue.adc_max_value =4096;
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40
	FixedValue.maxRPMLimit = 922;
 80029ce:	4a2f      	ldr	r2, [pc, #188]	@ (8002a8c <initialvalueassignment+0x108>)
	FixedValue.under_voltage_threshold = 2800;
 80029d0:	0100      	lsls	r0, r0, #4
	FixedValue.maxRPMLimit = 922;
 80029d2:	60da      	str	r2, [r3, #12]

	//Temperature calculation
	FixedValue.v25 = 1.43;
 80029d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a90 <initialvalueassignment+0x10c>)
	FixedValue.under_voltage_threshold = 2800;
 80029d6:	6198      	str	r0, [r3, #24]
	FixedValue.v25 = 1.43;
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
	FixedValue.vsense = (3.3/4095);
 80029da:	4a2e      	ldr	r2, [pc, #184]	@ (8002a94 <initialvalueassignment+0x110>)
	FixedValue.current_threshold = 2000;
 80029dc:	20fa      	movs	r0, #250	@ 0xfa
	FixedValue.vsense = (3.3/4095);
 80029de:	649a      	str	r2, [r3, #72]	@ 0x48
    FixedValue.avg_slope = 0.0043;
 80029e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <initialvalueassignment+0x114>)

	//Motor calculation
	MotorRun.phaseOffset = (int32_t)(((float)FixedValue.phaseoffsetDeg/360.0)*65536.0);
	MotorRun.reverseOffset = 65536 - MotorRun.phaseOffset;
 80029e2:	4d2e      	ldr	r5, [pc, #184]	@ (8002a9c <initialvalueassignment+0x118>)
    FixedValue.avg_slope = 0.0043;
 80029e4:	64da      	str	r2, [r3, #76]	@ 0x4c
	MotorRun.phaseOffset = (int32_t)(((float)FixedValue.phaseoffsetDeg/360.0)*65536.0);
 80029e6:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa0 <initialvalueassignment+0x11c>)
 80029e8:	4c2e      	ldr	r4, [pc, #184]	@ (8002aa4 <initialvalueassignment+0x120>)
	MotorRun.reverseOffset = 65536 - MotorRun.phaseOffset;
 80029ea:	6055      	str	r5, [r2, #4]
	MotorRun.forwardOffset = MotorRun.phaseOffset;

	// For control loop
	FixedValue.controlPI.speedPI_kp_highRPM = 8000;
 80029ec:	25fa      	movs	r5, #250	@ 0xfa
	MotorRun.phaseOffset = (int32_t)(((float)FixedValue.phaseoffsetDeg/360.0)*65536.0);
 80029ee:	60d4      	str	r4, [r2, #12]
	MotorRun.forwardOffset = MotorRun.phaseOffset;
 80029f0:	6094      	str	r4, [r2, #8]
	FixedValue.controlPI.speedPI_kp_highRPM = 8000;
 80029f2:	2280      	movs	r2, #128	@ 0x80
	FixedValue.controlPI.speedPI_kp_lowRPM = 8000;
	FixedValue.controlPI.speedPI_ki_highRPM = 2;
 80029f4:	2402      	movs	r4, #2
	FixedValue.controlPI.speedPI_ki_lowRPM = 2;
	FixedValue.controlPI.speedPI_lowRPMShelf = 100;
 80029f6:	268c      	movs	r6, #140	@ 0x8c
	FixedValue.controlPI.speedPI_highRPMShelf = 350;
 80029f8:	27af      	movs	r7, #175	@ 0xaf
	FixedValue.current_threshold = 2000;
 80029fa:	00c0      	lsls	r0, r0, #3
 80029fc:	61d8      	str	r0, [r3, #28]
	FixedValue.temperature_threshold =9000;
 80029fe:	482a      	ldr	r0, [pc, #168]	@ (8002aa8 <initialvalueassignment+0x124>)
	FixedValue.controlPI.speedPI_kp_highRPM = 8000;
 8002a00:	016d      	lsls	r5, r5, #5
	FixedValue.temperature_threshold =9000;
 8002a02:	6218      	str	r0, [r3, #32]
	FixedValue.throttle_start_adc = 1300;
 8002a04:	4829      	ldr	r0, [pc, #164]	@ (8002aac <initialvalueassignment+0x128>)
	FixedValue.controlPI.speedPI_kp_highRPM = 8000;
 8002a06:	509d      	str	r5, [r3, r2]
	FixedValue.controlPI.speedPI_ki_highRPM = 2;
 8002a08:	3208      	adds	r2, #8
	FixedValue.phaseAdv_baseSpeed = 0;
 8002a0a:	66d9      	str	r1, [r3, #108]	@ 0x6c
	FixedValue.throttle_start_adc = 1300;
 8002a0c:	6058      	str	r0, [r3, #4]
	FixedValue.max_rpm = 1300;
 8002a0e:	6098      	str	r0, [r3, #8]
	FixedValue.controlPI.speedPI_kp_lowRPM = 8000;
 8002a10:	67dd      	str	r5, [r3, #124]	@ 0x7c
	FixedValue.controlPI.speedPI_ki_highRPM = 2;
 8002a12:	509c      	str	r4, [r3, r2]
	FixedValue.controlPI.speedPI_ki_lowRPM = 2;
 8002a14:	3a04      	subs	r2, #4
 8002a16:	509c      	str	r4, [r3, r2]
	FixedValue.controlPI.speedPI_lowRPMShelf = 100;
 8002a18:	3a20      	subs	r2, #32
 8002a1a:	519a      	str	r2, [r3, r6]
	FixedValue.controlPI.speedPI_highRPMShelf = 350;
 8002a1c:	007f      	lsls	r7, r7, #1
 8002a1e:	3604      	adds	r6, #4
 8002a20:	519f      	str	r7, [r3, r6]
	FixedValue.controlPI.speedPI_scale = 12;
 8002a22:	3e84      	subs	r6, #132	@ 0x84
 8002a24:	3fbe      	subs	r7, #190	@ 0xbe
 8002a26:	46b0      	mov	r8, r6
 8002a28:	55de      	strb	r6, [r3, r7]
	FixedValue.controlPI.speedPI_maxCounter = 10;
 8002a2a:	3f96      	subs	r7, #150	@ 0x96
 8002a2c:	3690      	adds	r6, #144	@ 0x90
 8002a2e:	519f      	str	r7, [r3, r6]
    FixedValue.controlPI.speedPI_kp = 8000;
 8002a30:	3608      	adds	r6, #8
 8002a32:	519d      	str	r5, [r3, r6]
    FixedValue.controlPI.speedPI_ki = 2;
 8002a34:	25a8      	movs	r5, #168	@ 0xa8
 8002a36:	515c      	str	r4, [r3, r5]
	FixedValue.controlPI.currentPI_kp = 6000;
 8002a38:	4d1d      	ldr	r5, [pc, #116]	@ (8002ab0 <initialvalueassignment+0x12c>)
 8002a3a:	34aa      	adds	r4, #170	@ 0xaa
 8002a3c:	511d      	str	r5, [r3, r4]
	FixedValue.controlPI.currentPI_ki = 20;
 8002a3e:	2514      	movs	r5, #20
 8002a40:	3404      	adds	r4, #4
 8002a42:	511d      	str	r5, [r3, r4]
	FixedValue.controlPI.currentPI_scale = 14;
 8002a44:	3404      	adds	r4, #4
 8002a46:	3d06      	subs	r5, #6
 8002a48:	551d      	strb	r5, [r3, r4]

	// Gain Scheduling
	FixedValue.controlPI.speedPI_schMulSc = 5;
 8002a4a:	3d09      	subs	r5, #9
 8002a4c:	3c1c      	subs	r4, #28
 8002a4e:	511d      	str	r5, [r3, r4]
	float n = FixedValue.controlPI.speedPI_kp_lowRPM - FixedValue.controlPI.speedPI_kp_highRPM;
	float p = FixedValue.controlPI.speedPI_highRPMShelf - FixedValue.controlPI.speedPI_lowRPMShelf;
	FixedValue.controlPI.speedPI_schMul = (int32_t)(n/p) * (1 << FixedValue.controlPI.speedPI_schMulSc);
 8002a50:	3c04      	subs	r4, #4
 8002a52:	5119      	str	r1, [r3, r4]
//	uint16_t temp_pedal2 = (uint16_t)((temp_maxRPMLimit * 16)/25);
//	uint16_t temp_pedal3 = (uint16_t)((temp_maxRPMLimit * 18)/25);
//	uint16_t temp_pedal4 = (uint16_t)((temp_maxRPMLimit * 22)/25);
//	uint16_t temp_pedal5 = (uint16_t)temp_maxRPMLimit;

	PedalAssist.addAmount = 100;
 8002a54:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <initialvalueassignment+0x130>)
	PedalAssist.derampFactor = 10;
	PedalAssist.minDiff = 50;
	PedalAssist.maxDiff = 1000;
 8002a56:	4918      	ldr	r1, [pc, #96]	@ (8002ab8 <initialvalueassignment+0x134>)
	PedalAssist.addAmount = 100;
 8002a58:	609a      	str	r2, [r3, #8]
	PedalAssist.maxDiff = 1000;
 8002a5a:	60d9      	str	r1, [r3, #12]
	PedalAssist.scale = 12;
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	7499      	strb	r1, [r3, #18]
	PedalAssist.timeout = 1500;
 8002a60:	4916      	ldr	r1, [pc, #88]	@ (8002abc <initialvalueassignment+0x138>)
	PedalAssist.derampFactor = 10;
 8002a62:	629f      	str	r7, [r3, #40]	@ 0x28
	PedalAssist.timeout = 1500;
 8002a64:	8219      	strh	r1, [r3, #16]
	PedalAssist.maxRPM = 1300;
 8002a66:	8318      	strh	r0, [r3, #24]


	//Cruise control
	// Cruise mode
	CruiseMode.throttleMoveThreshold = 100;		// Throttle movement detection threshold
 8002a68:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <initialvalueassignment+0x13c>)
 8002a6a:	805a      	strh	r2, [r3, #2]
	CruiseMode.timeToSetAutoCruise = 4000;		// Time required for auto cruise to set
 8002a6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <initialvalueassignment+0x140>)
 8002a6e:	60da      	str	r2, [r3, #12]
	CruiseMode.cruiseSetBaseValue = 400;

}
 8002a70:	bc80      	pop	{r7}
 8002a72:	46b8      	mov	r8, r7
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	2000069c 	.word	0x2000069c
 8002a7c:	3ba3d70a 	.word	0x3ba3d70a
 8002a80:	41080000 	.word	0x41080000
 8002a84:	001e8480 	.word	0x001e8480
 8002a88:	0001d4c0 	.word	0x0001d4c0
 8002a8c:	0000039a 	.word	0x0000039a
 8002a90:	3fb70a3d 	.word	0x3fb70a3d
 8002a94:	3a534067 	.word	0x3a534067
 8002a98:	3b8ce704 	.word	0x3b8ce704
 8002a9c:	0000871d 	.word	0x0000871d
 8002aa0:	20000670 	.word	0x20000670
 8002aa4:	000078e3 	.word	0x000078e3
 8002aa8:	00002328 	.word	0x00002328
 8002aac:	00000514 	.word	0x00000514
 8002ab0:	00001770 	.word	0x00001770
 8002ab4:	20000570 	.word	0x20000570
 8002ab8:	003203e8 	.word	0x003203e8
 8002abc:	000005dc 	.word	0x000005dc
 8002ac0:	200005d4 	.word	0x200005d4
 8002ac4:	01900fa0 	.word	0x01900fa0

08002ac8 <initialconfiguration>:
void initialconfiguration(){
 8002ac8:	b510      	push	{r4, lr}
	initialvalueassignment();
 8002aca:	f7ff ff5b 	bl	8002984 <initialvalueassignment>
	ControlVals.initialAssignmentsCompleted = 1;
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4b01      	ldr	r3, [pc, #4]	@ (8002ad8 <initialconfiguration+0x10>)
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	200005a0 	.word	0x200005a0

08002adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ade:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_InitTick+0x40>)
{
 8002ae0:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002ae2:	7819      	ldrb	r1, [r3, #0]
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002aec:	20fa      	movs	r0, #250	@ 0xfa
 8002aee:	0080      	lsls	r0, r0, #2
 8002af0:	f7fd fb06 	bl	8000100 <__udivsi3>
 8002af4:	4d0a      	ldr	r5, [pc, #40]	@ (8002b20 <HAL_InitTick+0x44>)
 8002af6:	0001      	movs	r1, r0
 8002af8:	6828      	ldr	r0, [r5, #0]
 8002afa:	f7fd fb01 	bl	8000100 <__udivsi3>
 8002afe:	f000 fdb3 	bl	8003668 <HAL_SYSTICK_Config>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b06:	2c03      	cmp	r4, #3
 8002b08:	d8ee      	bhi.n	8002ae8 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b0a:	3801      	subs	r0, #1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	0021      	movs	r1, r4
 8002b10:	f000 fd74 	bl	80035fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_InitTick+0x48>)
 8002b16:	2000      	movs	r0, #0
 8002b18:	601c      	str	r4, [r3, #0]
  return status;
 8002b1a:	e7e6      	b.n	8002aea <HAL_InitTick+0xe>
 8002b1c:	200002b4 	.word	0x200002b4
 8002b20:	20000000 	.word	0x20000000
 8002b24:	200002b8 	.word	0x200002b8

08002b28 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <HAL_Init+0x24>)
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	6811      	ldr	r1, [r2, #0]
{
 8002b30:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b32:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b34:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b36:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b38:	f7ff ffd0 	bl	8002adc <HAL_InitTick>
 8002b3c:	1e04      	subs	r4, r0, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002b40:	2401      	movs	r4, #1
}
 8002b42:	0020      	movs	r0, r4
 8002b44:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002b46:	f7fe fdeb 	bl	8001720 <HAL_MspInit>
 8002b4a:	e7fa      	b.n	8002b42 <HAL_Init+0x1a>
 8002b4c:	40022000 	.word	0x40022000

08002b50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002b50:	4a03      	ldr	r2, [pc, #12]	@ (8002b60 <HAL_IncTick+0x10>)
 8002b52:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <HAL_IncTick+0x14>)
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	185b      	adds	r3, r3, r1
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	4770      	bx	lr
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	20000754 	.word	0x20000754
 8002b64:	200002b4 	.word	0x200002b4

08002b68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b68:	4b01      	ldr	r3, [pc, #4]	@ (8002b70 <HAL_GetTick+0x8>)
 8002b6a:	6818      	ldr	r0, [r3, #0]
}
 8002b6c:	4770      	bx	lr
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	20000754 	.word	0x20000754

08002b74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	46d6      	mov	lr, sl
 8002b78:	464f      	mov	r7, r9
 8002b7a:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b7c:	2300      	movs	r3, #0
{
 8002b7e:	b5c0      	push	{r6, r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8002b84:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b86:	d02c      	beq.n	8002be2 <HAL_ADC_Init+0x6e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b88:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	d100      	bne.n	8002b90 <HAL_ADC_Init+0x1c>
 8002b8e:	e0cc      	b.n	8002d2a <HAL_ADC_Init+0x1b6>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b90:	2380      	movs	r3, #128	@ 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b92:	6825      	ldr	r5, [r4, #0]
 8002b94:	055b      	lsls	r3, r3, #21
 8002b96:	68aa      	ldr	r2, [r5, #8]
 8002b98:	421a      	tst	r2, r3
 8002b9a:	d115      	bne.n	8002bc8 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 8002b9c:	68aa      	ldr	r2, [r5, #8]
 8002b9e:	497b      	ldr	r1, [pc, #492]	@ (8002d8c <HAL_ADC_Init+0x218>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8002d90 <HAL_ADC_Init+0x21c>)
 8002ba8:	497a      	ldr	r1, [pc, #488]	@ (8002d94 <HAL_ADC_Init+0x220>)
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	f7fd faa8 	bl	8000100 <__udivsi3>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	0040      	lsls	r0, r0, #1
 8002bb4:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bb6:	9b01      	ldr	r3, [sp, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 8002bbc:	9b01      	ldr	r3, [sp, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bc2:	9b01      	ldr	r3, [sp, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bc8:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bca:	2000      	movs	r0, #0
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	d400      	bmi.n	8002bd2 <HAL_ADC_Init+0x5e>
 8002bd0:	e09d      	b.n	8002d0e <HAL_ADC_Init+0x19a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bd2:	68ab      	ldr	r3, [r5, #8]
 8002bd4:	075b      	lsls	r3, r3, #29
 8002bd6:	d50b      	bpl.n	8002bf0 <HAL_ADC_Init+0x7c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bda:	2210      	movs	r2, #16
 8002bdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002bde:	4313      	orrs	r3, r2
 8002be0:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002be2:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8002be4:	b002      	add	sp, #8
 8002be6:	bce0      	pop	{r5, r6, r7}
 8002be8:	46ba      	mov	sl, r7
 8002bea:	46b1      	mov	r9, r6
 8002bec:	46a8      	mov	r8, r5
 8002bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002bf2:	06db      	lsls	r3, r3, #27
 8002bf4:	d4f1      	bmi.n	8002bda <HAL_ADC_Init+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 8002bf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002bf8:	4a67      	ldr	r2, [pc, #412]	@ (8002d98 <HAL_ADC_Init+0x224>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bfa:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	3206      	adds	r2, #6
 8002c00:	32ff      	adds	r2, #255	@ 0xff
 8002c02:	4313      	orrs	r3, r2
 8002c04:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c06:	68ab      	ldr	r3, [r5, #8]
 8002c08:	07db      	lsls	r3, r3, #31
 8002c0a:	d45c      	bmi.n	8002cc6 <HAL_ADC_Init+0x152>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c0c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8002c0e:	68a2      	ldr	r2, [r4, #8]
 8002c10:	1e7b      	subs	r3, r7, #1
 8002c12:	419f      	sbcs	r7, r3
 8002c14:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c16:	7ea6      	ldrb	r6, [r4, #26]
 8002c18:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c1a:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c1c:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c1e:	039b      	lsls	r3, r3, #14
 8002c20:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c22:	7e63      	ldrb	r3, [r4, #25]
 8002c24:	03db      	lsls	r3, r3, #15
 8002c26:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c28:	0373      	lsls	r3, r6, #13
 8002c2a:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	da00      	bge.n	8002c32 <HAL_ADC_Init+0xbe>
 8002c30:	e09b      	b.n	8002d6a <HAL_ADC_Init+0x1f6>
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	039b      	lsls	r3, r3, #14
 8002c36:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c38:	232c      	movs	r3, #44	@ 0x2c
 8002c3a:	5ce3      	ldrb	r3, [r4, r3]
 8002c3c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	433b      	orrs	r3, r7
 8002c42:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c44:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c46:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c48:	5de2      	ldrb	r2, [r4, r7]
 8002c4a:	2a01      	cmp	r2, #1
 8002c4c:	d100      	bne.n	8002c50 <HAL_ADC_Init+0xdc>
 8002c4e:	e090      	b.n	8002d72 <HAL_ADC_Init+0x1fe>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c50:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002c52:	2a00      	cmp	r2, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_ADC_Init+0xee>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c56:	26e0      	movs	r6, #224	@ 0xe0
 8002c58:	0076      	lsls	r6, r6, #1
 8002c5a:	4032      	ands	r2, r6
 8002c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002c5e:	4332      	orrs	r2, r6
 8002c60:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8002c62:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c64:	68ea      	ldr	r2, [r5, #12]
 8002c66:	4e4d      	ldr	r6, [pc, #308]	@ (8002d9c <HAL_ADC_Init+0x228>)
 8002c68:	4032      	ands	r2, r6
 8002c6a:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c6c:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c6e:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c70:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8002c72:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c74:	0fb3      	lsrs	r3, r6, #30
 8002c76:	079b      	lsls	r3, r3, #30
 8002c78:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8002c7a:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c7c:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8002c7e:	2f01      	cmp	r7, #1
 8002c80:	d109      	bne.n	8002c96 <HAL_ADC_Init+0x122>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002c82:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8002c84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c86:	433b      	orrs	r3, r7
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	4653      	mov	r3, sl
 8002c8c:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 8002c8e:	433a      	orrs	r2, r7
 8002c90:	431a      	orrs	r2, r3
 8002c92:	4663      	mov	r3, ip
 8002c94:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8002c96:	692b      	ldr	r3, [r5, #16]
 8002c98:	4f41      	ldr	r7, [pc, #260]	@ (8002da0 <HAL_ADC_Init+0x22c>)
 8002c9a:	403b      	ands	r3, r7
 8002c9c:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c9e:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8002ca0:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ca2:	0073      	lsls	r3, r6, #1
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	05d2      	lsls	r2, r2, #23
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00c      	beq.n	8002cc6 <HAL_ADC_Init+0x152>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	429e      	cmp	r6, r3
 8002cb2:	d008      	beq.n	8002cc6 <HAL_ADC_Init+0x152>
        MODIFY_REG(ADC1_COMMON->CCR,
 8002cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002da4 <HAL_ADC_Init+0x230>)
 8002cb6:	4f3c      	ldr	r7, [pc, #240]	@ (8002da8 <HAL_ADC_Init+0x234>)
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	403b      	ands	r3, r7
 8002cbc:	27f0      	movs	r7, #240	@ 0xf0
 8002cbe:	03bf      	lsls	r7, r7, #14
 8002cc0:	403e      	ands	r6, r7
 8002cc2:	4333      	orrs	r3, r6
 8002cc4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 8002cc6:	2607      	movs	r6, #7
 8002cc8:	2770      	movs	r7, #112	@ 0x70
 8002cca:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002ccc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002cce:	43b3      	bics	r3, r6
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	616b      	str	r3, [r5, #20]
 8002cd4:	696e      	ldr	r6, [r5, #20]
 8002cd6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002cd8:	43be      	bics	r6, r7
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4333      	orrs	r3, r6
 8002cde:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ce0:	2900      	cmp	r1, #0
 8002ce2:	d128      	bne.n	8002d36 <HAL_ADC_Init+0x1c2>
      SET_BIT(hadc->Instance->CHSELR,
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002ce8:	425b      	negs	r3, r3
 8002cea:	430b      	orrs	r3, r1
 8002cec:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002cee:	2307      	movs	r3, #7
 8002cf0:	6969      	ldr	r1, [r5, #20]
 8002cf2:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d02f      	beq.n	8002d58 <HAL_ADC_Init+0x1e4>
      ADC_STATE_CLR_SET(hadc->State,
 8002cf8:	2212      	movs	r2, #18
 8002cfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	3a02      	subs	r2, #2
 8002d00:	4313      	orrs	r3, r2
 8002d02:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d06:	3a0f      	subs	r2, #15
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8002d0c:	e769      	b.n	8002be2 <HAL_ADC_Init+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	2210      	movs	r2, #16
 8002d10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8002d12:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d14:	4313      	orrs	r3, r2
 8002d16:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d18:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d1a:	3a0f      	subs	r2, #15
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d20:	68ab      	ldr	r3, [r5, #8]
 8002d22:	075b      	lsls	r3, r3, #29
 8002d24:	d400      	bmi.n	8002d28 <HAL_ADC_Init+0x1b4>
 8002d26:	e763      	b.n	8002bf0 <HAL_ADC_Init+0x7c>
 8002d28:	e756      	b.n	8002bd8 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8002d2a:	f7fe fb3f 	bl	80013ac <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8002d2e:	2354      	movs	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8002d30:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002d32:	54e5      	strb	r5, [r4, r3]
 8002d34:	e72c      	b.n	8002b90 <HAL_ADC_Init+0x1c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	039b      	lsls	r3, r3, #14
 8002d3a:	4299      	cmp	r1, r3
 8002d3c:	d1d7      	bne.n	8002cee <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d3e:	211c      	movs	r1, #28
 8002d40:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002d42:	69e3      	ldr	r3, [r4, #28]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4019      	ands	r1, r3
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	408b      	lsls	r3, r1
 8002d50:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002d52:	430b      	orrs	r3, r1
 8002d54:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002d56:	e7ca      	b.n	8002cee <HAL_ADC_Init+0x17a>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d58:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002d5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002d60:	4393      	bics	r3, r2
 8002d62:	3a02      	subs	r2, #2
 8002d64:	4313      	orrs	r3, r2
 8002d66:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002d68:	e73c      	b.n	8002be4 <HAL_ADC_Init+0x70>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d6a:	004b      	lsls	r3, r1, #1
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	469c      	mov	ip, r3
 8002d70:	e762      	b.n	8002c38 <HAL_ADC_Init+0xc4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d72:	2e00      	cmp	r6, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_ADC_Init+0x20a>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	0252      	lsls	r2, r2, #9
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	e768      	b.n	8002c50 <HAL_ADC_Init+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7e:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8002d80:	433e      	orrs	r6, r7
 8002d82:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d84:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 8002d86:	4332      	orrs	r2, r6
 8002d88:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8002d8a:	e761      	b.n	8002c50 <HAL_ADC_Init+0xdc>
 8002d8c:	6fffffe8 	.word	0x6fffffe8
 8002d90:	20000000 	.word	0x20000000
 8002d94:	00030d40 	.word	0x00030d40
 8002d98:	fffffefd 	.word	0xfffffefd
 8002d9c:	ffde0201 	.word	0xffde0201
 8002da0:	1ffffc02 	.word	0x1ffffc02
 8002da4:	40012708 	.word	0x40012708
 8002da8:	ffc3ffff 	.word	0xffc3ffff

08002dac <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8002dac:	4770      	bx	lr
 8002dae:	46c0      	nop			@ (mov r8, r8)

08002db0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002db0:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002db4:	f7ff fffa 	bl	8002dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)

08002dbc <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8002dbc:	4770      	bx	lr
 8002dbe:	46c0      	nop			@ (mov r8, r8)

08002dc0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002dc0:	4770      	bx	lr
 8002dc2:	46c0      	nop			@ (mov r8, r8)

08002dc4 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dc4:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002dc8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dca:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dd0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002dd2:	3a3c      	subs	r2, #60	@ 0x3c
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dd8:	f7ff fff2 	bl	8002dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	46c0      	nop			@ (mov r8, r8)

08002de0 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002de0:	2150      	movs	r1, #80	@ 0x50
{
 8002de2:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002de6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002de8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002dea:	4211      	tst	r1, r2
 8002dec:	d10d      	bne.n	8002e0a <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002df6:	22c0      	movs	r2, #192	@ 0xc0
 8002df8:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dfa:	6803      	ldr	r3, [r0, #0]
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	4211      	tst	r1, r2
 8002e02:	d00a      	beq.n	8002e1a <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8002e04:	f7fe fdd4 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
}
 8002e08:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e0a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002e0c:	06d2      	lsls	r2, r2, #27
 8002e0e:	d416      	bmi.n	8002e3e <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e10:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002e12:	0018      	movs	r0, r3
 8002e14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e16:	4790      	blx	r2
}
 8002e18:	e7f6      	b.n	8002e08 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e1a:	7e82      	ldrb	r2, [r0, #26]
 8002e1c:	2a00      	cmp	r2, #0
 8002e1e:	d1f1      	bne.n	8002e04 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	0712      	lsls	r2, r2, #28
 8002e24:	d5ee      	bpl.n	8002e04 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	0752      	lsls	r2, r2, #29
 8002e2a:	d50b      	bpl.n	8002e44 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002e30:	4313      	orrs	r3, r2
 8002e32:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e34:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002e36:	3a1f      	subs	r2, #31
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8002e3c:	e7e2      	b.n	8002e04 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 8002e3e:	f7ff ffbf 	bl	8002dc0 <HAL_ADC_ErrorCallback>
 8002e42:	e7e1      	b.n	8002e08 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e44:	210c      	movs	r1, #12
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	438a      	bics	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002e4c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002e4e:	4a03      	ldr	r2, [pc, #12]	@ (8002e5c <ADC_DMAConvCplt+0x7c>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	3204      	adds	r2, #4
 8002e54:	32ff      	adds	r2, #255	@ 0xff
 8002e56:	4313      	orrs	r3, r2
 8002e58:	6583      	str	r3, [r0, #88]	@ 0x58
 8002e5a:	e7d3      	b.n	8002e04 <ADC_DMAConvCplt+0x24>
 8002e5c:	fffffefe 	.word	0xfffffefe

08002e60 <HAL_ADC_IRQHandler>:
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e60:	2202      	movs	r2, #2
{
 8002e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e64:	6803      	ldr	r3, [r0, #0]
{
 8002e66:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e68:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e6a:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e6c:	422a      	tst	r2, r5
 8002e6e:	d001      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x14>
 8002e70:	4232      	tst	r2, r6
 8002e72:	d14c      	bne.n	8002f0e <HAL_ADC_IRQHandler+0xae>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e74:	2204      	movs	r2, #4
 8002e76:	422a      	tst	r2, r5
 8002e78:	d043      	beq.n	8002f02 <HAL_ADC_IRQHandler+0xa2>
 8002e7a:	4232      	tst	r2, r6
 8002e7c:	d041      	beq.n	8002f02 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e7e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002e80:	06d2      	lsls	r2, r2, #27
 8002e82:	d404      	bmi.n	8002e8e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e8e:	22c0      	movs	r2, #192	@ 0xc0
 8002e90:	68d9      	ldr	r1, [r3, #12]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	4211      	tst	r1, r2
 8002e96:	d111      	bne.n	8002ebc <HAL_ADC_IRQHandler+0x5c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e98:	7ea2      	ldrb	r2, [r4, #26]
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	d10e      	bne.n	8002ebc <HAL_ADC_IRQHandler+0x5c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	0712      	lsls	r2, r2, #28
 8002ea2:	d50b      	bpl.n	8002ebc <HAL_ADC_IRQHandler+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	0752      	lsls	r2, r2, #29
 8002ea8:	d400      	bmi.n	8002eac <HAL_ADC_IRQHandler+0x4c>
 8002eaa:	e07c      	b.n	8002fa6 <HAL_ADC_IRQHandler+0x146>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eac:	2220      	movs	r2, #32
 8002eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002eb6:	3a1f      	subs	r2, #31
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8002ebc:	0020      	movs	r0, r4
 8002ebe:	f7fe fd77 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ec8:	2780      	movs	r7, #128	@ 0x80
 8002eca:	422f      	tst	r7, r5
 8002ecc:	d001      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0x72>
 8002ece:	4237      	tst	r7, r6
 8002ed0:	d14d      	bne.n	8002f6e <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ed2:	2780      	movs	r7, #128	@ 0x80
 8002ed4:	007f      	lsls	r7, r7, #1
 8002ed6:	423d      	tst	r5, r7
 8002ed8:	d001      	beq.n	8002ede <HAL_ADC_IRQHandler+0x7e>
 8002eda:	423e      	tst	r6, r7
 8002edc:	d152      	bne.n	8002f84 <HAL_ADC_IRQHandler+0x124>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ede:	2780      	movs	r7, #128	@ 0x80
 8002ee0:	00bf      	lsls	r7, r7, #2
 8002ee2:	423d      	tst	r5, r7
 8002ee4:	d001      	beq.n	8002eea <HAL_ADC_IRQHandler+0x8a>
 8002ee6:	423e      	tst	r6, r7
 8002ee8:	d136      	bne.n	8002f58 <HAL_ADC_IRQHandler+0xf8>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002eea:	2210      	movs	r2, #16
 8002eec:	422a      	tst	r2, r5
 8002eee:	d001      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x94>
 8002ef0:	4232      	tst	r2, r6
 8002ef2:	d11b      	bne.n	8002f2c <HAL_ADC_IRQHandler+0xcc>
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002ef4:	2780      	movs	r7, #128	@ 0x80
 8002ef6:	01bf      	lsls	r7, r7, #6
 8002ef8:	423d      	tst	r5, r7
 8002efa:	d001      	beq.n	8002f00 <HAL_ADC_IRQHandler+0xa0>
 8002efc:	423e      	tst	r6, r7
 8002efe:	d14c      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x13a>
}
 8002f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f02:	2208      	movs	r2, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f04:	422a      	tst	r2, r5
 8002f06:	d0df      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x68>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f08:	4232      	tst	r2, r6
 8002f0a:	d0dd      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x68>
 8002f0c:	e7b7      	b.n	8002e7e <HAL_ADC_IRQHandler+0x1e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f0e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002f10:	06db      	lsls	r3, r3, #27
 8002f12:	d404      	bmi.n	8002f1e <HAL_ADC_IRQHandler+0xbe>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f1e:	0020      	movs	r0, r4
 8002f20:	f000 fb68 	bl	80035f4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f24:	2202      	movs	r2, #2
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e7a3      	b.n	8002e74 <HAL_ADC_IRQHandler+0x14>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f2c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_ADC_IRQHandler+0xd8>
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002f32:	68da      	ldr	r2, [r3, #12]
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002f34:	0792      	lsls	r2, r2, #30
 8002f36:	d00c      	beq.n	8002f52 <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4313      	orrs	r3, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f40:	2202      	movs	r2, #2
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f42:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8002f46:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8002f4c:	f7ff ff38 	bl	8002dc0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e7cd      	b.n	8002ef4 <HAL_ADC_IRQHandler+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002f5c:	02db      	lsls	r3, r3, #11
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f62:	0020      	movs	r0, r4
 8002f64:	f000 fb44 	bl	80035f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	601f      	str	r7, [r3, #0]
 8002f6c:	e7bd      	b.n	8002eea <HAL_ADC_IRQHandler+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002f72:	025b      	lsls	r3, r3, #9
 8002f74:	4313      	orrs	r3, r2
 8002f76:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f78:	0020      	movs	r0, r4
 8002f7a:	f7ff ff1f 	bl	8002dbc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	601f      	str	r7, [r3, #0]
 8002f82:	e7a6      	b.n	8002ed2 <HAL_ADC_IRQHandler+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002f88:	029b      	lsls	r3, r3, #10
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f8e:	0020      	movs	r0, r4
 8002f90:	f000 fb2c 	bl	80035ec <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	601f      	str	r7, [r3, #0]
 8002f98:	e7a1      	b.n	8002ede <HAL_ADC_IRQHandler+0x7e>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002f9a:	0020      	movs	r0, r4
 8002f9c:	f000 fb2c 	bl	80035f8 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	601f      	str	r7, [r3, #0]
}
 8002fa4:	e7ac      	b.n	8002f00 <HAL_ADC_IRQHandler+0xa0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fa6:	210c      	movs	r1, #12
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	438a      	bics	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002fae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fb0:	4a03      	ldr	r2, [pc, #12]	@ (8002fc0 <HAL_ADC_IRQHandler+0x160>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	3204      	adds	r2, #4
 8002fb6:	32ff      	adds	r2, #255	@ 0xff
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002fbc:	e77e      	b.n	8002ebc <HAL_ADC_IRQHandler+0x5c>
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	fffffefe 	.word	0xfffffefe

08002fc4 <HAL_ADC_ConfigChannel>:
{
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	46de      	mov	lr, fp
 8002fc8:	4657      	mov	r7, sl
 8002fca:	464e      	mov	r6, r9
 8002fcc:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 8002fce:	2300      	movs	r3, #0
{
 8002fd0:	0004      	movs	r4, r0
 8002fd2:	b5e0      	push	{r5, r6, r7, lr}
 8002fd4:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8002fd6:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8002fd8:	3354      	adds	r3, #84	@ 0x54
 8002fda:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fdc:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 8002fde:	2a01      	cmp	r2, #1
 8002fe0:	d100      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x20>
 8002fe2:	e09a      	b.n	800311a <HAL_ADC_ConfigChannel+0x156>
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fea:	3203      	adds	r2, #3
 8002fec:	689e      	ldr	r6, [r3, #8]
 8002fee:	4232      	tst	r2, r6
 8002ff0:	d00e      	beq.n	8003010 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 8002ff2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ff6:	321c      	adds	r2, #28
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002ffc:	2354      	movs	r3, #84	@ 0x54
 8002ffe:	2200      	movs	r2, #0
 8003000:	54e2      	strb	r2, [r4, r3]
}
 8003002:	b005      	add	sp, #20
 8003004:	bcf0      	pop	{r4, r5, r6, r7}
 8003006:	46bb      	mov	fp, r7
 8003008:	46b2      	mov	sl, r6
 800300a:	46a9      	mov	r9, r5
 800300c:	46a0      	mov	r8, r4
 800300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8003010:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003012:	4390      	bics	r0, r2
 8003014:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003016:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8003018:	2e02      	cmp	r6, #2
 800301a:	d05e      	beq.n	80030da <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800301c:	0347      	lsls	r7, r0, #13
 800301e:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003020:	2780      	movs	r7, #128	@ 0x80
 8003022:	9500      	str	r5, [sp, #0]
 8003024:	063f      	lsls	r7, r7, #24
 8003026:	45bc      	cmp	ip, r7
 8003028:	d053      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800302a:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 800302c:	46bb      	mov	fp, r7
 800302e:	271f      	movs	r7, #31
 8003030:	46b8      	mov	r8, r7
 8003032:	4037      	ands	r7, r6
 8003034:	46ba      	mov	sl, r7
 8003036:	270f      	movs	r7, #15
 8003038:	4655      	mov	r5, sl
 800303a:	40af      	lsls	r7, r5
 800303c:	43fd      	mvns	r5, r7
 800303e:	46bc      	mov	ip, r7
 8003040:	9501      	str	r5, [sp, #4]
 8003042:	465f      	mov	r7, fp
 8003044:	4665      	mov	r5, ip
 8003046:	43af      	bics	r7, r5
 8003048:	9d00      	ldr	r5, [sp, #0]
 800304a:	46b9      	mov	r9, r7
 800304c:	2d00      	cmp	r5, #0
 800304e:	d166      	bne.n	800311e <HAL_ADC_ConfigChannel+0x15a>
 8003050:	4645      	mov	r5, r8
 8003052:	0e82      	lsrs	r2, r0, #26
 8003054:	4015      	ands	r5, r2
 8003056:	002a      	movs	r2, r5
 8003058:	4655      	mov	r5, sl
 800305a:	40aa      	lsls	r2, r5
 800305c:	464d      	mov	r5, r9
 800305e:	4315      	orrs	r5, r2
 8003060:	46a9      	mov	r9, r5
 8003062:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003064:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003066:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003068:	69e2      	ldr	r2, [r4, #28]
 800306a:	3601      	adds	r6, #1
 800306c:	4296      	cmp	r6, r2
 800306e:	d808      	bhi.n	8003082 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8003070:	4656      	mov	r6, sl
 8003072:	0082      	lsls	r2, r0, #2
 8003074:	0f12      	lsrs	r2, r2, #28
 8003076:	40b2      	lsls	r2, r6
 8003078:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800307a:	9e01      	ldr	r6, [sp, #4]
 800307c:	4035      	ands	r5, r6
 800307e:	432a      	orrs	r2, r5
 8003080:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8003082:	0205      	lsls	r5, r0, #8
 8003084:	688a      	ldr	r2, [r1, #8]
 8003086:	0029      	movs	r1, r5
 8003088:	695e      	ldr	r6, [r3, #20]
 800308a:	402a      	ands	r2, r5
 800308c:	4d66      	ldr	r5, [pc, #408]	@ (8003228 <HAL_ADC_ConfigChannel+0x264>)
 800308e:	438e      	bics	r6, r1
 8003090:	402a      	ands	r2, r5
 8003092:	4332      	orrs	r2, r6
 8003094:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003096:	2800      	cmp	r0, #0
 8003098:	db01      	blt.n	800309e <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309a:	2000      	movs	r0, #0
 800309c:	e7ae      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800309e:	21e0      	movs	r1, #224	@ 0xe0
 80030a0:	4d62      	ldr	r5, [pc, #392]	@ (800322c <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030a2:	4a63      	ldr	r2, [pc, #396]	@ (8003230 <HAL_ADC_ConfigChannel+0x26c>)
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	0449      	lsls	r1, r1, #17
 80030a8:	4019      	ands	r1, r3
 80030aa:	4290      	cmp	r0, r2
 80030ac:	d04c      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030ae:	4a61      	ldr	r2, [pc, #388]	@ (8003234 <HAL_ADC_ConfigChannel+0x270>)
 80030b0:	4290      	cmp	r0, r2
 80030b2:	d040      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030b4:	4a60      	ldr	r2, [pc, #384]	@ (8003238 <HAL_ADC_ConfigChannel+0x274>)
 80030b6:	4290      	cmp	r0, r2
 80030b8:	d1ef      	bne.n	800309a <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030be:	4213      	tst	r3, r2
 80030c0:	d1eb      	bne.n	800309a <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030c2:	682b      	ldr	r3, [r5, #0]
 80030c4:	485d      	ldr	r0, [pc, #372]	@ (800323c <HAL_ADC_ConfigChannel+0x278>)
 80030c6:	4003      	ands	r3, r0
 80030c8:	430b      	orrs	r3, r1
 80030ca:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030cc:	2000      	movs	r0, #0
 80030ce:	602a      	str	r2, [r5, #0]
 80030d0:	e794      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030d4:	432a      	orrs	r2, r5
 80030d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030d8:	e7d3      	b.n	8003082 <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	0612      	lsls	r2, r2, #24
 80030de:	4594      	cmp	ip, r2
 80030e0:	d104      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e4:	0341      	lsls	r1, r0, #13
 80030e6:	0b49      	lsrs	r1, r1, #13
 80030e8:	438a      	bics	r2, r1
 80030ea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030ec:	2800      	cmp	r0, #0
 80030ee:	dad4      	bge.n	800309a <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030f0:	4a4e      	ldr	r2, [pc, #312]	@ (800322c <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f2:	494f      	ldr	r1, [pc, #316]	@ (8003230 <HAL_ADC_ConfigChannel+0x26c>)
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	4288      	cmp	r0, r1
 80030f8:	d023      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030fa:	494e      	ldr	r1, [pc, #312]	@ (8003234 <HAL_ADC_ConfigChannel+0x270>)
 80030fc:	4288      	cmp	r0, r1
 80030fe:	d04a      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003100:	494d      	ldr	r1, [pc, #308]	@ (8003238 <HAL_ADC_ConfigChannel+0x274>)
 8003102:	4288      	cmp	r0, r1
 8003104:	d1c9      	bne.n	800309a <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003106:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003108:	6811      	ldr	r1, [r2, #0]
 800310a:	0440      	lsls	r0, r0, #17
 800310c:	4003      	ands	r3, r0
 800310e:	484b      	ldr	r0, [pc, #300]	@ (800323c <HAL_ADC_ConfigChannel+0x278>)
 8003110:	4001      	ands	r1, r0
 8003112:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003114:	2000      	movs	r0, #0
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	e770      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 800311a:	2002      	movs	r0, #2
 800311c:	e771      	b.n	8003002 <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800311e:	2501      	movs	r5, #1
 8003120:	4205      	tst	r5, r0
 8003122:	d19e      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x9e>
 8003124:	2702      	movs	r7, #2
 8003126:	4207      	tst	r7, r0
 8003128:	d02d      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x1c2>
 800312a:	4652      	mov	r2, sl
 800312c:	4095      	lsls	r5, r2
 800312e:	464a      	mov	r2, r9
 8003130:	432a      	orrs	r2, r5
 8003132:	4691      	mov	r9, r2
 8003134:	e795      	b.n	8003062 <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	0452      	lsls	r2, r2, #17
 800313a:	4213      	tst	r3, r2
 800313c:	d0c1      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313e:	2000      	movs	r0, #0
 8003140:	e75c      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003142:	20a0      	movs	r0, #160	@ 0xa0
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	e7e0      	b.n	800310a <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800314c:	4213      	tst	r3, r2
 800314e:	d1a4      	bne.n	800309a <HAL_ADC_ConfigChannel+0xd6>
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	483a      	ldr	r0, [pc, #232]	@ (800323c <HAL_ADC_ConfigChannel+0x278>)
 8003154:	4003      	ands	r3, r0
 8003156:	430b      	orrs	r3, r1
 8003158:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800315a:	4b39      	ldr	r3, [pc, #228]	@ (8003240 <HAL_ADC_ConfigChannel+0x27c>)
 800315c:	602a      	str	r2, [r5, #0]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	4938      	ldr	r1, [pc, #224]	@ (8003244 <HAL_ADC_ConfigChannel+0x280>)
 8003162:	f7fc ffcd 	bl	8000100 <__udivsi3>
 8003166:	3001      	adds	r0, #1
 8003168:	0043      	lsls	r3, r0, #1
 800316a:	181b      	adds	r3, r3, r0
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8003170:	9b03      	ldr	r3, [sp, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d091      	beq.n	800309a <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 8003176:	9b03      	ldr	r3, [sp, #12]
 8003178:	3b01      	subs	r3, #1
 800317a:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f9      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003182:	2000      	movs	r0, #0
 8003184:	e73a      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003186:	4202      	tst	r2, r0
 8003188:	d009      	beq.n	800319e <HAL_ADC_ConfigChannel+0x1da>
 800318a:	4652      	mov	r2, sl
 800318c:	4097      	lsls	r7, r2
 800318e:	464a      	mov	r2, r9
 8003190:	433a      	orrs	r2, r7
 8003192:	4691      	mov	r9, r2
 8003194:	e765      	b.n	8003062 <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003196:	20c0      	movs	r0, #192	@ 0xc0
 8003198:	6811      	ldr	r1, [r2, #0]
 800319a:	0400      	lsls	r0, r0, #16
 800319c:	e7b6      	b.n	800310c <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800319e:	0702      	lsls	r2, r0, #28
 80031a0:	d501      	bpl.n	80031a6 <HAL_ADC_ConfigChannel+0x1e2>
 80031a2:	2203      	movs	r2, #3
 80031a4:	e758      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031a6:	06c2      	lsls	r2, r0, #27
 80031a8:	d501      	bpl.n	80031ae <HAL_ADC_ConfigChannel+0x1ea>
 80031aa:	2204      	movs	r2, #4
 80031ac:	e754      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031ae:	0682      	lsls	r2, r0, #26
 80031b0:	d501      	bpl.n	80031b6 <HAL_ADC_ConfigChannel+0x1f2>
 80031b2:	2205      	movs	r2, #5
 80031b4:	e750      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031b6:	0642      	lsls	r2, r0, #25
 80031b8:	d501      	bpl.n	80031be <HAL_ADC_ConfigChannel+0x1fa>
 80031ba:	2206      	movs	r2, #6
 80031bc:	e74c      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031be:	0602      	lsls	r2, r0, #24
 80031c0:	d501      	bpl.n	80031c6 <HAL_ADC_ConfigChannel+0x202>
 80031c2:	2207      	movs	r2, #7
 80031c4:	e748      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031c6:	05c2      	lsls	r2, r0, #23
 80031c8:	d501      	bpl.n	80031ce <HAL_ADC_ConfigChannel+0x20a>
 80031ca:	2208      	movs	r2, #8
 80031cc:	e744      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031ce:	0582      	lsls	r2, r0, #22
 80031d0:	d501      	bpl.n	80031d6 <HAL_ADC_ConfigChannel+0x212>
 80031d2:	2209      	movs	r2, #9
 80031d4:	e740      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031d6:	0542      	lsls	r2, r0, #21
 80031d8:	d501      	bpl.n	80031de <HAL_ADC_ConfigChannel+0x21a>
 80031da:	220a      	movs	r2, #10
 80031dc:	e73c      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031de:	0502      	lsls	r2, r0, #20
 80031e0:	d501      	bpl.n	80031e6 <HAL_ADC_ConfigChannel+0x222>
 80031e2:	220b      	movs	r2, #11
 80031e4:	e738      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031e6:	04c2      	lsls	r2, r0, #19
 80031e8:	d501      	bpl.n	80031ee <HAL_ADC_ConfigChannel+0x22a>
 80031ea:	220c      	movs	r2, #12
 80031ec:	e734      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031ee:	0482      	lsls	r2, r0, #18
 80031f0:	d501      	bpl.n	80031f6 <HAL_ADC_ConfigChannel+0x232>
 80031f2:	220d      	movs	r2, #13
 80031f4:	e730      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031f6:	0442      	lsls	r2, r0, #17
 80031f8:	d501      	bpl.n	80031fe <HAL_ADC_ConfigChannel+0x23a>
 80031fa:	220e      	movs	r2, #14
 80031fc:	e72c      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 80031fe:	0402      	lsls	r2, r0, #16
 8003200:	d504      	bpl.n	800320c <HAL_ADC_ConfigChannel+0x248>
 8003202:	465a      	mov	r2, fp
 8003204:	4665      	mov	r5, ip
 8003206:	432a      	orrs	r2, r5
 8003208:	4691      	mov	r9, r2
 800320a:	e72a      	b.n	8003062 <HAL_ADC_ConfigChannel+0x9e>
 800320c:	03c2      	lsls	r2, r0, #15
 800320e:	d501      	bpl.n	8003214 <HAL_ADC_ConfigChannel+0x250>
 8003210:	2210      	movs	r2, #16
 8003212:	e721      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 8003214:	0382      	lsls	r2, r0, #14
 8003216:	d501      	bpl.n	800321c <HAL_ADC_ConfigChannel+0x258>
 8003218:	2211      	movs	r2, #17
 800321a:	e71d      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 800321c:	0342      	lsls	r2, r0, #13
 800321e:	d400      	bmi.n	8003222 <HAL_ADC_ConfigChannel+0x25e>
 8003220:	e71f      	b.n	8003062 <HAL_ADC_ConfigChannel+0x9e>
 8003222:	2212      	movs	r2, #18
 8003224:	e718      	b.n	8003058 <HAL_ADC_ConfigChannel+0x94>
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	07ffff00 	.word	0x07ffff00
 800322c:	40012708 	.word	0x40012708
 8003230:	b0001000 	.word	0xb0001000
 8003234:	b8004000 	.word	0xb8004000
 8003238:	b4002000 	.word	0xb4002000
 800323c:	fe3fffff 	.word	0xfe3fffff
 8003240:	20000000 	.word	0x20000000
 8003244:	00030d40 	.word	0x00030d40

08003248 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8003248:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800324a:	2201      	movs	r2, #1
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003250:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003252:	6803      	ldr	r3, [r0, #0]
{
 8003254:	0004      	movs	r4, r0
 8003256:	6899      	ldr	r1, [r3, #8]
 8003258:	420a      	tst	r2, r1
 800325a:	d11f      	bne.n	800329c <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800325c:	6898      	ldr	r0, [r3, #8]
 800325e:	4928      	ldr	r1, [pc, #160]	@ (8003300 <ADC_Enable+0xb8>)
 8003260:	4208      	tst	r0, r1
 8003262:	d11e      	bne.n	80032a2 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8003264:	6899      	ldr	r1, [r3, #8]
 8003266:	4827      	ldr	r0, [pc, #156]	@ (8003304 <ADC_Enable+0xbc>)
 8003268:	4001      	ands	r1, r0
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800326e:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <ADC_Enable+0xc0>)
 8003270:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	d50f      	bpl.n	8003296 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003276:	4b25      	ldr	r3, [pc, #148]	@ (800330c <ADC_Enable+0xc4>)
 8003278:	4925      	ldr	r1, [pc, #148]	@ (8003310 <ADC_Enable+0xc8>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	f7fc ff40 	bl	8000100 <__udivsi3>
 8003280:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003282:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8003284:	9b01      	ldr	r3, [sp, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <ADC_Enable+0x4e>
        wait_loop_index--;
 800328a:	9b01      	ldr	r3, [sp, #4]
 800328c:	3b01      	subs	r3, #1
 800328e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003296:	7e63      	ldrb	r3, [r4, #25]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10b      	bne.n	80032b4 <ADC_Enable+0x6c>
  return HAL_OK;
 800329c:	2000      	movs	r0, #0
}
 800329e:	b003      	add	sp, #12
 80032a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	2110      	movs	r1, #16
 80032a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80032a6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a8:	430b      	orrs	r3, r1
 80032aa:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80032ae:	4313      	orrs	r3, r2
 80032b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80032b2:	e7f4      	b.n	800329e <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80032b4:	f7ff fc58 	bl	8002b68 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b8:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80032ba:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	07d2      	lsls	r2, r2, #31
 80032c0:	d4ec      	bmi.n	800329c <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c2:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80032c4:	4f0f      	ldr	r7, [pc, #60]	@ (8003304 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4215      	tst	r5, r2
 80032ca:	d103      	bne.n	80032d4 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	403a      	ands	r2, r7
 80032d0:	432a      	orrs	r2, r5
 80032d2:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032d4:	f7ff fc48 	bl	8002b68 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032da:	1b80      	subs	r0, r0, r6
 80032dc:	2802      	cmp	r0, #2
 80032de:	d902      	bls.n	80032e6 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4215      	tst	r5, r2
 80032e4:	d003      	beq.n	80032ee <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4215      	tst	r5, r2
 80032ea:	d0ec      	beq.n	80032c6 <ADC_Enable+0x7e>
 80032ec:	e7d6      	b.n	800329c <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	2210      	movs	r2, #16
 80032f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80032f2:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f4:	4313      	orrs	r3, r2
 80032f6:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80032fa:	432b      	orrs	r3, r5
 80032fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 80032fe:	e7ce      	b.n	800329e <ADC_Enable+0x56>
 8003300:	80000017 	.word	0x80000017
 8003304:	7fffffe8 	.word	0x7fffffe8
 8003308:	40012708 	.word	0x40012708
 800330c:	20000000 	.word	0x20000000
 8003310:	00030d40 	.word	0x00030d40

08003314 <HAL_ADC_Start_DMA>:
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003318:	6805      	ldr	r5, [r0, #0]
{
 800331a:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331c:	68ae      	ldr	r6, [r5, #8]
 800331e:	4688      	mov	r8, r1
 8003320:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 8003322:	2002      	movs	r0, #2
{
 8003324:	b500      	push	{lr}
 8003326:	0776      	lsls	r6, r6, #29
 8003328:	d414      	bmi.n	8003354 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 800332a:	2254      	movs	r2, #84	@ 0x54
 800332c:	5ca3      	ldrb	r3, [r4, r2]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d010      	beq.n	8003354 <HAL_ADC_Start_DMA+0x40>
 8003332:	2301      	movs	r3, #1
 8003334:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003336:	68ea      	ldr	r2, [r5, #12]
 8003338:	4213      	tst	r3, r2
 800333a:	d106      	bne.n	800334a <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800333c:	68aa      	ldr	r2, [r5, #8]
 800333e:	4213      	tst	r3, r2
 8003340:	d131      	bne.n	80033a6 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003342:	2201      	movs	r2, #1
 8003344:	68eb      	ldr	r3, [r5, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800334a:	0020      	movs	r0, r4
 800334c:	f7ff ff7c 	bl	8003248 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003350:	2800      	cmp	r0, #0
 8003352:	d002      	beq.n	800335a <HAL_ADC_Start_DMA+0x46>
}
 8003354:	bc80      	pop	{r7}
 8003356:	46b8      	mov	r8, r7
 8003358:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800335a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800335c:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800335e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8003360:	401a      	ands	r2, r3
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4313      	orrs	r3, r2
 8003368:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800336a:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 800336c:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800336e:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003372:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003374:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003376:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003378:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800337a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800337c:	231c      	movs	r3, #28
 800337e:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8003380:	3338      	adds	r3, #56	@ 0x38
 8003382:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003384:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003386:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800338c:	4642      	mov	r2, r8
 800338e:	003b      	movs	r3, r7
 8003390:	3140      	adds	r1, #64	@ 0x40
 8003392:	f000 fa19 	bl	80037c8 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003396:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003398:	490a      	ldr	r1, [pc, #40]	@ (80033c4 <HAL_ADC_Start_DMA+0xb0>)
 800339a:	6893      	ldr	r3, [r2, #8]
 800339c:	400b      	ands	r3, r1
 800339e:	2104      	movs	r1, #4
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]
}
 80033a4:	e7d6      	b.n	8003354 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80033a6:	68ab      	ldr	r3, [r5, #8]
 80033a8:	4a06      	ldr	r2, [pc, #24]	@ (80033c4 <HAL_ADC_Start_DMA+0xb0>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	4303      	orrs	r3, r0
 80033ae:	60ab      	str	r3, [r5, #8]
}
 80033b0:	e7c7      	b.n	8003342 <HAL_ADC_Start_DMA+0x2e>
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	fffff0fe 	.word	0xfffff0fe
 80033b8:	08002de1 	.word	0x08002de1
 80033bc:	08002db1 	.word	0x08002db1
 80033c0:	08002dc5 	.word	0x08002dc5
 80033c4:	7fffffe8 	.word	0x7fffffe8

080033c8 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033c8:	2202      	movs	r2, #2
{
 80033ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033cc:	6803      	ldr	r3, [r0, #0]
{
 80033ce:	0004      	movs	r4, r0
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	420a      	tst	r2, r1
 80033d4:	d002      	beq.n	80033dc <ADC_Disable+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033d6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80033d8:	2000      	movs	r0, #0
}
 80033da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033dc:	2101      	movs	r1, #1
 80033de:	6898      	ldr	r0, [r3, #8]
 80033e0:	4201      	tst	r1, r0
 80033e2:	d0f9      	beq.n	80033d8 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033e4:	2705      	movs	r7, #5
 80033e6:	6898      	ldr	r0, [r3, #8]
 80033e8:	4007      	ands	r7, r0
 80033ea:	2f01      	cmp	r7, #1
 80033ec:	d008      	beq.n	8003400 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	2210      	movs	r2, #16
 80033f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	4313      	orrs	r3, r2
 80033f6:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80033fa:	430b      	orrs	r3, r1
 80033fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80033fe:	e7ec      	b.n	80033da <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	4812      	ldr	r0, [pc, #72]	@ (800344c <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003404:	2501      	movs	r5, #1
 8003406:	4001      	ands	r1, r0
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800340c:	2203      	movs	r2, #3
 800340e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003410:	f7ff fbaa 	bl	8002b68 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003414:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003416:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	421f      	tst	r7, r3
 800341c:	d0dc      	beq.n	80033d8 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800341e:	f7ff fba3 	bl	8002b68 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003422:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	2802      	cmp	r0, #2
 8003428:	d902      	bls.n	8003430 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4215      	tst	r5, r2
 800342e:	d103      	bne.n	8003438 <ADC_Disable+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	421d      	tst	r5, r3
 8003434:	d1f3      	bne.n	800341e <ADC_Disable+0x56>
 8003436:	e7cf      	b.n	80033d8 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003438:	2210      	movs	r2, #16
 800343a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	4313      	orrs	r3, r2
 8003440:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003442:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003444:	432b      	orrs	r3, r5
 8003446:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003448:	e7c7      	b.n	80033da <ADC_Disable+0x12>
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	7fffffe8 	.word	0x7fffffe8

08003450 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	46de      	mov	lr, fp
 8003454:	4657      	mov	r7, sl
 8003456:	464e      	mov	r6, r9
 8003458:	4645      	mov	r5, r8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800345a:	2300      	movs	r3, #0
{
 800345c:	b5e0      	push	{r5, r6, r7, lr}
 800345e:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8003460:	9302      	str	r3, [sp, #8]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003462:	3354      	adds	r3, #84	@ 0x54
 8003464:	5cc2      	ldrb	r2, [r0, r3]
{
 8003466:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003468:	2a01      	cmp	r2, #1
 800346a:	d100      	bne.n	800346e <HAL_ADCEx_Calibration_Start+0x1e>
 800346c:	e0af      	b.n	80035ce <HAL_ADCEx_Calibration_Start+0x17e>
 800346e:	2701      	movs	r7, #1
 8003470:	54c7      	strb	r7, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003472:	f7ff ffa9 	bl	80033c8 <ADC_Disable>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003476:	003d      	movs	r5, r7

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003478:	6823      	ldr	r3, [r4, #0]
  tmp_hal_status = ADC_Disable(hadc);
 800347a:	9001      	str	r0, [sp, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4015      	ands	r5, r2
 8003480:	4217      	tst	r7, r2
 8003482:	d136      	bne.n	80034f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003484:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003486:	4953      	ldr	r1, [pc, #332]	@ (80035d4 <HAL_ADCEx_Calibration_Start+0x184>)
  MODIFY_REG(ADCx->CR,
 8003488:	2080      	movs	r0, #128	@ 0x80
 800348a:	400a      	ands	r2, r1
 800348c:	3106      	adds	r1, #6
 800348e:	31ff      	adds	r1, #255	@ 0xff
 8003490:	430a      	orrs	r2, r1
 8003492:	65a2      	str	r2, [r4, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003494:	68da      	ldr	r2, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003496:	4950      	ldr	r1, [pc, #320]	@ (80035d8 <HAL_ADCEx_Calibration_Start+0x188>)
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003498:	4693      	mov	fp, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800349a:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800349c:	277f      	movs	r7, #127	@ 0x7f
 800349e:	400a      	ands	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CR,
 80034a2:	4a4e      	ldr	r2, [pc, #312]	@ (80035dc <HAL_ADCEx_Calibration_Start+0x18c>)
 80034a4:	2108      	movs	r1, #8
 80034a6:	4694      	mov	ip, r2

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
      {
        wait_loop_index++;
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034a8:	4a4d      	ldr	r2, [pc, #308]	@ (80035e0 <HAL_ADCEx_Calibration_Start+0x190>)
 80034aa:	0600      	lsls	r0, r0, #24
 80034ac:	4692      	mov	sl, r2
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80034ae:	22b4      	movs	r2, #180	@ 0xb4
 80034b0:	4691      	mov	r9, r2
 80034b2:	e006      	b.n	80034c2 <HAL_ADCEx_Calibration_Start+0x72>
 80034b4:	464a      	mov	r2, r9
 80034b6:	589a      	ldr	r2, [r3, r2]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80034b8:	3901      	subs	r1, #1
 80034ba:	403a      	ands	r2, r7

          return HAL_ERROR;
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80034bc:	18ad      	adds	r5, r5, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80034be:	2900      	cmp	r1, #0
 80034c0:	d026      	beq.n	8003510 <HAL_ADCEx_Calibration_Start+0xc0>
  MODIFY_REG(ADCx->CR,
 80034c2:	4666      	mov	r6, ip
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	4032      	ands	r2, r6
 80034c8:	4302      	orrs	r2, r0
 80034ca:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	2a00      	cmp	r2, #0
 80034d0:	daf0      	bge.n	80034b4 <HAL_ADCEx_Calibration_Start+0x64>
        wait_loop_index++;
 80034d2:	9a02      	ldr	r2, [sp, #8]
 80034d4:	3201      	adds	r2, #1
 80034d6:	9202      	str	r2, [sp, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034d8:	9a02      	ldr	r2, [sp, #8]
 80034da:	4552      	cmp	r2, sl
 80034dc:	d9f6      	bls.n	80034cc <HAL_ADCEx_Calibration_Start+0x7c>
          ADC_STATE_CLR_SET(hadc->State,
 80034de:	2212      	movs	r2, #18
 80034e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034e2:	4393      	bics	r3, r2
 80034e4:	3a02      	subs	r2, #2
 80034e6:	4313      	orrs	r3, r2
 80034e8:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80034ea:	2200      	movs	r2, #0
 80034ec:	2354      	movs	r3, #84	@ 0x54
 80034ee:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80034f0:	e059      	b.n	80035a6 <HAL_ADCEx_Calibration_Start+0x156>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	2210      	movs	r2, #16
 80034f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034f6:	4313      	orrs	r3, r2
 80034f8:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80034fa:	2354      	movs	r3, #84	@ 0x54
 80034fc:	2200      	movs	r2, #0
 80034fe:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8003500:	9801      	ldr	r0, [sp, #4]
 8003502:	b005      	add	sp, #20
 8003504:	bcf0      	pop	{r4, r5, r6, r7}
 8003506:	46bb      	mov	fp, r7
 8003508:	46b2      	mov	sl, r6
 800350a:	46a9      	mov	r9, r5
 800350c:	46a0      	mov	r8, r4
 800350e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4832      	ldr	r0, [pc, #200]	@ (80035dc <HAL_ADCEx_Calibration_Start+0x18c>)
    calibration_factor_accumulated /= calibration_index;
 8003514:	08e9      	lsrs	r1, r5, #3
 8003516:	4002      	ands	r2, r0
 8003518:	2001      	movs	r0, #1
 800351a:	4302      	orrs	r2, r0
 800351c:	609a      	str	r2, [r3, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800351e:	2280      	movs	r2, #128	@ 0x80
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003520:	691d      	ldr	r5, [r3, #16]
 8003522:	05d2      	lsls	r2, r2, #23
 8003524:	4295      	cmp	r5, r2
 8003526:	d218      	bcs.n	800355a <HAL_ADCEx_Calibration_Start+0x10a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003528:	25f0      	movs	r5, #240	@ 0xf0
 800352a:	4a2e      	ldr	r2, [pc, #184]	@ (80035e4 <HAL_ADCEx_Calibration_Start+0x194>)
 800352c:	03ad      	lsls	r5, r5, #14
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	402a      	ands	r2, r5
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003532:	25e0      	movs	r5, #224	@ 0xe0
 8003534:	036d      	lsls	r5, r5, #13
 8003536:	42aa      	cmp	r2, r5
 8003538:	d30f      	bcc.n	800355a <HAL_ADCEx_Calibration_Start+0x10a>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800353a:	0c92      	lsrs	r2, r2, #18
 800353c:	3a03      	subs	r2, #3
 800353e:	4090      	lsls	r0, r2
 8003540:	9003      	str	r0, [sp, #12]
        delay_cpu_cycles >>= 1UL;
 8003542:	9a03      	ldr	r2, [sp, #12]
 8003544:	0852      	lsrs	r2, r2, #1
 8003546:	9203      	str	r2, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 8003548:	9a03      	ldr	r2, [sp, #12]
 800354a:	2a00      	cmp	r2, #0
 800354c:	d005      	beq.n	800355a <HAL_ADCEx_Calibration_Start+0x10a>
          delay_cpu_cycles--;
 800354e:	9a03      	ldr	r2, [sp, #12]
 8003550:	3a01      	subs	r2, #1
 8003552:	9203      	str	r2, [sp, #12]
        while (delay_cpu_cycles != 0UL)
 8003554:	9a03      	ldr	r2, [sp, #12]
 8003556:	2a00      	cmp	r2, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADCEx_Calibration_Start+0xfe>
  MODIFY_REG(ADCx->CALFACT,
 800355a:	22b4      	movs	r2, #180	@ 0xb4
 800355c:	207f      	movs	r0, #127	@ 0x7f
 800355e:	589d      	ldr	r5, [r3, r2]
 8003560:	4385      	bics	r5, r0
 8003562:	430d      	orrs	r5, r1
 8003564:	509d      	str	r5, [r3, r2]
  MODIFY_REG(ADCx->CR,
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	491c      	ldr	r1, [pc, #112]	@ (80035dc <HAL_ADCEx_Calibration_Start+0x18c>)
 800356a:	400a      	ands	r2, r1
 800356c:	2102      	movs	r1, #2
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003572:	f7ff faf9 	bl	8002b68 <HAL_GetTick>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003576:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003578:	0005      	movs	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	07d2      	lsls	r2, r2, #31
 800357e:	d519      	bpl.n	80035b4 <HAL_ADCEx_Calibration_Start+0x164>
 8003580:	2301      	movs	r3, #1
 8003582:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003584:	f7ff faf0 	bl	8002b68 <HAL_GetTick>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003588:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800358a:	1b40      	subs	r0, r0, r5
 800358c:	2802      	cmp	r0, #2
 800358e:	d90d      	bls.n	80035ac <HAL_ADCEx_Calibration_Start+0x15c>
 8003590:	2201      	movs	r2, #1
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	420a      	tst	r2, r1
 8003596:	d009      	beq.n	80035ac <HAL_ADCEx_Calibration_Start+0x15c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003598:	2110      	movs	r1, #16
 800359a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800359c:	430b      	orrs	r3, r1
 800359e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80035a2:	4313      	orrs	r3, r2
 80035a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	e7a9      	b.n	8003500 <HAL_ADCEx_Calibration_Start+0xb0>
 80035ac:	4641      	mov	r1, r8
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	4211      	tst	r1, r2
 80035b2:	d1e7      	bne.n	8003584 <HAL_ADCEx_Calibration_Start+0x134>
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80035b4:	465f      	mov	r7, fp
 80035b6:	490c      	ldr	r1, [pc, #48]	@ (80035e8 <HAL_ADCEx_Calibration_Start+0x198>)
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80035b8:	68da      	ldr	r2, [r3, #12]
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80035ba:	400f      	ands	r7, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80035bc:	4317      	orrs	r7, r2
    ADC_STATE_CLR_SET(hadc->State,
 80035be:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80035c0:	60df      	str	r7, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80035c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035c4:	4393      	bics	r3, r2
 80035c6:	3a02      	subs	r2, #2
 80035c8:	4313      	orrs	r3, r2
 80035ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80035cc:	e795      	b.n	80034fa <HAL_ADCEx_Calibration_Start+0xaa>
  __HAL_LOCK(hadc);
 80035ce:	2302      	movs	r3, #2
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	e795      	b.n	8003500 <HAL_ADCEx_Calibration_Start+0xb0>
 80035d4:	fffffefd 	.word	0xfffffefd
 80035d8:	ffff7ffc 	.word	0xffff7ffc
 80035dc:	7fffffe8 	.word	0x7fffffe8
 80035e0:	0002f1ff 	.word	0x0002f1ff
 80035e4:	40012708 	.word	0x40012708
 80035e8:	00008003 	.word	0x00008003

080035ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035ec:	4770      	bx	lr
 80035ee:	46c0      	nop			@ (mov r8, r8)

080035f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80035f0:	4770      	bx	lr
 80035f2:	46c0      	nop			@ (mov r8, r8)

080035f4 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80035f4:	4770      	bx	lr
 80035f6:	46c0      	nop			@ (mov r8, r8)

080035f8 <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 80035f8:	4770      	bx	lr
 80035fa:	46c0      	nop			@ (mov r8, r8)

080035fc <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035fc:	22ff      	movs	r2, #255	@ 0xff
 80035fe:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b510      	push	{r4, lr}
 8003602:	0014      	movs	r4, r2
 8003604:	4003      	ands	r3, r0
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800360a:	0189      	lsls	r1, r1, #6
 800360c:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800360e:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003610:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8003612:	2800      	cmp	r0, #0
 8003614:	db0b      	blt.n	800362e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003616:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <HAL_NVIC_SetPriority+0x4c>)
 8003618:	21c0      	movs	r1, #192	@ 0xc0
 800361a:	469c      	mov	ip, r3
 800361c:	0880      	lsrs	r0, r0, #2
 800361e:	0080      	lsls	r0, r0, #2
 8003620:	4460      	add	r0, ip
 8003622:	0089      	lsls	r1, r1, #2
 8003624:	5843      	ldr	r3, [r0, r1]
 8003626:	4023      	ands	r3, r4
 8003628:	4313      	orrs	r3, r2
 800362a:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800362c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800362e:	230f      	movs	r3, #15
 8003630:	4906      	ldr	r1, [pc, #24]	@ (800364c <HAL_NVIC_SetPriority+0x50>)
 8003632:	4003      	ands	r3, r0
 8003634:	468c      	mov	ip, r1
 8003636:	3b08      	subs	r3, #8
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4463      	add	r3, ip
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	400c      	ands	r4, r1
 8003642:	4314      	orrs	r4, r2
 8003644:	61dc      	str	r4, [r3, #28]
 8003646:	e7f1      	b.n	800362c <HAL_NVIC_SetPriority+0x30>
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003650:	2800      	cmp	r0, #0
 8003652:	db05      	blt.n	8003660 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003654:	221f      	movs	r2, #31
 8003656:	2301      	movs	r3, #1
 8003658:	4002      	ands	r2, r0
 800365a:	4093      	lsls	r3, r2
 800365c:	4a01      	ldr	r2, [pc, #4]	@ (8003664 <HAL_NVIC_EnableIRQ+0x14>)
 800365e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003660:	4770      	bx	lr
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	e000e100 	.word	0xe000e100

08003668 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	2280      	movs	r2, #128	@ 0x80
 800366a:	1e43      	subs	r3, r0, #1
 800366c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800366e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	4293      	cmp	r3, r2
 8003672:	d20e      	bcs.n	8003692 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003674:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003678:	4807      	ldr	r0, [pc, #28]	@ (8003698 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800367c:	6a03      	ldr	r3, [r0, #32]
 800367e:	0609      	lsls	r1, r1, #24
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	430b      	orrs	r3, r1
 8003686:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800368a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	3307      	adds	r3, #7
 8003690:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003692:	4770      	bx	lr
 8003694:	e000e010 	.word	0xe000e010
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800369e:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80036a0:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80036a2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036a4:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80036a6:	2c00      	cmp	r4, #0
 80036a8:	d002      	beq.n	80036b0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036aa:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80036ac:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80036ae:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80036b0:	241c      	movs	r4, #28
 80036b2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80036b4:	4e08      	ldr	r6, [pc, #32]	@ (80036d8 <DMA_SetConfig+0x3c>)
 80036b6:	4025      	ands	r5, r4
 80036b8:	3c1b      	subs	r4, #27
 80036ba:	40ac      	lsls	r4, r5
 80036bc:	6877      	ldr	r7, [r6, #4]
 80036be:	433c      	orrs	r4, r7
 80036c0:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036c2:	6804      	ldr	r4, [r0, #0]
 80036c4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c6:	6883      	ldr	r3, [r0, #8]
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d002      	beq.n	80036d2 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80036cc:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80036ce:	60e2      	str	r2, [r4, #12]
  }
}
 80036d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80036d2:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80036d4:	60e1      	str	r1, [r4, #12]
 80036d6:	e7fb      	b.n	80036d0 <DMA_SetConfig+0x34>
 80036d8:	40020000 	.word	0x40020000

080036dc <HAL_DMA_Init>:
{
 80036dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036de:	46c6      	mov	lr, r8
 80036e0:	0004      	movs	r4, r0
 80036e2:	b500      	push	{lr}
  if (hdma == NULL)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d060      	beq.n	80037aa <HAL_DMA_Init+0xce>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036e8:	6805      	ldr	r5, [r0, #0]
 80036ea:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_DMA_Init+0xd4>)
 80036ec:	2114      	movs	r1, #20
 80036ee:	18e8      	adds	r0, r5, r3
 80036f0:	f7fc fd06 	bl	8000100 <__udivsi3>
 80036f4:	0083      	lsls	r3, r0, #2
 80036f6:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	2202      	movs	r2, #2
 80036fa:	2325      	movs	r3, #37	@ 0x25
 80036fc:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036fe:	682b      	ldr	r3, [r5, #0]
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <HAL_DMA_Init+0xd8>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003702:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003704:	4013      	ands	r3, r2
 8003706:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	6921      	ldr	r1, [r4, #16]
 800370c:	4333      	orrs	r3, r6
 800370e:	430b      	orrs	r3, r1
 8003710:	6961      	ldr	r1, [r4, #20]
 8003712:	682a      	ldr	r2, [r5, #0]
 8003714:	430b      	orrs	r3, r1
 8003716:	69a1      	ldr	r1, [r4, #24]
 8003718:	430b      	orrs	r3, r1
 800371a:	69e1      	ldr	r1, [r4, #28]
 800371c:	430b      	orrs	r3, r1
 800371e:	6a21      	ldr	r1, [r4, #32]
 8003720:	430b      	orrs	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003726:	4b24      	ldr	r3, [pc, #144]	@ (80037b8 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003728:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800372a:	469c      	mov	ip, r3
 800372c:	4460      	add	r0, ip
 800372e:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003730:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003732:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003734:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003736:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003738:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800373a:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800373c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800373e:	f7fc fcdf 	bl	8000100 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003742:	231f      	movs	r3, #31
 8003744:	2201      	movs	r2, #1
 8003746:	4003      	ands	r3, r0
 8003748:	0010      	movs	r0, r2
 800374a:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800374c:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800374e:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003750:	01db      	lsls	r3, r3, #7
 8003752:	429e      	cmp	r6, r3
 8003754:	d01f      	beq.n	8003796 <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003756:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003758:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800375a:	6861      	ldr	r1, [r4, #4]
 800375c:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800375e:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003760:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003762:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003764:	2903      	cmp	r1, #3
 8003766:	d81b      	bhi.n	80037a0 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003768:	4915      	ldr	r1, [pc, #84]	@ (80037c0 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800376a:	4816      	ldr	r0, [pc, #88]	@ (80037c4 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800376c:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800376e:	3b01      	subs	r3, #1
 8003770:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003772:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003774:	0089      	lsls	r1, r1, #2
 8003776:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003778:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800377a:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800377e:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003782:	2225      	movs	r2, #37	@ 0x25
 8003784:	2101      	movs	r1, #1
  return HAL_OK;
 8003786:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003788:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800378a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800378c:	3a01      	subs	r2, #1
 800378e:	54a3      	strb	r3, [r4, r2]
}
 8003790:	bc80      	pop	{r7}
 8003792:	46b8      	mov	r8, r7
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003796:	2300      	movs	r3, #0
 8003798:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800379a:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379c:	4643      	mov	r3, r8
 800379e:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80037a4:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80037a8:	e7ea      	b.n	8003780 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
 80037ac:	e7f0      	b.n	8003790 <HAL_DMA_Init+0xb4>
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	bffdfff8 	.word	0xbffdfff8
 80037b4:	ffff800f 	.word	0xffff800f
 80037b8:	10008200 	.word	0x10008200
 80037bc:	40020880 	.word	0x40020880
 80037c0:	1000823f 	.word	0x1000823f
 80037c4:	40020940 	.word	0x40020940

080037c8 <HAL_DMA_Start_IT>:
{
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80037cc:	2024      	movs	r0, #36	@ 0x24
 80037ce:	5c25      	ldrb	r5, [r4, r0]
 80037d0:	2d01      	cmp	r5, #1
 80037d2:	d035      	beq.n	8003840 <HAL_DMA_Start_IT+0x78>
 80037d4:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80037d6:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 80037d8:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80037da:	5da5      	ldrb	r5, [r4, r6]
 80037dc:	b2ef      	uxtb	r7, r5
 80037de:	2d01      	cmp	r5, #1
 80037e0:	d005      	beq.n	80037ee <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037e2:	2380      	movs	r3, #128	@ 0x80
 80037e4:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80037e6:	2300      	movs	r3, #0
 80037e8:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 80037ea:	2001      	movs	r0, #1
}
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ee:	3822      	subs	r0, #34	@ 0x22
 80037f0:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80037f4:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80037f8:	6828      	ldr	r0, [r5, #0]
 80037fa:	43b8      	bics	r0, r7
 80037fc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037fe:	0020      	movs	r0, r4
 8003800:	f7ff ff4c 	bl	800369c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003804:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01c      	beq.n	8003844 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380a:	220e      	movs	r2, #14
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003812:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	03db      	lsls	r3, r3, #15
 8003818:	d504      	bpl.n	8003824 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	6811      	ldr	r1, [r2, #0]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	430b      	orrs	r3, r1
 8003822:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003824:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	0052      	lsls	r2, r2, #1
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003834:	2201      	movs	r2, #1
 8003836:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800383a:	4313      	orrs	r3, r2
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	e7d5      	b.n	80037ec <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8003840:	2002      	movs	r0, #2
 8003842:	e7d3      	b.n	80037ec <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003844:	2204      	movs	r2, #4
 8003846:	682b      	ldr	r3, [r5, #0]
 8003848:	4393      	bics	r3, r2
 800384a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	3206      	adds	r2, #6
 8003850:	4313      	orrs	r3, r2
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	e7dd      	b.n	8003812 <HAL_DMA_Start_IT+0x4a>
 8003856:	46c0      	nop			@ (mov r8, r8)

08003858 <HAL_DMA_Abort>:
{
 8003858:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 800385a:	2800      	cmp	r0, #0
 800385c:	d032      	beq.n	80038c4 <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800385e:	2325      	movs	r3, #37	@ 0x25
 8003860:	5cc3      	ldrb	r3, [r0, r3]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d129      	bne.n	80038ba <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003866:	210e      	movs	r1, #14
 8003868:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800386a:	4c17      	ldr	r4, [pc, #92]	@ (80038c8 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386c:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800386e:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003870:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003872:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003874:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003876:	680b      	ldr	r3, [r1, #0]
 8003878:	4023      	ands	r3, r4
 800387a:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800387c:	2301      	movs	r3, #1
 800387e:	6811      	ldr	r1, [r2, #0]
 8003880:	4399      	bics	r1, r3
 8003882:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003884:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003886:	4911      	ldr	r1, [pc, #68]	@ (80038cc <HAL_DMA_Abort+0x74>)
 8003888:	4032      	ands	r2, r6
 800388a:	4093      	lsls	r3, r2
 800388c:	684d      	ldr	r5, [r1, #4]
 800388e:	432b      	orrs	r3, r5
 8003890:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003892:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003894:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003896:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003898:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4022      	ands	r2, r4
 80038a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80038a6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80038a8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	2325      	movs	r3, #37	@ 0x25
 80038ac:	2201      	movs	r2, #1
 80038ae:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80038b0:	2200      	movs	r2, #0
 80038b2:	3b01      	subs	r3, #1
 80038b4:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80038b6:	2000      	movs	r0, #0
}
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ba:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80038bc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038be:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80038c0:	3320      	adds	r3, #32
 80038c2:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
 80038c6:	e7f7      	b.n	80038b8 <HAL_DMA_Abort+0x60>
 80038c8:	fffffeff 	.word	0xfffffeff
 80038cc:	40020000 	.word	0x40020000

080038d0 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038d0:	2325      	movs	r3, #37	@ 0x25
{
 80038d2:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038d4:	5cc3      	ldrb	r3, [r0, r3]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d003      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038da:	2304      	movs	r3, #4
 80038dc:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80038de:	2001      	movs	r0, #1
}
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e2:	210e      	movs	r1, #14
 80038e4:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80038e6:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e8:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ea:	4c15      	ldr	r4, [pc, #84]	@ (8003940 <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ec:	438b      	bics	r3, r1
 80038ee:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80038f0:	2301      	movs	r3, #1
 80038f2:	6811      	ldr	r1, [r2, #0]
 80038f4:	4399      	bics	r1, r3
 80038f6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038f8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80038fa:	680a      	ldr	r2, [r1, #0]
 80038fc:	4022      	ands	r2, r4
 80038fe:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003900:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003902:	4910      	ldr	r1, [pc, #64]	@ (8003944 <HAL_DMA_Abort_IT+0x74>)
 8003904:	4032      	ands	r2, r6
 8003906:	4093      	lsls	r3, r2
 8003908:	684d      	ldr	r5, [r1, #4]
 800390a:	432b      	orrs	r3, r5
 800390c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800390e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003910:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003912:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003914:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4022      	ands	r2, r4
 800391e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003920:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003922:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003924:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003926:	2325      	movs	r3, #37	@ 0x25
 8003928:	2201      	movs	r2, #1
 800392a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800392c:	2200      	movs	r2, #0
 800392e:	3b01      	subs	r3, #1
 8003930:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8003932:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d000      	beq.n	800393a <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8003938:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2000      	movs	r0, #0
 800393c:	e7d0      	b.n	80038e0 <HAL_DMA_Abort_IT+0x10>
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	fffffeff 	.word	0xfffffeff
 8003944:	40020000 	.word	0x40020000

08003948 <HAL_DMA_IRQHandler>:
{
 8003948:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800394a:	211c      	movs	r1, #28
 800394c:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 800394e:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8003950:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8003952:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003954:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003956:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003958:	400b      	ands	r3, r1
 800395a:	0021      	movs	r1, r4
 800395c:	4099      	lsls	r1, r3
 800395e:	420a      	tst	r2, r1
 8003960:	d010      	beq.n	8003984 <HAL_DMA_IRQHandler+0x3c>
 8003962:	422c      	tst	r4, r5
 8003964:	d00e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003966:	6833      	ldr	r3, [r6, #0]
 8003968:	069b      	lsls	r3, r3, #26
 800396a:	d402      	bmi.n	8003972 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	43a3      	bics	r3, r4
 8003970:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_DMA_IRQHandler+0xb4>)
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4311      	orrs	r1, r2
 8003978:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800397a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800397c:	2b00      	cmp	r3, #0
 800397e:	d000      	beq.n	8003982 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8003980:	4798      	blx	r3
}
 8003982:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003984:	2402      	movs	r4, #2
 8003986:	0021      	movs	r1, r4
 8003988:	4099      	lsls	r1, r3
 800398a:	420a      	tst	r2, r1
 800398c:	d017      	beq.n	80039be <HAL_DMA_IRQHandler+0x76>
 800398e:	422c      	tst	r4, r5
 8003990:	d015      	beq.n	80039be <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003992:	6833      	ldr	r3, [r6, #0]
 8003994:	069b      	lsls	r3, r3, #26
 8003996:	d406      	bmi.n	80039a6 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003998:	220a      	movs	r2, #10
 800399a:	6833      	ldr	r3, [r6, #0]
 800399c:	4393      	bics	r3, r2
 800399e:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80039a0:	2325      	movs	r3, #37	@ 0x25
 80039a2:	3a09      	subs	r2, #9
 80039a4:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <HAL_DMA_IRQHandler+0xb4>)
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4311      	orrs	r1, r2
 80039ac:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2324      	movs	r3, #36	@ 0x24
 80039b2:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80039b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0e3      	beq.n	8003982 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80039ba:	4798      	blx	r3
  return;
 80039bc:	e7e1      	b.n	8003982 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039be:	2108      	movs	r1, #8
 80039c0:	000c      	movs	r4, r1
 80039c2:	409c      	lsls	r4, r3
 80039c4:	4222      	tst	r2, r4
 80039c6:	d0dc      	beq.n	8003982 <HAL_DMA_IRQHandler+0x3a>
 80039c8:	4229      	tst	r1, r5
 80039ca:	d0da      	beq.n	8003982 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039cc:	6832      	ldr	r2, [r6, #0]
 80039ce:	3106      	adds	r1, #6
 80039d0:	438a      	bics	r2, r1
 80039d2:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80039d4:	2201      	movs	r2, #1
 80039d6:	0015      	movs	r5, r2
 80039d8:	409d      	lsls	r5, r3
 80039da:	002b      	movs	r3, r5
 80039dc:	4907      	ldr	r1, [pc, #28]	@ (80039fc <HAL_DMA_IRQHandler+0xb4>)
 80039de:	684c      	ldr	r4, [r1, #4]
 80039e0:	4323      	orrs	r3, r4
 80039e2:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039e4:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039e6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80039e8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80039ea:	2200      	movs	r2, #0
 80039ec:	3b01      	subs	r3, #1
 80039ee:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80039f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0c5      	beq.n	8003982 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80039f6:	4798      	blx	r3
  return;
 80039f8:	e7c3      	b.n	8003982 <HAL_DMA_IRQHandler+0x3a>
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	40020000 	.word	0x40020000

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a02:	46de      	mov	lr, fp
 8003a04:	4657      	mov	r7, sl
 8003a06:	464e      	mov	r6, r9
 8003a08:	4645      	mov	r5, r8
 8003a0a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0c:	680c      	ldr	r4, [r1, #0]
{
 8003a0e:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8003a10:	2300      	movs	r3, #0
{
 8003a12:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a14:	2c00      	cmp	r4, #0
 8003a16:	d068      	beq.n	8003aea <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	4694      	mov	ip, r2
 8003a1e:	4022      	ands	r2, r4
 8003a20:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8003a22:	4662      	mov	r2, ip
 8003a24:	4214      	tst	r4, r2
 8003a26:	d05c      	beq.n	8003ae2 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a28:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a2a:	465a      	mov	r2, fp
 8003a2c:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a2e:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	6855      	ldr	r5, [r2, #4]
 8003a32:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a34:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a36:	402a      	ands	r2, r5
 8003a38:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3a:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a3c:	2e01      	cmp	r6, #1
 8003a3e:	d95b      	bls.n	8003af8 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a40:	2a03      	cmp	r2, #3
 8003a42:	d000      	beq.n	8003a46 <HAL_GPIO_Init+0x46>
 8003a44:	e0ad      	b.n	8003ba2 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a46:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003a48:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a4a:	9900      	ldr	r1, [sp, #0]
 8003a4c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a4e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8003a50:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a52:	22c0      	movs	r2, #192	@ 0xc0
 8003a54:	0292      	lsls	r2, r2, #10
 8003a56:	4215      	tst	r5, r2
 8003a58:	d043      	beq.n	8003ae2 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a5a:	2703      	movs	r7, #3
 8003a5c:	260f      	movs	r6, #15
 8003a5e:	495d      	ldr	r1, [pc, #372]	@ (8003bd4 <HAL_GPIO_Init+0x1d4>)
 8003a60:	401f      	ands	r7, r3
 8003a62:	468c      	mov	ip, r1
 8003a64:	00ff      	lsls	r7, r7, #3
 8003a66:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8003a68:	089a      	lsrs	r2, r3, #2
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	4462      	add	r2, ip
 8003a6e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a70:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a72:	26a0      	movs	r6, #160	@ 0xa0
 8003a74:	05f6      	lsls	r6, r6, #23
 8003a76:	42b0      	cmp	r0, r6
 8003a78:	d00e      	beq.n	8003a98 <HAL_GPIO_Init+0x98>
 8003a7a:	4e57      	ldr	r6, [pc, #348]	@ (8003bd8 <HAL_GPIO_Init+0x1d8>)
 8003a7c:	42b0      	cmp	r0, r6
 8003a7e:	d100      	bne.n	8003a82 <HAL_GPIO_Init+0x82>
 8003a80:	e0a0      	b.n	8003bc4 <HAL_GPIO_Init+0x1c4>
 8003a82:	4e56      	ldr	r6, [pc, #344]	@ (8003bdc <HAL_GPIO_Init+0x1dc>)
 8003a84:	42b0      	cmp	r0, r6
 8003a86:	d100      	bne.n	8003a8a <HAL_GPIO_Init+0x8a>
 8003a88:	e0a0      	b.n	8003bcc <HAL_GPIO_Init+0x1cc>
 8003a8a:	4e55      	ldr	r6, [pc, #340]	@ (8003be0 <HAL_GPIO_Init+0x1e0>)
 8003a8c:	42b0      	cmp	r0, r6
 8003a8e:	d100      	bne.n	8003a92 <HAL_GPIO_Init+0x92>
 8003a90:	e094      	b.n	8003bbc <HAL_GPIO_Init+0x1bc>
 8003a92:	2605      	movs	r6, #5
 8003a94:	40be      	lsls	r6, r7
 8003a96:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a98:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8003a9a:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8003a9c:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8003a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd4 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa0:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8003aa2:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8003aa4:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aa6:	4235      	tst	r5, r6
 8003aa8:	d000      	beq.n	8003aac <HAL_GPIO_Init+0xac>
 8003aaa:	e077      	b.n	8003b9c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003aac:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003aae:	4e49      	ldr	r6, [pc, #292]	@ (8003bd4 <HAL_GPIO_Init+0x1d4>)
 8003ab0:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8003ab2:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ab4:	2680      	movs	r6, #128	@ 0x80
 8003ab6:	03b6      	lsls	r6, r6, #14
 8003ab8:	4235      	tst	r5, r6
 8003aba:	d16c      	bne.n	8003b96 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8003abc:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003abe:	4e45      	ldr	r6, [pc, #276]	@ (8003bd4 <HAL_GPIO_Init+0x1d4>)
 8003ac0:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ac2:	2284      	movs	r2, #132	@ 0x84
 8003ac4:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac6:	03af      	lsls	r7, r5, #14
 8003ac8:	d462      	bmi.n	8003b90 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8003aca:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003acc:	2784      	movs	r7, #132	@ 0x84
 8003ace:	4e41      	ldr	r6, [pc, #260]	@ (8003bd4 <HAL_GPIO_Init+0x1d4>)
 8003ad0:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8003ad2:	2280      	movs	r2, #128	@ 0x80
 8003ad4:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ad6:	03ed      	lsls	r5, r5, #15
 8003ad8:	d456      	bmi.n	8003b88 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8003ada:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8003adc:	2180      	movs	r1, #128	@ 0x80
 8003ade:	4d3d      	ldr	r5, [pc, #244]	@ (8003bd4 <HAL_GPIO_Init+0x1d4>)
 8003ae0:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae2:	0022      	movs	r2, r4
      }
    }

    position++;
 8003ae4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae6:	40da      	lsrs	r2, r3
 8003ae8:	d196      	bne.n	8003a18 <HAL_GPIO_Init+0x18>
  }
}
 8003aea:	b003      	add	sp, #12
 8003aec:	bcf0      	pop	{r4, r5, r6, r7}
 8003aee:	46bb      	mov	fp, r7
 8003af0:	46b2      	mov	sl, r6
 8003af2:	46a9      	mov	r9, r5
 8003af4:	46a0      	mov	r8, r4
 8003af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8003af8:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003afa:	000e      	movs	r6, r1
 8003afc:	9900      	ldr	r1, [sp, #0]
 8003afe:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b00:	4659      	mov	r1, fp
 8003b02:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b04:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b06:	000e      	movs	r6, r1
 8003b08:	40be      	lsls	r6, r7
 8003b0a:	46b0      	mov	r8, r6
 8003b0c:	464e      	mov	r6, r9
 8003b0e:	4641      	mov	r1, r8
 8003b10:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8003b12:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b14:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b16:	000e      	movs	r6, r1
 8003b18:	4661      	mov	r1, ip
 8003b1a:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b1c:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b1e:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b20:	000e      	movs	r6, r1
 8003b22:	2101      	movs	r1, #1
 8003b24:	400e      	ands	r6, r1
 8003b26:	409e      	lsls	r6, r3
 8003b28:	46b4      	mov	ip, r6
 8003b2a:	4646      	mov	r6, r8
 8003b2c:	4661      	mov	r1, ip
 8003b2e:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8003b30:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8003b32:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b34:	000e      	movs	r6, r1
 8003b36:	9900      	ldr	r1, [sp, #0]
 8003b38:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b3a:	4659      	mov	r1, fp
 8003b3c:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b3e:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b40:	000e      	movs	r6, r1
 8003b42:	40be      	lsls	r6, r7
 8003b44:	46b4      	mov	ip, r6
 8003b46:	4646      	mov	r6, r8
 8003b48:	4661      	mov	r1, ip
 8003b4a:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8003b4c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4e:	2a02      	cmp	r2, #2
 8003b50:	d000      	beq.n	8003b54 <HAL_GPIO_Init+0x154>
 8003b52:	e778      	b.n	8003a46 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8003b54:	08d9      	lsrs	r1, r3, #3
 8003b56:	0089      	lsls	r1, r1, #2
 8003b58:	468c      	mov	ip, r1
 8003b5a:	4484      	add	ip, r0
 8003b5c:	4661      	mov	r1, ip
 8003b5e:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b60:	2107      	movs	r1, #7
 8003b62:	4019      	ands	r1, r3
 8003b64:	0089      	lsls	r1, r1, #2
 8003b66:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8003b68:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6a:	210f      	movs	r1, #15
 8003b6c:	4646      	mov	r6, r8
 8003b6e:	40b1      	lsls	r1, r6
 8003b70:	9e01      	ldr	r6, [sp, #4]
 8003b72:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b74:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b76:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b78:	4646      	mov	r6, r8
 8003b7a:	6909      	ldr	r1, [r1, #16]
 8003b7c:	40b1      	lsls	r1, r6
 8003b7e:	9e01      	ldr	r6, [sp, #4]
 8003b80:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8003b82:	4661      	mov	r1, ip
 8003b84:	620e      	str	r6, [r1, #32]
 8003b86:	e75e      	b.n	8003a46 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8003b88:	4651      	mov	r1, sl
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	000a      	movs	r2, r1
 8003b8e:	e7a5      	b.n	8003adc <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8003b90:	4656      	mov	r6, sl
 8003b92:	4332      	orrs	r2, r6
 8003b94:	e79a      	b.n	8003acc <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8003b96:	4656      	mov	r6, sl
 8003b98:	4332      	orrs	r2, r6
 8003b9a:	e790      	b.n	8003abe <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8003b9c:	4656      	mov	r6, sl
 8003b9e:	4332      	orrs	r2, r6
 8003ba0:	e785      	b.n	8003aae <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 8003ba2:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ba4:	9e00      	ldr	r6, [sp, #0]
 8003ba6:	4031      	ands	r1, r6
 8003ba8:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003baa:	4659      	mov	r1, fp
 8003bac:	6889      	ldr	r1, [r1, #8]
 8003bae:	40b9      	lsls	r1, r7
 8003bb0:	468c      	mov	ip, r1
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	4666      	mov	r6, ip
 8003bb6:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8003bb8:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bba:	e744      	b.n	8003a46 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003bbc:	2603      	movs	r6, #3
 8003bbe:	40be      	lsls	r6, r7
 8003bc0:	4331      	orrs	r1, r6
 8003bc2:	e769      	b.n	8003a98 <HAL_GPIO_Init+0x98>
 8003bc4:	2601      	movs	r6, #1
 8003bc6:	40be      	lsls	r6, r7
 8003bc8:	4331      	orrs	r1, r6
 8003bca:	e765      	b.n	8003a98 <HAL_GPIO_Init+0x98>
 8003bcc:	2602      	movs	r6, #2
 8003bce:	40be      	lsls	r6, r7
 8003bd0:	4331      	orrs	r1, r6
 8003bd2:	e761      	b.n	8003a98 <HAL_GPIO_Init+0x98>
 8003bd4:	40021800 	.word	0x40021800
 8003bd8:	50000400 	.word	0x50000400
 8003bdc:	50000800 	.word	0x50000800
 8003be0:	50000c00 	.word	0x50000c00

08003be4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003be4:	6900      	ldr	r0, [r0, #16]
 8003be6:	4008      	ands	r0, r1
 8003be8:	1e43      	subs	r3, r0, #1
 8003bea:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003bec:	b2c0      	uxtb	r0, r0
}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bf6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bf8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003bfa:	e7fc      	b.n	8003bf6 <HAL_GPIO_WritePin+0x6>

08003bfc <HAL_GPIO_EXTI_Falling_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
 8003bfc:	4770      	bx	lr
 8003bfe:	46c0      	nop			@ (mov r8, r8)

08003c00 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8003c02:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003c04:	68da      	ldr	r2, [r3, #12]
{
 8003c06:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003c08:	4210      	tst	r0, r2
 8003c0a:	d104      	bne.n	8003c16 <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003c0c:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	4222      	tst	r2, r4
 8003c12:	d107      	bne.n	8003c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
}
 8003c14:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003c16:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003c18:	f7fd feba 	bl	8001990 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003c1c:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	4222      	tst	r2, r4
 8003c22:	d0f7      	beq.n	8003c14 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003c24:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003c26:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003c28:	f7ff ffe8 	bl	8003bfc <HAL_GPIO_EXTI_Falling_Callback>
}
 8003c2c:	e7f2      	b.n	8003c14 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	40021800 	.word	0x40021800

08003c34 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003c38:	d023      	beq.n	8003c82 <HAL_IWDG_Init+0x4e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003c3a:	6803      	ldr	r3, [r0, #0]
 8003c3c:	4a14      	ldr	r2, [pc, #80]	@ (8003c90 <HAL_IWDG_Init+0x5c>)
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003c40:	4a14      	ldr	r2, [pc, #80]	@ (8003c94 <HAL_IWDG_Init+0x60>)
 8003c42:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003c44:	6842      	ldr	r2, [r0, #4]
 8003c46:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003c48:	6882      	ldr	r2, [r0, #8]
 8003c4a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003c4c:	f7fe ff8c 	bl	8002b68 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c50:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003c52:	0006      	movs	r6, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	0752      	lsls	r2, r2, #29
 8003c58:	d00c      	beq.n	8003c74 <HAL_IWDG_Init+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c5a:	2507      	movs	r5, #7
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003c5c:	f7fe ff84 	bl	8002b68 <HAL_GetTick>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c60:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003c62:	1b80      	subs	r0, r0, r6
 8003c64:	2831      	cmp	r0, #49	@ 0x31
 8003c66:	d902      	bls.n	8003c6e <HAL_IWDG_Init+0x3a>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	4215      	tst	r5, r2
 8003c6c:	d10b      	bne.n	8003c86 <HAL_IWDG_Init+0x52>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	4215      	tst	r5, r2
 8003c72:	d1f3      	bne.n	8003c5c <HAL_IWDG_Init+0x28>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003c74:	6919      	ldr	r1, [r3, #16]
 8003c76:	68e2      	ldr	r2, [r4, #12]
 8003c78:	4291      	cmp	r1, r2
 8003c7a:	d006      	beq.n	8003c8a <HAL_IWDG_Init+0x56>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003c7c:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8003c7e:	2000      	movs	r0, #0
}
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
 8003c84:	e7fc      	b.n	8003c80 <HAL_IWDG_Init+0x4c>
        return HAL_TIMEOUT;
 8003c86:	2003      	movs	r0, #3
 8003c88:	e7fa      	b.n	8003c80 <HAL_IWDG_Init+0x4c>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c8a:	4a03      	ldr	r2, [pc, #12]	@ (8003c98 <HAL_IWDG_Init+0x64>)
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e7f6      	b.n	8003c7e <HAL_IWDG_Init+0x4a>
 8003c90:	0000cccc 	.word	0x0000cccc
 8003c94:	00005555 	.word	0x00005555
 8003c98:	0000aaaa 	.word	0x0000aaaa

08003c9c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003c9c:	6803      	ldr	r3, [r0, #0]
 8003c9e:	4a02      	ldr	r2, [pc, #8]	@ (8003ca8 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8003ca0:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	4770      	bx	lr
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	0000aaaa 	.word	0x0000aaaa

08003cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cae:	4c13      	ldr	r4, [pc, #76]	@ (8003cfc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003cb0:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003cb2:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003cb4:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	4303      	orrs	r3, r0
 8003cba:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	2380      	movs	r3, #128	@ 0x80
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4298      	cmp	r0, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003cc4:	0028      	movs	r0, r5
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8003cca:	490f      	ldr	r1, [pc, #60]	@ (8003d08 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0058      	lsls	r0, r3, #1
 8003cd0:	18c0      	adds	r0, r0, r3
 8003cd2:	0040      	lsls	r0, r0, #1
 8003cd4:	f7fc fa14 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	6963      	ldr	r3, [r4, #20]
 8003cdc:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003cde:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ce0:	4213      	tst	r3, r2
 8003ce2:	d102      	bne.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x3e>
 8003ce4:	e7ee      	b.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cea:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8003cec:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cee:	4213      	tst	r3, r2
 8003cf0:	d1f9      	bne.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8003cf2:	2500      	movs	r5, #0
 8003cf4:	e7e6      	b.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8003cf6:	2503      	movs	r5, #3
 8003cf8:	e7e4      	b.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x18>
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	fffff9ff 	.word	0xfffff9ff
 8003d04:	20000000 	.word	0x20000000
 8003d08:	000f4240 	.word	0x000f4240

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0e:	46ce      	mov	lr, r9
 8003d10:	4647      	mov	r7, r8
 8003d12:	b580      	push	{r7, lr}
 8003d14:	0004      	movs	r4, r0
 8003d16:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d027      	beq.n	8003d6c <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1c:	6803      	ldr	r3, [r0, #0]
 8003d1e:	07da      	lsls	r2, r3, #31
 8003d20:	d511      	bpl.n	8003d46 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	2238      	movs	r2, #56	@ 0x38
 8003d24:	49c0      	ldr	r1, [pc, #768]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003d26:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d28:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2a:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d2c:	2a10      	cmp	r2, #16
 8003d2e:	d100      	bne.n	8003d32 <HAL_RCC_OscConfig+0x26>
 8003d30:	e0cc      	b.n	8003ecc <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d32:	2a08      	cmp	r2, #8
 8003d34:	d000      	beq.n	8003d38 <HAL_RCC_OscConfig+0x2c>
 8003d36:	e0cd      	b.n	8003ed4 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4abb      	ldr	r2, [pc, #748]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	0392      	lsls	r2, r2, #14
 8003d3e:	d502      	bpl.n	8003d46 <HAL_RCC_OscConfig+0x3a>
 8003d40:	6862      	ldr	r2, [r4, #4]
 8003d42:	2a00      	cmp	r2, #0
 8003d44:	d012      	beq.n	8003d6c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	079a      	lsls	r2, r3, #30
 8003d48:	d532      	bpl.n	8003db0 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	2338      	movs	r3, #56	@ 0x38
 8003d4c:	4ab6      	ldr	r2, [pc, #728]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003d4e:	6891      	ldr	r1, [r2, #8]
 8003d50:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d52:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d100      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4e>
 8003d58:	e10b      	b.n	8003f72 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d000      	beq.n	8003d60 <HAL_RCC_OscConfig+0x54>
 8003d5e:	e10d      	b.n	8003f7c <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d60:	6813      	ldr	r3, [r2, #0]
 8003d62:	055b      	lsls	r3, r3, #21
 8003d64:	d508      	bpl.n	8003d78 <HAL_RCC_OscConfig+0x6c>
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8003d6c:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8003d6e:	b003      	add	sp, #12
 8003d70:	bcc0      	pop	{r6, r7}
 8003d72:	46b9      	mov	r9, r7
 8003d74:	46b0      	mov	r8, r6
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	6851      	ldr	r1, [r2, #4]
 8003d7a:	6963      	ldr	r3, [r4, #20]
 8003d7c:	48ab      	ldr	r0, [pc, #684]	@ (800402c <HAL_RCC_OscConfig+0x320>)
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	4001      	ands	r1, r0
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d86:	4aa8      	ldr	r2, [pc, #672]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003d88:	49a9      	ldr	r1, [pc, #676]	@ (8004030 <HAL_RCC_OscConfig+0x324>)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	6921      	ldr	r1, [r4, #16]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d94:	6813      	ldr	r3, [r2, #0]
 8003d96:	4aa7      	ldr	r2, [pc, #668]	@ (8004034 <HAL_RCC_OscConfig+0x328>)
 8003d98:	049b      	lsls	r3, r3, #18
 8003d9a:	0f5b      	lsrs	r3, r3, #29
 8003d9c:	40da      	lsrs	r2, r3
 8003d9e:	49a6      	ldr	r1, [pc, #664]	@ (8004038 <HAL_RCC_OscConfig+0x32c>)
 8003da0:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003da2:	4ba6      	ldr	r3, [pc, #664]	@ (800403c <HAL_RCC_OscConfig+0x330>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7fe fe99 	bl	8002adc <HAL_InitTick>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d1de      	bne.n	8003d6c <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	071a      	lsls	r2, r3, #28
 8003db2:	d46d      	bmi.n	8003e90 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db4:	075b      	lsls	r3, r3, #29
 8003db6:	d545      	bpl.n	8003e44 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003db8:	2338      	movs	r3, #56	@ 0x38
 8003dba:	4a9b      	ldr	r2, [pc, #620]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003dbc:	6891      	ldr	r1, [r2, #8]
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d100      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xba>
 8003dc4:	e0cc      	b.n	8003f60 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dc6:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003dc8:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dca:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003dcc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dd0:	4219      	tst	r1, r3
 8003dd2:	d108      	bne.n	8003de6 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003dd6:	4319      	orrs	r1, r3
 8003dd8:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8003dda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ddc:	4013      	ands	r3, r2
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8003de2:	2301      	movs	r3, #1
 8003de4:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de6:	2780      	movs	r7, #128	@ 0x80
 8003de8:	4e95      	ldr	r6, [pc, #596]	@ (8004040 <HAL_RCC_OscConfig+0x334>)
 8003dea:	007f      	lsls	r7, r7, #1
 8003dec:	6833      	ldr	r3, [r6, #0]
 8003dee:	423b      	tst	r3, r7
 8003df0:	d100      	bne.n	8003df4 <HAL_RCC_OscConfig+0xe8>
 8003df2:	e0ff      	b.n	8003ff4 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	68a3      	ldr	r3, [r4, #8]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d100      	bne.n	8003dfc <HAL_RCC_OscConfig+0xf0>
 8003dfa:	e0e5      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2bc>
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d100      	bne.n	8003e02 <HAL_RCC_OscConfig+0xf6>
 8003e00:	e1c8      	b.n	8004194 <HAL_RCC_OscConfig+0x488>
 8003e02:	2101      	movs	r1, #1
 8003e04:	4e88      	ldr	r6, [pc, #544]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003e06:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003e08:	438a      	bics	r2, r1
 8003e0a:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8003e0c:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003e0e:	3103      	adds	r1, #3
 8003e10:	438a      	bics	r2, r1
 8003e12:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d000      	beq.n	8003e1a <HAL_RCC_OscConfig+0x10e>
 8003e18:	e0da      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fea5 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e1e:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8003e20:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e22:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	4d87      	ldr	r5, [pc, #540]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e26:	e005      	b.n	8003e34 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe fe9e 	bl	8002b68 <HAL_GetTick>
 8003e2c:	1bc0      	subs	r0, r0, r7
 8003e2e:	42a8      	cmp	r0, r5
 8003e30:	d900      	bls.n	8003e34 <HAL_RCC_OscConfig+0x128>
 8003e32:	e0ee      	b.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e34:	4642      	mov	r2, r8
 8003e36:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8003e38:	421a      	tst	r2, r3
 8003e3a:	d1f5      	bne.n	8003e28 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d100      	bne.n	8003e44 <HAL_RCC_OscConfig+0x138>
 8003e42:	e163      	b.n	800410c <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e44:	69e3      	ldr	r3, [r4, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d020      	beq.n	8003e8c <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4a:	2238      	movs	r2, #56	@ 0x38
 8003e4c:	4d76      	ldr	r5, [pc, #472]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003e4e:	68a9      	ldr	r1, [r5, #8]
 8003e50:	400a      	ands	r2, r1
 8003e52:	2a10      	cmp	r2, #16
 8003e54:	d100      	bne.n	8003e58 <HAL_RCC_OscConfig+0x14c>
 8003e56:	e11d      	b.n	8004094 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d100      	bne.n	8003e5e <HAL_RCC_OscConfig+0x152>
 8003e5c:	e15c      	b.n	8004118 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	4a79      	ldr	r2, [pc, #484]	@ (8004048 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e62:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003e64:	4013      	ands	r3, r2
 8003e66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e68:	f7fe fe7e 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e6c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003e6e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e70:	e005      	b.n	8003e7e <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fe fe79 	bl	8002b68 <HAL_GetTick>
 8003e76:	1b00      	subs	r0, r0, r4
 8003e78:	2802      	cmp	r0, #2
 8003e7a:	d900      	bls.n	8003e7e <HAL_RCC_OscConfig+0x172>
 8003e7c:	e0c9      	b.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7e:	682b      	ldr	r3, [r5, #0]
 8003e80:	4233      	tst	r3, r6
 8003e82:	d1f6      	bne.n	8003e72 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003e84:	68eb      	ldr	r3, [r5, #12]
 8003e86:	4a71      	ldr	r2, [pc, #452]	@ (800404c <HAL_RCC_OscConfig+0x340>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e76e      	b.n	8003d6e <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e90:	2238      	movs	r2, #56	@ 0x38
 8003e92:	4d65      	ldr	r5, [pc, #404]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003e94:	68a9      	ldr	r1, [r5, #8]
 8003e96:	400a      	ands	r2, r1
 8003e98:	2a18      	cmp	r2, #24
 8003e9a:	d043      	beq.n	8003f24 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9c:	69a3      	ldr	r3, [r4, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d100      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x198>
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea8:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003eae:	f7fe fe5b 	bl	8002b68 <HAL_GetTick>
 8003eb2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb4:	e005      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fe57 	bl	8002b68 <HAL_GetTick>
 8003eba:	1b80      	subs	r0, r0, r6
 8003ebc:	2802      	cmp	r0, #2
 8003ebe:	d900      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1b6>
 8003ec0:	e0a7      	b.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003ec4:	421f      	tst	r7, r3
 8003ec6:	d0f6      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	e773      	b.n	8003db4 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ecc:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ece:	0789      	lsls	r1, r1, #30
 8003ed0:	d100      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x1c8>
 8003ed2:	e731      	b.n	8003d38 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	2280      	movs	r2, #128	@ 0x80
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	0252      	lsls	r2, r2, #9
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <HAL_RCC_OscConfig+0x22a>
 8003ede:	21a0      	movs	r1, #160	@ 0xa0
 8003ee0:	02c9      	lsls	r1, r1, #11
 8003ee2:	428b      	cmp	r3, r1
 8003ee4:	d100      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1dc>
 8003ee6:	e0fc      	b.n	80040e2 <HAL_RCC_OscConfig+0x3d6>
 8003ee8:	4d4f      	ldr	r5, [pc, #316]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003eea:	4959      	ldr	r1, [pc, #356]	@ (8004050 <HAL_RCC_OscConfig+0x344>)
 8003eec:	682a      	ldr	r2, [r5, #0]
 8003eee:	400a      	ands	r2, r1
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	682a      	ldr	r2, [r5, #0]
 8003ef4:	4957      	ldr	r1, [pc, #348]	@ (8004054 <HAL_RCC_OscConfig+0x348>)
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11f      	bne.n	8003f3e <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8003efe:	f7fe fe33 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f02:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003f04:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	02bf      	lsls	r7, r7, #10
 8003f08:	e004      	b.n	8003f14 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0a:	f7fe fe2d 	bl	8002b68 <HAL_GetTick>
 8003f0e:	1b80      	subs	r0, r0, r6
 8003f10:	2864      	cmp	r0, #100	@ 0x64
 8003f12:	d87e      	bhi.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	423b      	tst	r3, r7
 8003f18:	d1f7      	bne.n	8003f0a <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	079a      	lsls	r2, r3, #30
 8003f1e:	d400      	bmi.n	8003f22 <HAL_RCC_OscConfig+0x216>
 8003f20:	e746      	b.n	8003db0 <HAL_RCC_OscConfig+0xa4>
 8003f22:	e712      	b.n	8003d4a <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f24:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8003f26:	0792      	lsls	r2, r2, #30
 8003f28:	d400      	bmi.n	8003f2c <HAL_RCC_OscConfig+0x220>
 8003f2a:	e743      	b.n	8003db4 <HAL_RCC_OscConfig+0xa8>
 8003f2c:	69a2      	ldr	r2, [r4, #24]
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	d000      	beq.n	8003f34 <HAL_RCC_OscConfig+0x228>
 8003f32:	e73f      	b.n	8003db4 <HAL_RCC_OscConfig+0xa8>
 8003f34:	e71a      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f36:	4a3c      	ldr	r2, [pc, #240]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003f38:	6811      	ldr	r1, [r2, #0]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fe13 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f42:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003f44:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f46:	4f38      	ldr	r7, [pc, #224]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003f48:	02b6      	lsls	r6, r6, #10
 8003f4a:	e004      	b.n	8003f56 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe fe0c 	bl	8002b68 <HAL_GetTick>
 8003f50:	1b40      	subs	r0, r0, r5
 8003f52:	2864      	cmp	r0, #100	@ 0x64
 8003f54:	d85d      	bhi.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	4233      	tst	r3, r6
 8003f5a:	d0f7      	beq.n	8003f4c <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	e7dd      	b.n	8003f1c <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f60:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8003f62:	079b      	lsls	r3, r3, #30
 8003f64:	d400      	bmi.n	8003f68 <HAL_RCC_OscConfig+0x25c>
 8003f66:	e76d      	b.n	8003e44 <HAL_RCC_OscConfig+0x138>
 8003f68:	68a3      	ldr	r3, [r4, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d000      	beq.n	8003f70 <HAL_RCC_OscConfig+0x264>
 8003f6e:	e769      	b.n	8003e44 <HAL_RCC_OscConfig+0x138>
 8003f70:	e6fc      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f72:	3b0d      	subs	r3, #13
 8003f74:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d100      	bne.n	8003f7c <HAL_RCC_OscConfig+0x270>
 8003f7a:	e0bc      	b.n	80040f6 <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f7e:	4d2a      	ldr	r5, [pc, #168]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d073      	beq.n	800406c <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f88:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f8e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f90:	4313      	orrs	r3, r2
 8003f92:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003f94:	2380      	movs	r3, #128	@ 0x80
 8003f96:	682a      	ldr	r2, [r5, #0]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fde3 	bl	8002b68 <HAL_GetTick>
 8003fa2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa4:	e004      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fddf 	bl	8002b68 <HAL_GetTick>
 8003faa:	1b80      	subs	r0, r0, r6
 8003fac:	2802      	cmp	r0, #2
 8003fae:	d830      	bhi.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	423b      	tst	r3, r7
 8003fb4:	d0f7      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	686a      	ldr	r2, [r5, #4]
 8003fb8:	6963      	ldr	r3, [r4, #20]
 8003fba:	491c      	ldr	r1, [pc, #112]	@ (800402c <HAL_RCC_OscConfig+0x320>)
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	e6f3      	b.n	8003db0 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	4917      	ldr	r1, [pc, #92]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
 8003fca:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fdca 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd4:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8003fd6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd8:	4698      	mov	r8, r3
 8003fda:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	4d19      	ldr	r5, [pc, #100]	@ (8004044 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fde:	e004      	b.n	8003fea <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fe fdc2 	bl	8002b68 <HAL_GetTick>
 8003fe4:	1b80      	subs	r0, r0, r6
 8003fe6:	42a8      	cmp	r0, r5
 8003fe8:	d813      	bhi.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	4643      	mov	r3, r8
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	421f      	tst	r7, r3
 8003ff0:	d0f6      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2d4>
 8003ff2:	e723      	b.n	8003e3c <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff4:	6833      	ldr	r3, [r6, #0]
 8003ff6:	433b      	orrs	r3, r7
 8003ff8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fdb5 	bl	8002b68 <HAL_GetTick>
 8003ffe:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	6833      	ldr	r3, [r6, #0]
 8004002:	423b      	tst	r3, r7
 8004004:	d000      	beq.n	8004008 <HAL_RCC_OscConfig+0x2fc>
 8004006:	e6f5      	b.n	8003df4 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004008:	f7fe fdae 	bl	8002b68 <HAL_GetTick>
 800400c:	1b40      	subs	r0, r0, r5
 800400e:	2802      	cmp	r0, #2
 8004010:	d9f6      	bls.n	8004000 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8004012:	2003      	movs	r0, #3
 8004014:	e6ab      	b.n	8003d6e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8004016:	2201      	movs	r2, #1
 8004018:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 800401c:	4393      	bics	r3, r2
 800401e:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004020:	f7fe fda2 	bl	8002b68 <HAL_GetTick>
 8004024:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x356>
 8004028:	40021000 	.word	0x40021000
 800402c:	ffff80ff 	.word	0xffff80ff
 8004030:	ffffc7ff 	.word	0xffffc7ff
 8004034:	00f42400 	.word	0x00f42400
 8004038:	20000000 	.word	0x20000000
 800403c:	200002b8 	.word	0x200002b8
 8004040:	40007000 	.word	0x40007000
 8004044:	00001388 	.word	0x00001388
 8004048:	feffffff 	.word	0xfeffffff
 800404c:	effefffc 	.word	0xeffefffc
 8004050:	fffeffff 	.word	0xfffeffff
 8004054:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7fe fd86 	bl	8002b68 <HAL_GetTick>
 800405c:	1b80      	subs	r0, r0, r6
 800405e:	2802      	cmp	r0, #2
 8004060:	d8d7      	bhi.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004062:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004064:	421f      	tst	r7, r3
 8004066:	d1f7      	bne.n	8004058 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	e6a3      	b.n	8003db4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	4a50      	ldr	r2, [pc, #320]	@ (80041b0 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004070:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8004072:	4013      	ands	r3, r2
 8004074:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004076:	f7fe fd77 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407a:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 800407c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407e:	e004      	b.n	800408a <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004080:	f7fe fd72 	bl	8002b68 <HAL_GetTick>
 8004084:	1b80      	subs	r0, r0, r6
 8004086:	2802      	cmp	r0, #2
 8004088:	d8c3      	bhi.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	423b      	tst	r3, r7
 800408e:	d1f7      	bne.n	8004080 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	e68d      	b.n	8003db0 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	2b01      	cmp	r3, #1
 8004096:	d100      	bne.n	800409a <HAL_RCC_OscConfig+0x38e>
 8004098:	e668      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800409c:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	6a21      	ldr	r1, [r4, #32]
 80040a0:	4002      	ands	r2, r0
 80040a2:	428a      	cmp	r2, r1
 80040a4:	d000      	beq.n	80040a8 <HAL_RCC_OscConfig+0x39c>
 80040a6:	e661      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a8:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ac:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	428a      	cmp	r2, r1
 80040b0:	d000      	beq.n	80040b4 <HAL_RCC_OscConfig+0x3a8>
 80040b2:	e65b      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b4:	21fe      	movs	r1, #254	@ 0xfe
 80040b6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80040b8:	01c9      	lsls	r1, r1, #7
 80040ba:	4001      	ands	r1, r0
 80040bc:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040be:	4291      	cmp	r1, r2
 80040c0:	d000      	beq.n	80040c4 <HAL_RCC_OscConfig+0x3b8>
 80040c2:	e653      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c4:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c8:	0392      	lsls	r2, r2, #14
 80040ca:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040cc:	428a      	cmp	r2, r1
 80040ce:	d000      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3c6>
 80040d0:	e64c      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040d4:	0f40      	lsrs	r0, r0, #29
 80040d6:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040d8:	1ac0      	subs	r0, r0, r3
 80040da:	1e43      	subs	r3, r0, #1
 80040dc:	4198      	sbcs	r0, r3
 80040de:	b2c0      	uxtb	r0, r0
 80040e0:	e645      	b.n	8003d6e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e2:	2180      	movs	r1, #128	@ 0x80
 80040e4:	4b33      	ldr	r3, [pc, #204]	@ (80041b4 <HAL_RCC_OscConfig+0x4a8>)
 80040e6:	02c9      	lsls	r1, r1, #11
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	4301      	orrs	r1, r0
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f4:	e723      	b.n	8003f3e <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	055b      	lsls	r3, r3, #21
 80040fa:	d455      	bmi.n	80041a8 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	6851      	ldr	r1, [r2, #4]
 80040fe:	6963      	ldr	r3, [r4, #20]
 8004100:	482d      	ldr	r0, [pc, #180]	@ (80041b8 <HAL_RCC_OscConfig+0x4ac>)
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	4001      	ands	r1, r0
 8004106:	430b      	orrs	r3, r1
 8004108:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410a:	e64a      	b.n	8003da2 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	4a29      	ldr	r2, [pc, #164]	@ (80041b4 <HAL_RCC_OscConfig+0x4a8>)
 800410e:	492b      	ldr	r1, [pc, #172]	@ (80041bc <HAL_RCC_OscConfig+0x4b0>)
 8004110:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8004112:	400b      	ands	r3, r1
 8004114:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004116:	e695      	b.n	8003e44 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	4a29      	ldr	r2, [pc, #164]	@ (80041c0 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800411e:	4013      	ands	r3, r2
 8004120:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004122:	f7fe fd21 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004126:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004128:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412a:	e005      	b.n	8004138 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe fd1c 	bl	8002b68 <HAL_GetTick>
 8004130:	1b80      	subs	r0, r0, r6
 8004132:	2802      	cmp	r0, #2
 8004134:	d900      	bls.n	8004138 <HAL_RCC_OscConfig+0x42c>
 8004136:	e76c      	b.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	423b      	tst	r3, r7
 800413c:	d1f6      	bne.n	800412c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800413e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004140:	6a23      	ldr	r3, [r4, #32]
 8004142:	68ea      	ldr	r2, [r5, #12]
 8004144:	430b      	orrs	r3, r1
 8004146:	491f      	ldr	r1, [pc, #124]	@ (80041c4 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004148:	4e1a      	ldr	r6, [pc, #104]	@ (80041b4 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800414a:	400a      	ands	r2, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004150:	4313      	orrs	r3, r2
 8004152:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004154:	4313      	orrs	r3, r2
 8004156:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004158:	0212      	lsls	r2, r2, #8
 800415a:	4313      	orrs	r3, r2
 800415c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	682a      	ldr	r2, [r5, #0]
 8004162:	045b      	lsls	r3, r3, #17
 8004164:	4313      	orrs	r3, r2
 8004166:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004168:	2380      	movs	r3, #128	@ 0x80
 800416a:	68ea      	ldr	r2, [r5, #12]
 800416c:	055b      	lsls	r3, r3, #21
 800416e:	4313      	orrs	r3, r2
 8004170:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004172:	f7fe fcf9 	bl	8002b68 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004176:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004178:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417a:	04ad      	lsls	r5, r5, #18
 800417c:	e005      	b.n	800418a <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417e:	f7fe fcf3 	bl	8002b68 <HAL_GetTick>
 8004182:	1b00      	subs	r0, r0, r4
 8004184:	2802      	cmp	r0, #2
 8004186:	d900      	bls.n	800418a <HAL_RCC_OscConfig+0x47e>
 8004188:	e743      	b.n	8004012 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418a:	6833      	ldr	r3, [r6, #0]
 800418c:	422b      	tst	r3, r5
 800418e:	d0f6      	beq.n	800417e <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8004190:	2000      	movs	r0, #0
 8004192:	e5ec      	b.n	8003d6e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004194:	2104      	movs	r1, #4
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <HAL_RCC_OscConfig+0x4a8>)
 8004198:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800419a:	430a      	orrs	r2, r1
 800419c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800419e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041a0:	3903      	subs	r1, #3
 80041a2:	430a      	orrs	r2, r1
 80041a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a6:	e713      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a8:	68e3      	ldr	r3, [r4, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1a6      	bne.n	80040fc <HAL_RCC_OscConfig+0x3f0>
 80041ae:	e5dd      	b.n	8003d6c <HAL_RCC_OscConfig+0x60>
 80041b0:	fffffeff 	.word	0xfffffeff
 80041b4:	40021000 	.word	0x40021000
 80041b8:	ffff80ff 	.word	0xffff80ff
 80041bc:	efffffff 	.word	0xefffffff
 80041c0:	feffffff 	.word	0xfeffffff
 80041c4:	1fc1808c 	.word	0x1fc1808c

080041c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c8:	2338      	movs	r3, #56	@ 0x38
 80041ca:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 80041cc:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ce:	6891      	ldr	r1, [r2, #8]
 80041d0:	420b      	tst	r3, r1
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041d4:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041d6:	4820      	ldr	r0, [pc, #128]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041d8:	049b      	lsls	r3, r3, #18
 80041da:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041dc:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80041de:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041e0:	6891      	ldr	r1, [r2, #8]
 80041e2:	4019      	ands	r1, r3
 80041e4:	2908      	cmp	r1, #8
 80041e6:	d014      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e8:	6891      	ldr	r1, [r2, #8]
 80041ea:	4019      	ands	r1, r3
 80041ec:	2910      	cmp	r1, #16
 80041ee:	d012      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041f0:	6891      	ldr	r1, [r2, #8]
 80041f2:	4019      	ands	r1, r3
 80041f4:	2920      	cmp	r1, #32
 80041f6:	d024      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041f8:	6890      	ldr	r0, [r2, #8]
 80041fa:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 80041fc:	3818      	subs	r0, #24
 80041fe:	1e43      	subs	r3, r0, #1
 8004200:	4198      	sbcs	r0, r3
 8004202:	4b16      	ldr	r3, [pc, #88]	@ (800425c <HAL_RCC_GetSysClockFreq+0x94>)
 8004204:	4240      	negs	r0, r0
 8004206:	4018      	ands	r0, r3
 8004208:	23fa      	movs	r3, #250	@ 0xfa
 800420a:	01db      	lsls	r3, r3, #7
 800420c:	469c      	mov	ip, r3
 800420e:	4460      	add	r0, ip
 8004210:	e7e5      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8004212:	4813      	ldr	r0, [pc, #76]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x98>)
 8004214:	e7e3      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004216:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004218:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800421a:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800421c:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800421e:	0649      	lsls	r1, r1, #25
 8004220:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004222:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004224:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004226:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8004228:	079b      	lsls	r3, r3, #30
 800422a:	d00d      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800422c:	480a      	ldr	r0, [pc, #40]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x90>)
 800422e:	f7fb ff67 	bl	8000100 <__udivsi3>
 8004232:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004236:	68d9      	ldr	r1, [r3, #12]
 8004238:	0f49      	lsrs	r1, r1, #29
 800423a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800423c:	f7fb ff60 	bl	8000100 <__udivsi3>
 8004240:	e7cd      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8004242:	2080      	movs	r0, #128	@ 0x80
 8004244:	0200      	lsls	r0, r0, #8
 8004246:	e7ca      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004248:	4805      	ldr	r0, [pc, #20]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x98>)
 800424a:	f7fb ff59 	bl	8000100 <__udivsi3>
 800424e:	4360      	muls	r0, r4
        break;
 8004250:	e7f0      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x6c>
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	40021000 	.word	0x40021000
 8004258:	00f42400 	.word	0x00f42400
 800425c:	ffff8300 	.word	0xffff8300
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCC_ClockConfig>:
{
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	46ce      	mov	lr, r9
 8004268:	4647      	mov	r7, r8
 800426a:	0005      	movs	r5, r0
 800426c:	000c      	movs	r4, r1
 800426e:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8004270:	2800      	cmp	r0, #0
 8004272:	d026      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004274:	2207      	movs	r2, #7
 8004276:	4e57      	ldr	r6, [pc, #348]	@ (80043d4 <HAL_RCC_ClockConfig+0x170>)
 8004278:	6833      	ldr	r3, [r6, #0]
 800427a:	4013      	ands	r3, r2
 800427c:	428b      	cmp	r3, r1
 800427e:	d35e      	bcc.n	800433e <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	079a      	lsls	r2, r3, #30
 8004284:	d50e      	bpl.n	80042a4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004286:	075a      	lsls	r2, r3, #29
 8004288:	d505      	bpl.n	8004296 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800428a:	22e0      	movs	r2, #224	@ 0xe0
 800428c:	4952      	ldr	r1, [pc, #328]	@ (80043d8 <HAL_RCC_ClockConfig+0x174>)
 800428e:	01d2      	lsls	r2, r2, #7
 8004290:	6888      	ldr	r0, [r1, #8]
 8004292:	4302      	orrs	r2, r0
 8004294:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004296:	4950      	ldr	r1, [pc, #320]	@ (80043d8 <HAL_RCC_ClockConfig+0x174>)
 8004298:	4850      	ldr	r0, [pc, #320]	@ (80043dc <HAL_RCC_ClockConfig+0x178>)
 800429a:	688a      	ldr	r2, [r1, #8]
 800429c:	4002      	ands	r2, r0
 800429e:	68a8      	ldr	r0, [r5, #8]
 80042a0:	4302      	orrs	r2, r0
 80042a2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a4:	07db      	lsls	r3, r3, #31
 80042a6:	d52b      	bpl.n	8004300 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a8:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042aa:	4a4b      	ldr	r2, [pc, #300]	@ (80043d8 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d100      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x4e>
 80042b0:	e07c      	b.n	80043ac <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d007      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d000      	beq.n	80042bc <HAL_RCC_ClockConfig+0x58>
 80042ba:	e07d      	b.n	80043b8 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	0552      	lsls	r2, r2, #21
 80042c0:	d404      	bmi.n	80042cc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80042c2:	2001      	movs	r0, #1
 80042c4:	e037      	b.n	8004336 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	0192      	lsls	r2, r2, #6
 80042ca:	d5fa      	bpl.n	80042c2 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042cc:	2107      	movs	r1, #7
 80042ce:	4e42      	ldr	r6, [pc, #264]	@ (80043d8 <HAL_RCC_ClockConfig+0x174>)
 80042d0:	68b2      	ldr	r2, [r6, #8]
 80042d2:	438a      	bics	r2, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80042d8:	f7fe fc46 	bl	8002b68 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042dc:	2338      	movs	r3, #56	@ 0x38
 80042de:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80042e2:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	e004      	b.n	80042f2 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e8:	f7fe fc3e 	bl	8002b68 <HAL_GetTick>
 80042ec:	1bc0      	subs	r0, r0, r7
 80042ee:	4548      	cmp	r0, r9
 80042f0:	d83b      	bhi.n	800436a <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4643      	mov	r3, r8
 80042f4:	68b2      	ldr	r2, [r6, #8]
 80042f6:	401a      	ands	r2, r3
 80042f8:	686b      	ldr	r3, [r5, #4]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1f3      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	2207      	movs	r2, #7
 8004302:	4e34      	ldr	r6, [pc, #208]	@ (80043d4 <HAL_RCC_ClockConfig+0x170>)
 8004304:	6833      	ldr	r3, [r6, #0]
 8004306:	4013      	ands	r3, r2
 8004308:	42a3      	cmp	r3, r4
 800430a:	d838      	bhi.n	800437e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	075b      	lsls	r3, r3, #29
 8004310:	d42d      	bmi.n	800436e <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004312:	f7ff ff59 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8004316:	4b30      	ldr	r3, [pc, #192]	@ (80043d8 <HAL_RCC_ClockConfig+0x174>)
 8004318:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <HAL_RCC_ClockConfig+0x180>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4932      	ldr	r1, [pc, #200]	@ (80043e8 <HAL_RCC_ClockConfig+0x184>)
 800431e:	051b      	lsls	r3, r3, #20
 8004320:	0f1b      	lsrs	r3, r3, #28
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	589b      	ldr	r3, [r3, r2]
 8004326:	221f      	movs	r2, #31
 8004328:	4013      	ands	r3, r2
 800432a:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 800432c:	4b2f      	ldr	r3, [pc, #188]	@ (80043ec <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800432e:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f7fe fbd3 	bl	8002adc <HAL_InitTick>
}
 8004336:	bcc0      	pop	{r6, r7}
 8004338:	46b9      	mov	r9, r7
 800433a:	46b0      	mov	r8, r6
 800433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	6833      	ldr	r3, [r6, #0]
 8004340:	4393      	bics	r3, r2
 8004342:	430b      	orrs	r3, r1
 8004344:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004346:	f7fe fc0f 	bl	8002b68 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800434a:	2307      	movs	r3, #7
 800434c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434e:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8004350:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004352:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004354:	4642      	mov	r2, r8
 8004356:	6833      	ldr	r3, [r6, #0]
 8004358:	4013      	ands	r3, r2
 800435a:	42a3      	cmp	r3, r4
 800435c:	d100      	bne.n	8004360 <HAL_RCC_ClockConfig+0xfc>
 800435e:	e78f      	b.n	8004280 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fe fc02 	bl	8002b68 <HAL_GetTick>
 8004364:	1bc0      	subs	r0, r0, r7
 8004366:	4548      	cmp	r0, r9
 8004368:	d9f4      	bls.n	8004354 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 800436a:	2003      	movs	r0, #3
 800436c:	e7e3      	b.n	8004336 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800436e:	4a1a      	ldr	r2, [pc, #104]	@ (80043d8 <HAL_RCC_ClockConfig+0x174>)
 8004370:	491f      	ldr	r1, [pc, #124]	@ (80043f0 <HAL_RCC_ClockConfig+0x18c>)
 8004372:	6893      	ldr	r3, [r2, #8]
 8004374:	400b      	ands	r3, r1
 8004376:	68e9      	ldr	r1, [r5, #12]
 8004378:	430b      	orrs	r3, r1
 800437a:	6093      	str	r3, [r2, #8]
 800437c:	e7c9      	b.n	8004312 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	6833      	ldr	r3, [r6, #0]
 8004380:	4393      	bics	r3, r2
 8004382:	4323      	orrs	r3, r4
 8004384:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004386:	f7fe fbef 	bl	8002b68 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800438a:	2307      	movs	r3, #7
 800438c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438e:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8004390:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004392:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004394:	4642      	mov	r2, r8
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	4013      	ands	r3, r2
 800439a:	42a3      	cmp	r3, r4
 800439c:	d0b6      	beq.n	800430c <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439e:	f7fe fbe3 	bl	8002b68 <HAL_GetTick>
 80043a2:	1bc0      	subs	r0, r0, r7
 80043a4:	4548      	cmp	r0, r9
 80043a6:	d9f5      	bls.n	8004394 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80043a8:	2003      	movs	r0, #3
 80043aa:	e7c4      	b.n	8004336 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	0392      	lsls	r2, r2, #14
 80043b0:	d500      	bpl.n	80043b4 <HAL_RCC_ClockConfig+0x150>
 80043b2:	e78b      	b.n	80042cc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80043b4:	2001      	movs	r0, #1
 80043b6:	e7be      	b.n	8004336 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043be:	0792      	lsls	r2, r2, #30
 80043c0:	d500      	bpl.n	80043c4 <HAL_RCC_ClockConfig+0x160>
 80043c2:	e783      	b.n	80042cc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80043c4:	2001      	movs	r0, #1
 80043c6:	e7b6      	b.n	8004336 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80043ca:	0792      	lsls	r2, r2, #30
 80043cc:	d500      	bpl.n	80043d0 <HAL_RCC_ClockConfig+0x16c>
 80043ce:	e77d      	b.n	80042cc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
 80043d2:	e7b0      	b.n	8004336 <HAL_RCC_ClockConfig+0xd2>
 80043d4:	40022000 	.word	0x40022000
 80043d8:	40021000 	.word	0x40021000
 80043dc:	fffff0ff 	.word	0xfffff0ff
 80043e0:	00001388 	.word	0x00001388
 80043e4:	08006804 	.word	0x08006804
 80043e8:	20000000 	.word	0x20000000
 80043ec:	200002b8 	.word	0x200002b8
 80043f0:	ffff8fff 	.word	0xffff8fff

080043f4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80043f6:	4907      	ldr	r1, [pc, #28]	@ (8004414 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80043fa:	4a07      	ldr	r2, [pc, #28]	@ (8004418 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80043fc:	045b      	lsls	r3, r3, #17
 80043fe:	0f5b      	lsrs	r3, r3, #29
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	585b      	ldr	r3, [r3, r1]
 8004404:	211f      	movs	r1, #31
 8004406:	6810      	ldr	r0, [r2, #0]
 8004408:	400b      	ands	r3, r1
 800440a:	40d8      	lsrs	r0, r3
}
 800440c:	4770      	bx	lr
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	40021000 	.word	0x40021000
 8004414:	080067e4 	.word	0x080067e4
 8004418:	20000000 	.word	0x20000000

0800441c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441e:	46d6      	mov	lr, sl
 8004420:	464f      	mov	r7, r9
 8004422:	4646      	mov	r6, r8
 8004424:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004426:	6803      	ldr	r3, [r0, #0]
{
 8004428:	0004      	movs	r4, r0
 800442a:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800442c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800442e:	039a      	lsls	r2, r3, #14
 8004430:	d551      	bpl.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xba>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	2280      	movs	r2, #128	@ 0x80
 8004434:	4b51      	ldr	r3, [pc, #324]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	0552      	lsls	r2, r2, #21
 8004438:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800443a:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443c:	4211      	tst	r1, r2
 800443e:	d100      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004440:	e07b      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004442:	2780      	movs	r7, #128	@ 0x80
 8004444:	4d4e      	ldr	r5, [pc, #312]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004446:	007f      	lsls	r7, r7, #1
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	433b      	orrs	r3, r7
 800444c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800444e:	f7fe fb8b 	bl	8002b68 <HAL_GetTick>
 8004452:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004454:	e005      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fe fb87 	bl	8002b68 <HAL_GetTick>
 800445a:	1b80      	subs	r0, r0, r6
 800445c:	2802      	cmp	r0, #2
 800445e:	d900      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8004460:	e075      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x132>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	423b      	tst	r3, r7
 8004466:	d0f6      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004468:	4d44      	ldr	r5, [pc, #272]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	23c0      	movs	r3, #192	@ 0xc0
 800446c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004472:	6961      	ldr	r1, [r4, #20]
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004474:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004476:	421a      	tst	r2, r3
 8004478:	d022      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800447a:	4288      	cmp	r0, r1
 800447c:	d020      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447e:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004480:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8004482:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8004484:	0240      	lsls	r0, r0, #9
 8004486:	4330      	orrs	r0, r6
 8004488:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448a:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800448c:	4a3d      	ldr	r2, [pc, #244]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448e:	4e3e      	ldr	r6, [pc, #248]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004490:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004492:	4030      	ands	r0, r6
 8004494:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004496:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004498:	07db      	lsls	r3, r3, #31
 800449a:	d511      	bpl.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fe fb64 	bl	8002b68 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a0:	2302      	movs	r3, #2
 80044a2:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	4b39      	ldr	r3, [pc, #228]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x170>)
        tickstart = HAL_GetTick();
 80044a6:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fe fb5c 	bl	8002b68 <HAL_GetTick>
 80044b0:	1b80      	subs	r0, r0, r6
 80044b2:	4548      	cmp	r0, r9
 80044b4:	d84b      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x132>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b6:	4642      	mov	r2, r8
 80044b8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80044ba:	421a      	tst	r2, r3
 80044bc:	d0f6      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044be:	6961      	ldr	r1, [r4, #20]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	4830      	ldr	r0, [pc, #192]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044c4:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80044c6:	4003      	ands	r3, r0
 80044c8:	430b      	orrs	r3, r1
 80044ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044cc:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ce:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044d0:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80044d2:	2a01      	cmp	r2, #1
 80044d4:	d040      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044d6:	07da      	lsls	r2, r3, #31
 80044d8:	d506      	bpl.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044da:	2503      	movs	r5, #3
 80044dc:	4927      	ldr	r1, [pc, #156]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80044e0:	43aa      	bics	r2, r5
 80044e2:	6865      	ldr	r5, [r4, #4]
 80044e4:	432a      	orrs	r2, r5
 80044e6:	654a      	str	r2, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e8:	069a      	lsls	r2, r3, #26
 80044ea:	d506      	bpl.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ec:	4923      	ldr	r1, [pc, #140]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	4d28      	ldr	r5, [pc, #160]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80044f0:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80044f2:	402a      	ands	r2, r5
 80044f4:	68a5      	ldr	r5, [r4, #8]
 80044f6:	432a      	orrs	r2, r5
 80044f8:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044fa:	045a      	lsls	r2, r3, #17
 80044fc:	d50a      	bpl.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fe:	491f      	ldr	r1, [pc, #124]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004500:	6925      	ldr	r5, [r4, #16]
 8004502:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	0892      	lsrs	r2, r2, #2
 8004508:	432a      	orrs	r2, r5
 800450a:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800450c:	2280      	movs	r2, #128	@ 0x80
 800450e:	05d2      	lsls	r2, r2, #23
 8004510:	4295      	cmp	r5, r2
 8004512:	d027      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004514:	051b      	lsls	r3, r3, #20
 8004516:	d50a      	bpl.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	68e1      	ldr	r1, [r4, #12]
 800451c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800451e:	4c1d      	ldr	r4, [pc, #116]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004520:	4023      	ands	r3, r4
 8004522:	430b      	orrs	r3, r1
 8004524:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	01db      	lsls	r3, r3, #7
 800452a:	4299      	cmp	r1, r3
 800452c:	d020      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800452e:	b002      	add	sp, #8
 8004530:	bce0      	pop	{r5, r6, r7}
 8004532:	46ba      	mov	sl, r7
 8004534:	46b1      	mov	r9, r6
 8004536:	46a8      	mov	r8, r5
 8004538:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800453c:	4311      	orrs	r1, r2
 800453e:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8004540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004542:	4013      	ands	r3, r2
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004548:	2301      	movs	r3, #1
 800454a:	469a      	mov	sl, r3
 800454c:	e779      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 800454e:	4652      	mov	r2, sl
        status = ret;
 8004550:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004552:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8004554:	2a01      	cmp	r2, #1
 8004556:	d1be      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4908      	ldr	r1, [pc, #32]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	4d0f      	ldr	r5, [pc, #60]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800455c:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800455e:	402a      	ands	r2, r5
 8004560:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8004562:	e7b8      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004564:	2280      	movs	r2, #128	@ 0x80
 8004566:	68cd      	ldr	r5, [r1, #12]
 8004568:	0252      	lsls	r2, r2, #9
 800456a:	432a      	orrs	r2, r5
 800456c:	60ca      	str	r2, [r1, #12]
 800456e:	e7d1      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004570:	2380      	movs	r3, #128	@ 0x80
 8004572:	68d1      	ldr	r1, [r2, #12]
 8004574:	025b      	lsls	r3, r3, #9
 8004576:	430b      	orrs	r3, r1
 8004578:	60d3      	str	r3, [r2, #12]
  return status;
 800457a:	e7d8      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x112>
 800457c:	40021000 	.word	0x40021000
 8004580:	40007000 	.word	0x40007000
 8004584:	fffffcff 	.word	0xfffffcff
 8004588:	fffeffff 	.word	0xfffeffff
 800458c:	00001388 	.word	0x00001388
 8004590:	ffffcfff 	.word	0xffffcfff
 8004594:	ffff3fff 	.word	0xffff3fff
 8004598:	efffffff 	.word	0xefffffff

0800459c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459e:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 80045a0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a4:	4d13      	ldr	r5, [pc, #76]	@ (80045f4 <TIM_OC1_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a6:	43a2      	bics	r2, r4
 80045a8:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80045aa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80045ac:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ae:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b0:	680d      	ldr	r5, [r1, #0]
 80045b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045b4:	2502      	movs	r5, #2
 80045b6:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b8:	688d      	ldr	r5, [r1, #8]
 80045ba:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045bc:	4d0e      	ldr	r5, [pc, #56]	@ (80045f8 <TIM_OC1_SetConfig+0x5c>)
 80045be:	42a8      	cmp	r0, r5
 80045c0:	d005      	beq.n	80045ce <TIM_OC1_SetConfig+0x32>
 80045c2:	4d0e      	ldr	r5, [pc, #56]	@ (80045fc <TIM_OC1_SetConfig+0x60>)
 80045c4:	42a8      	cmp	r0, r5
 80045c6:	d002      	beq.n	80045ce <TIM_OC1_SetConfig+0x32>
 80045c8:	4d0d      	ldr	r5, [pc, #52]	@ (8004600 <TIM_OC1_SetConfig+0x64>)
 80045ca:	42a8      	cmp	r0, r5
 80045cc:	d10b      	bne.n	80045e6 <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045ce:	2508      	movs	r5, #8
 80045d0:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045d2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d4:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80045d6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80045d8:	2504      	movs	r5, #4
 80045da:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045dc:	4d09      	ldr	r5, [pc, #36]	@ (8004604 <TIM_OC1_SetConfig+0x68>)
 80045de:	4025      	ands	r5, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e0:	694c      	ldr	r4, [r1, #20]
 80045e2:	4334      	orrs	r4, r6
 80045e4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ea:	684a      	ldr	r2, [r1, #4]
 80045ec:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	6203      	str	r3, [r0, #32]
}
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	fffeff8c 	.word	0xfffeff8c
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800
 8004604:	fffffcff 	.word	0xfffffcff

08004608 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004608:	6a02      	ldr	r2, [r0, #32]
{
 800460a:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800460c:	6a03      	ldr	r3, [r0, #32]
 800460e:	4c16      	ldr	r4, [pc, #88]	@ (8004668 <TIM_OC3_SetConfig+0x60>)
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	4d16      	ldr	r5, [pc, #88]	@ (800466c <TIM_OC3_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004612:	4023      	ands	r3, r4
 8004614:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004616:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004618:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800461a:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800461c:	680d      	ldr	r5, [r1, #0]
 800461e:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004620:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <TIM_OC3_SetConfig+0x68>)
 8004622:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004624:	688b      	ldr	r3, [r1, #8]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462a:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <TIM_OC3_SetConfig+0x6c>)
 800462c:	4290      	cmp	r0, r2
 800462e:	d012      	beq.n	8004656 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004630:	4a11      	ldr	r2, [pc, #68]	@ (8004678 <TIM_OC3_SetConfig+0x70>)
 8004632:	4290      	cmp	r0, r2
 8004634:	d002      	beq.n	800463c <TIM_OC3_SetConfig+0x34>
 8004636:	4a11      	ldr	r2, [pc, #68]	@ (800467c <TIM_OC3_SetConfig+0x74>)
 8004638:	4290      	cmp	r0, r2
 800463a:	d106      	bne.n	800464a <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463c:	4a10      	ldr	r2, [pc, #64]	@ (8004680 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800463e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004640:	4022      	ands	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004642:	698c      	ldr	r4, [r1, #24]
 8004644:	4334      	orrs	r4, r6
 8004646:	0124      	lsls	r4, r4, #4
 8004648:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800464a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800464c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800464e:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004650:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	6203      	str	r3, [r0, #32]
}
 8004654:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8004656:	4a0b      	ldr	r2, [pc, #44]	@ (8004684 <TIM_OC3_SetConfig+0x7c>)
 8004658:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800465a:	68cb      	ldr	r3, [r1, #12]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8004660:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <TIM_OC3_SetConfig+0x80>)
 8004662:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	e7ea      	b.n	800463c <TIM_OC3_SetConfig+0x34>
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	fffffeff 	.word	0xfffffeff
 800466c:	fffeff8c 	.word	0xfffeff8c
 8004670:	fffffdff 	.word	0xfffffdff
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800
 8004680:	ffffcfff 	.word	0xffffcfff
 8004684:	fffff7ff 	.word	0xfffff7ff
 8004688:	fffffbff 	.word	0xfffffbff

0800468c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8004690:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004692:	6a03      	ldr	r3, [r0, #32]
 8004694:	4013      	ands	r3, r2
 8004696:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004698:	4a10      	ldr	r2, [pc, #64]	@ (80046dc <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 800469a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800469c:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800469e:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	680a      	ldr	r2, [r1, #0]
 80046a2:	0212      	lsls	r2, r2, #8
 80046a4:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046a6:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <TIM_OC4_SetConfig+0x54>)
 80046a8:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046aa:	688b      	ldr	r3, [r1, #8]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b0:	4c0c      	ldr	r4, [pc, #48]	@ (80046e4 <TIM_OC4_SetConfig+0x58>)
 80046b2:	42a0      	cmp	r0, r4
 80046b4:	d005      	beq.n	80046c2 <TIM_OC4_SetConfig+0x36>
 80046b6:	4c0c      	ldr	r4, [pc, #48]	@ (80046e8 <TIM_OC4_SetConfig+0x5c>)
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d002      	beq.n	80046c2 <TIM_OC4_SetConfig+0x36>
 80046bc:	4c0b      	ldr	r4, [pc, #44]	@ (80046ec <TIM_OC4_SetConfig+0x60>)
 80046be:	42a0      	cmp	r0, r4
 80046c0:	d104      	bne.n	80046cc <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c2:	4c0b      	ldr	r4, [pc, #44]	@ (80046f0 <TIM_OC4_SetConfig+0x64>)
 80046c4:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c6:	694d      	ldr	r5, [r1, #20]
 80046c8:	01ad      	lsls	r5, r5, #6
 80046ca:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	684a      	ldr	r2, [r1, #4]
 80046d2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d4:	6203      	str	r3, [r0, #32]
}
 80046d6:	bd30      	pop	{r4, r5, pc}
 80046d8:	ffffefff 	.word	0xffffefff
 80046dc:	feff8cff 	.word	0xfeff8cff
 80046e0:	ffffdfff 	.word	0xffffdfff
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800
 80046f0:	ffffbfff 	.word	0xffffbfff

080046f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f6:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <TIM_OC5_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80046f8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046fa:	6a03      	ldr	r3, [r0, #32]
 80046fc:	4013      	ands	r3, r2
 80046fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004702:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx = TIMx->CCMR3;
 8004704:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004706:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	680b      	ldr	r3, [r1, #0]
 800470a:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <TIM_OC5_SetConfig+0x54>)
 800470e:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004710:	688b      	ldr	r3, [r1, #8]
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004716:	4d0d      	ldr	r5, [pc, #52]	@ (800474c <TIM_OC5_SetConfig+0x58>)
 8004718:	42a8      	cmp	r0, r5
 800471a:	d005      	beq.n	8004728 <TIM_OC5_SetConfig+0x34>
 800471c:	4d0c      	ldr	r5, [pc, #48]	@ (8004750 <TIM_OC5_SetConfig+0x5c>)
 800471e:	42a8      	cmp	r0, r5
 8004720:	d002      	beq.n	8004728 <TIM_OC5_SetConfig+0x34>
 8004722:	4d0c      	ldr	r5, [pc, #48]	@ (8004754 <TIM_OC5_SetConfig+0x60>)
 8004724:	42a8      	cmp	r0, r5
 8004726:	d104      	bne.n	8004732 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004728:	4d05      	ldr	r5, [pc, #20]	@ (8004740 <TIM_OC5_SetConfig+0x4c>)
 800472a:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800472c:	694c      	ldr	r4, [r1, #20]
 800472e:	0224      	lsls	r4, r4, #8
 8004730:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004732:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004734:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004736:	684a      	ldr	r2, [r1, #4]
 8004738:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473a:	6203      	str	r3, [r0, #32]
}
 800473c:	bd30      	pop	{r4, r5, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	fffeffff 	.word	0xfffeffff
 8004744:	fffeff8f 	.word	0xfffeff8f
 8004748:	fffdffff 	.word	0xfffdffff
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800475a:	4a12      	ldr	r2, [pc, #72]	@ (80047a4 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 800475c:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800475e:	6a03      	ldr	r3, [r0, #32]
 8004760:	4013      	ands	r3, r2
 8004762:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004764:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8004766:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8004768:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800476a:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	680a      	ldr	r2, [r1, #0]
 800476e:	0212      	lsls	r2, r2, #8
 8004770:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004772:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <TIM_OC6_SetConfig+0x54>)
 8004774:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004776:	688b      	ldr	r3, [r1, #8]
 8004778:	051b      	lsls	r3, r3, #20
 800477a:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	4c0c      	ldr	r4, [pc, #48]	@ (80047b0 <TIM_OC6_SetConfig+0x58>)
 800477e:	42a0      	cmp	r0, r4
 8004780:	d005      	beq.n	800478e <TIM_OC6_SetConfig+0x36>
 8004782:	4c0c      	ldr	r4, [pc, #48]	@ (80047b4 <TIM_OC6_SetConfig+0x5c>)
 8004784:	42a0      	cmp	r0, r4
 8004786:	d002      	beq.n	800478e <TIM_OC6_SetConfig+0x36>
 8004788:	4c0b      	ldr	r4, [pc, #44]	@ (80047b8 <TIM_OC6_SetConfig+0x60>)
 800478a:	42a0      	cmp	r0, r4
 800478c:	d104      	bne.n	8004798 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800478e:	4c0b      	ldr	r4, [pc, #44]	@ (80047bc <TIM_OC6_SetConfig+0x64>)
 8004790:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004792:	694d      	ldr	r5, [r1, #20]
 8004794:	02ad      	lsls	r5, r5, #10
 8004796:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800479a:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800479c:	684a      	ldr	r2, [r1, #4]
 800479e:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	6203      	str	r3, [r0, #32]
}
 80047a2:	bd30      	pop	{r4, r5, pc}
 80047a4:	ffefffff 	.word	0xffefffff
 80047a8:	feff8fff 	.word	0xfeff8fff
 80047ac:	ffdfffff 	.word	0xffdfffff
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	fffbffff 	.word	0xfffbffff

080047c0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80047c0:	213d      	movs	r1, #61	@ 0x3d
{
 80047c2:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80047c4:	5c42      	ldrb	r2, [r0, r1]
{
 80047c6:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80047c8:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80047ca:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80047cc:	2a01      	cmp	r2, #1
 80047ce:	d10f      	bne.n	80047f0 <HAL_TIM_Base_Start_IT+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	3201      	adds	r2, #1
 80047d2:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	4322      	orrs	r2, r4
 80047da:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <HAL_TIM_Base_Start_IT+0x50>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_TIM_Base_Start_IT+0x32>
 80047e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004814 <HAL_TIM_Base_Start_IT+0x54>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4322      	orrs	r2, r4
 80047ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80047ee:	2000      	movs	r0, #0
}
 80047f0:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	4908      	ldr	r1, [pc, #32]	@ (8004818 <HAL_TIM_Base_Start_IT+0x58>)
 80047f6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f8:	2a06      	cmp	r2, #6
 80047fa:	d0f8      	beq.n	80047ee <HAL_TIM_Base_Start_IT+0x2e>
 80047fc:	3907      	subs	r1, #7
 80047fe:	428a      	cmp	r2, r1
 8004800:	d0f5      	beq.n	80047ee <HAL_TIM_Base_Start_IT+0x2e>
      __HAL_TIM_ENABLE(htim);
 8004802:	2101      	movs	r1, #1
 8004804:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004806:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e7f0      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0x30>
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	00010007 	.word	0x00010007

0800481c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800481c:	2910      	cmp	r1, #16
 800481e:	d803      	bhi.n	8004828 <HAL_TIM_OC_Start+0xc>
 8004820:	4a2a      	ldr	r2, [pc, #168]	@ (80048cc <HAL_TIM_OC_Start+0xb0>)
 8004822:	008b      	lsls	r3, r1, #2
 8004824:	58d3      	ldr	r3, [r2, r3]
 8004826:	469f      	mov	pc, r3
 8004828:	2343      	movs	r3, #67	@ 0x43
 800482a:	5cc2      	ldrb	r2, [r0, r3]
 800482c:	2a01      	cmp	r2, #1
 800482e:	d12a      	bne.n	8004886 <HAL_TIM_OC_Start+0x6a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004830:	2202      	movs	r2, #2
 8004832:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004834:	221f      	movs	r2, #31
 8004836:	4011      	ands	r1, r2
 8004838:	3a1e      	subs	r2, #30
 800483a:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483e:	6a19      	ldr	r1, [r3, #32]
 8004840:	4391      	bics	r1, r2
 8004842:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004844:	6a19      	ldr	r1, [r3, #32]
 8004846:	430a      	orrs	r2, r1
 8004848:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484a:	4a21      	ldr	r2, [pc, #132]	@ (80048d0 <HAL_TIM_OC_Start+0xb4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d036      	beq.n	80048be <HAL_TIM_OC_Start+0xa2>
 8004850:	4a20      	ldr	r2, [pc, #128]	@ (80048d4 <HAL_TIM_OC_Start+0xb8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d02d      	beq.n	80048b2 <HAL_TIM_OC_Start+0x96>
 8004856:	4a20      	ldr	r2, [pc, #128]	@ (80048d8 <HAL_TIM_OC_Start+0xbc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d02a      	beq.n	80048b2 <HAL_TIM_OC_Start+0x96>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485c:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <HAL_TIM_OC_Start+0xc0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d107      	bne.n	8004872 <HAL_TIM_OC_Start+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	491e      	ldr	r1, [pc, #120]	@ (80048e0 <HAL_TIM_OC_Start+0xc4>)
 8004866:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	2a06      	cmp	r2, #6
 800486a:	d006      	beq.n	800487a <HAL_TIM_OC_Start+0x5e>
 800486c:	3907      	subs	r1, #7
 800486e:	428a      	cmp	r2, r1
 8004870:	d003      	beq.n	800487a <HAL_TIM_OC_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004872:	2101      	movs	r1, #1
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800487a:	2000      	movs	r0, #0
}
 800487c:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	233e      	movs	r3, #62	@ 0x3e
 8004880:	5cc2      	ldrb	r2, [r0, r3]
 8004882:	2a01      	cmp	r2, #1
 8004884:	d0d4      	beq.n	8004830 <HAL_TIM_OC_Start+0x14>
    return HAL_ERROR;
 8004886:	2001      	movs	r0, #1
 8004888:	e7f8      	b.n	800487c <HAL_TIM_OC_Start+0x60>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	233f      	movs	r3, #63	@ 0x3f
 800488c:	5cc2      	ldrb	r2, [r0, r3]
 800488e:	2a01      	cmp	r2, #1
 8004890:	d0ce      	beq.n	8004830 <HAL_TIM_OC_Start+0x14>
 8004892:	e7f8      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
 8004894:	2340      	movs	r3, #64	@ 0x40
 8004896:	5cc2      	ldrb	r2, [r0, r3]
 8004898:	2a01      	cmp	r2, #1
 800489a:	d0c9      	beq.n	8004830 <HAL_TIM_OC_Start+0x14>
 800489c:	e7f3      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
 800489e:	2341      	movs	r3, #65	@ 0x41
 80048a0:	5cc2      	ldrb	r2, [r0, r3]
 80048a2:	2a01      	cmp	r2, #1
 80048a4:	d0c4      	beq.n	8004830 <HAL_TIM_OC_Start+0x14>
 80048a6:	e7ee      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
 80048a8:	2342      	movs	r3, #66	@ 0x42
 80048aa:	5cc2      	ldrb	r2, [r0, r3]
 80048ac:	2a01      	cmp	r2, #1
 80048ae:	d0bf      	beq.n	8004830 <HAL_TIM_OC_Start+0x14>
 80048b0:	e7e9      	b.n	8004886 <HAL_TIM_OC_Start+0x6a>
    __HAL_TIM_MOE_ENABLE(htim);
 80048b2:	2280      	movs	r2, #128	@ 0x80
 80048b4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80048b6:	0212      	lsls	r2, r2, #8
 80048b8:	430a      	orrs	r2, r1
 80048ba:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	e7d9      	b.n	8004872 <HAL_TIM_OC_Start+0x56>
    __HAL_TIM_MOE_ENABLE(htim);
 80048be:	2280      	movs	r2, #128	@ 0x80
 80048c0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80048c2:	0212      	lsls	r2, r2, #8
 80048c4:	430a      	orrs	r2, r1
 80048c6:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c8:	e7cb      	b.n	8004862 <HAL_TIM_OC_Start+0x46>
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	080068c4 	.word	0x080068c4
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800
 80048dc:	40000400 	.word	0x40000400
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_OC_Stop>:
{
 80048e4:	b530      	push	{r4, r5, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e6:	251f      	movs	r5, #31
 80048e8:	2401      	movs	r4, #1
 80048ea:	400d      	ands	r5, r1
 80048ec:	40ac      	lsls	r4, r5
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048ee:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	43a2      	bics	r2, r4
 80048f4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fa:	4a23      	ldr	r2, [pc, #140]	@ (8004988 <HAL_TIM_OC_Stop+0xa4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d014      	beq.n	800492a <HAL_TIM_OC_Stop+0x46>
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_TIM_OC_Stop+0xa8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d011      	beq.n	800492a <HAL_TIM_OC_Stop+0x46>
 8004906:	4a22      	ldr	r2, [pc, #136]	@ (8004990 <HAL_TIM_OC_Stop+0xac>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_TIM_OC_Stop+0x46>
  __HAL_TIM_DISABLE(htim);
 800490c:	6a1c      	ldr	r4, [r3, #32]
 800490e:	4a21      	ldr	r2, [pc, #132]	@ (8004994 <HAL_TIM_OC_Stop+0xb0>)
 8004910:	4214      	tst	r4, r2
 8004912:	d103      	bne.n	800491c <HAL_TIM_OC_Stop+0x38>
 8004914:	6a1c      	ldr	r4, [r3, #32]
 8004916:	4a20      	ldr	r2, [pc, #128]	@ (8004998 <HAL_TIM_OC_Stop+0xb4>)
 8004918:	4214      	tst	r4, r2
 800491a:	d01f      	beq.n	800495c <HAL_TIM_OC_Stop+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	2900      	cmp	r1, #0
 800491e:	d111      	bne.n	8004944 <HAL_TIM_OC_Stop+0x60>
 8004920:	233e      	movs	r3, #62	@ 0x3e
 8004922:	2201      	movs	r2, #1
 8004924:	54c2      	strb	r2, [r0, r3]
}
 8004926:	2000      	movs	r0, #0
 8004928:	bd30      	pop	{r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 800492a:	6a1c      	ldr	r4, [r3, #32]
 800492c:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_TIM_OC_Stop+0xb0>)
 800492e:	4214      	tst	r4, r2
 8004930:	d1ec      	bne.n	800490c <HAL_TIM_OC_Stop+0x28>
 8004932:	6a1c      	ldr	r4, [r3, #32]
 8004934:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <HAL_TIM_OC_Stop+0xb4>)
 8004936:	4214      	tst	r4, r2
 8004938:	d1e8      	bne.n	800490c <HAL_TIM_OC_Stop+0x28>
 800493a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800493c:	4c17      	ldr	r4, [pc, #92]	@ (800499c <HAL_TIM_OC_Stop+0xb8>)
 800493e:	4022      	ands	r2, r4
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44
 8004942:	e7e3      	b.n	800490c <HAL_TIM_OC_Stop+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	2904      	cmp	r1, #4
 8004946:	d00e      	beq.n	8004966 <HAL_TIM_OC_Stop+0x82>
 8004948:	2908      	cmp	r1, #8
 800494a:	d014      	beq.n	8004976 <HAL_TIM_OC_Stop+0x92>
 800494c:	290c      	cmp	r1, #12
 800494e:	d00e      	beq.n	800496e <HAL_TIM_OC_Stop+0x8a>
 8004950:	2910      	cmp	r1, #16
 8004952:	d014      	beq.n	800497e <HAL_TIM_OC_Stop+0x9a>
 8004954:	2343      	movs	r3, #67	@ 0x43
 8004956:	2201      	movs	r2, #1
 8004958:	54c2      	strb	r2, [r0, r3]
 800495a:	e7e4      	b.n	8004926 <HAL_TIM_OC_Stop+0x42>
  __HAL_TIM_DISABLE(htim);
 800495c:	2401      	movs	r4, #1
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	43a2      	bics	r2, r4
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e7da      	b.n	800491c <HAL_TIM_OC_Stop+0x38>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	233f      	movs	r3, #63	@ 0x3f
 8004968:	2201      	movs	r2, #1
 800496a:	54c2      	strb	r2, [r0, r3]
 800496c:	e7db      	b.n	8004926 <HAL_TIM_OC_Stop+0x42>
 800496e:	2341      	movs	r3, #65	@ 0x41
 8004970:	2201      	movs	r2, #1
 8004972:	54c2      	strb	r2, [r0, r3]
 8004974:	e7d7      	b.n	8004926 <HAL_TIM_OC_Stop+0x42>
 8004976:	2340      	movs	r3, #64	@ 0x40
 8004978:	2201      	movs	r2, #1
 800497a:	54c2      	strb	r2, [r0, r3]
 800497c:	e7d3      	b.n	8004926 <HAL_TIM_OC_Stop+0x42>
 800497e:	2342      	movs	r3, #66	@ 0x42
 8004980:	2201      	movs	r2, #1
 8004982:	54c2      	strb	r2, [r0, r3]
 8004984:	e7cf      	b.n	8004926 <HAL_TIM_OC_Stop+0x42>
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800
 8004994:	00001111 	.word	0x00001111
 8004998:	00000444 	.word	0x00000444
 800499c:	ffff7fff 	.word	0xffff7fff

080049a0 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80049a0:	4770      	bx	lr
 80049a2:	46c0      	nop			@ (mov r8, r8)

080049a4 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80049a4:	b510      	push	{r4, lr}
 80049a6:	f7ff ff39 	bl	800481c <HAL_TIM_OC_Start>
 80049aa:	bd10      	pop	{r4, pc}

080049ac <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 80049ac:	b510      	push	{r4, lr}
 80049ae:	f7ff ff99 	bl	80048e4 <HAL_TIM_OC_Stop>
 80049b2:	bd10      	pop	{r4, pc}

080049b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80049b4:	233c      	movs	r3, #60	@ 0x3c
{
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80049ba:	5cc0      	ldrb	r0, [r0, r3]
 80049bc:	2801      	cmp	r0, #1
 80049be:	d100      	bne.n	80049c2 <HAL_TIM_ConfigClockSource+0xe>
 80049c0:	e073      	b.n	8004aaa <HAL_TIM_ConfigClockSource+0xf6>
 80049c2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80049c6:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	3301      	adds	r3, #1
 80049ca:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80049cc:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ce:	4d51      	ldr	r5, [pc, #324]	@ (8004b14 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 80049d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80049d4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80049d6:	680b      	ldr	r3, [r1, #0]
 80049d8:	2b60      	cmp	r3, #96	@ 0x60
 80049da:	d100      	bne.n	80049de <HAL_TIM_ConfigClockSource+0x2a>
 80049dc:	e067      	b.n	8004aae <HAL_TIM_ConfigClockSource+0xfa>
 80049de:	d81d      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x68>
 80049e0:	2b40      	cmp	r3, #64	@ 0x40
 80049e2:	d100      	bne.n	80049e6 <HAL_TIM_ConfigClockSource+0x32>
 80049e4:	e07d      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x12e>
 80049e6:	d93f      	bls.n	8004a68 <HAL_TIM_ConfigClockSource+0xb4>
 80049e8:	2b50      	cmp	r3, #80	@ 0x50
 80049ea:	d135      	bne.n	8004a58 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 80049ec:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80049ee:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80049f0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049f4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	43a6      	bics	r6, r4
 80049f8:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049fa:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80049fc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049fe:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a00:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a02:	240a      	movs	r4, #10
 8004a04:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004a06:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004a08:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004a0a:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004a0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a0e:	4942      	ldr	r1, [pc, #264]	@ (8004b18 <HAL_TIM_ConfigClockSource+0x164>)
 8004a10:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a12:	2157      	movs	r1, #87	@ 0x57
 8004a14:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a16:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e01e      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004a1c:	2480      	movs	r4, #128	@ 0x80
 8004a1e:	0164      	lsls	r4, r4, #5
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d0f9      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0x64>
 8004a24:	2480      	movs	r4, #128	@ 0x80
 8004a26:	01a4      	lsls	r4, r4, #6
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d12b      	bne.n	8004a84 <HAL_TIM_ConfigClockSource+0xd0>
  tmpsmcr = TIMx->SMCR;
 8004a2c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b1c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a32:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a34:	688b      	ldr	r3, [r1, #8]
 8004a36:	68c9      	ldr	r1, [r1, #12]
 8004a38:	432b      	orrs	r3, r5
 8004a3a:	0209      	lsls	r1, r1, #8
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004a40:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a42:	2380      	movs	r3, #128	@ 0x80
 8004a44:	6881      	ldr	r1, [r0, #8]
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	e004      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004a50:	2110      	movs	r1, #16
 8004a52:	001c      	movs	r4, r3
 8004a54:	438c      	bics	r4, r1
 8004a56:	d00c      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8004a58:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	233d      	movs	r3, #61	@ 0x3d
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8004a60:	2100      	movs	r1, #0
 8004a62:	3b01      	subs	r3, #1
 8004a64:	54d1      	strb	r1, [r2, r3]
}
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d002      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xbe>
 8004a6c:	d9f0      	bls.n	8004a50 <HAL_TIM_ConfigClockSource+0x9c>
 8004a6e:	2b30      	cmp	r3, #48	@ 0x30
 8004a70:	d1f2      	bne.n	8004a58 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8004a72:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a74:	4c28      	ldr	r4, [pc, #160]	@ (8004b18 <HAL_TIM_ConfigClockSource+0x164>)
 8004a76:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	2107      	movs	r1, #7
 8004a7c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004a7e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2000      	movs	r0, #0
 8004a82:	e7ea      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004a84:	2b70      	cmp	r3, #112	@ 0x70
 8004a86:	d1e7      	bne.n	8004a58 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8004a88:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8a:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a8c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a90:	688b      	ldr	r3, [r1, #8]
 8004a92:	68c9      	ldr	r1, [r1, #12]
 8004a94:	432b      	orrs	r3, r5
 8004a96:	0209      	lsls	r1, r1, #8
 8004a98:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a9a:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a9c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004a9e:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004aa0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aa2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004aa4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	e7d7      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8004aaa:	2002      	movs	r0, #2
 8004aac:	e7db      	b.n	8004a66 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aae:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8004ab0:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab2:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004ab4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab6:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8004ab8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aba:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abc:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004abe:	4e18      	ldr	r6, [pc, #96]	@ (8004b20 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac0:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac2:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac4:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac6:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac8:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aca:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8004acc:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8004ace:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8004ad0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ad2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad4:	4910      	ldr	r1, [pc, #64]	@ (8004b18 <HAL_TIM_ConfigClockSource+0x164>)
 8004ad6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ad8:	2167      	movs	r1, #103	@ 0x67
 8004ada:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004adc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e7bb      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8004ae2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004ae4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004ae6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae8:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aea:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aec:	43a6      	bics	r6, r4
 8004aee:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af0:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004af8:	240a      	movs	r4, #10
 8004afa:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004afc:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004afe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b00:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004b02:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b04:	4904      	ldr	r1, [pc, #16]	@ (8004b18 <HAL_TIM_ConfigClockSource+0x164>)
 8004b06:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b08:	2147      	movs	r1, #71	@ 0x47
 8004b0a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004b0c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e7a3      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0xa6>
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	ffce0088 	.word	0xffce0088
 8004b18:	ffcfff8f 	.word	0xffcfff8f
 8004b1c:	ffff00ff 	.word	0xffff00ff
 8004b20:	ffff0fff 	.word	0xffff0fff

08004b24 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8004b24:	4770      	bx	lr
 8004b26:	46c0      	nop			@ (mov r8, r8)

08004b28 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004b28:	4770      	bx	lr
 8004b2a:	46c0      	nop			@ (mov r8, r8)

08004b2c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004b2c:	4770      	bx	lr
 8004b2e:	46c0      	nop			@ (mov r8, r8)

08004b30 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004b30:	4770      	bx	lr
 8004b32:	46c0      	nop			@ (mov r8, r8)

08004b34 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004b34:	4770      	bx	lr
 8004b36:	46c0      	nop			@ (mov r8, r8)

08004b38 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b38:	2202      	movs	r2, #2
{
 8004b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004b3c:	6803      	ldr	r3, [r0, #0]
{
 8004b3e:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8004b40:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b42:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b44:	4222      	tst	r2, r4
 8004b46:	d001      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b48:	4232      	tst	r2, r6
 8004b4a:	d162      	bne.n	8004c12 <HAL_TIM_IRQHandler+0xda>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	4223      	tst	r3, r4
 8004b50:	d001      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	4233      	tst	r3, r6
 8004b54:	d149      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b56:	2308      	movs	r3, #8
 8004b58:	4223      	tst	r3, r4
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b5c:	4233      	tst	r3, r6
 8004b5e:	d132      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x8e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b60:	2310      	movs	r3, #16
 8004b62:	4223      	tst	r3, r4
 8004b64:	d001      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b66:	4233      	tst	r3, r6
 8004b68:	d119      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x66>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4223      	tst	r3, r4
 8004b6e:	d001      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b70:	4233      	tst	r3, r6
 8004b72:	d16a      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b74:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b76:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b78:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b7a:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b7c:	4027      	ands	r7, r4
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b7e:	421c      	tst	r4, r3
 8004b80:	d056      	beq.n	8004c30 <HAL_TIM_IRQHandler+0xf8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b82:	0633      	lsls	r3, r6, #24
 8004b84:	d469      	bmi.n	8004c5a <HAL_TIM_IRQHandler+0x122>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	4223      	tst	r3, r4
 8004b8a:	d002      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b8c:	4233      	tst	r3, r6
 8004b8e:	d000      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x5a>
 8004b90:	e073      	b.n	8004c7a <HAL_TIM_IRQHandler+0x142>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b92:	2320      	movs	r3, #32
 8004b94:	4223      	tst	r3, r4
 8004b96:	d001      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x64>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b98:	4233      	tst	r3, r6
 8004b9a:	d14e      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x102>
}
 8004b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b9e:	2211      	movs	r2, #17
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	4252      	negs	r2, r2
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba6:	3219      	adds	r2, #25
 8004ba8:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	23c0      	movs	r3, #192	@ 0xc0
 8004bae:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb0:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb2:	421a      	tst	r2, r3
 8004bb4:	d172      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x164>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	f7ff ffb7 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bba:	0028      	movs	r0, r5
 8004bbc:	f7ff ffb8 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	772b      	strb	r3, [r5, #28]
 8004bc4:	e7d1      	b.n	8004b6a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bc6:	2209      	movs	r2, #9
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	4252      	negs	r2, r2
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bce:	320d      	adds	r2, #13
 8004bd0:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd6:	079b      	lsls	r3, r3, #30
 8004bd8:	d15d      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x15e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	f7ff ffa5 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	0028      	movs	r0, r5
 8004be0:	f7ff ffa6 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be4:	2300      	movs	r3, #0
 8004be6:	772b      	strb	r3, [r5, #28]
 8004be8:	e7ba      	b.n	8004b60 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bea:	2205      	movs	r2, #5
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	4252      	negs	r2, r2
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	3207      	adds	r2, #7
 8004bf4:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	23c0      	movs	r3, #192	@ 0xc0
 8004bfa:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfc:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfe:	421a      	tst	r2, r3
 8004c00:	d146      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	f7ff ff91 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c06:	0028      	movs	r0, r5
 8004c08:	f7ff ff92 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	772b      	strb	r3, [r5, #28]
 8004c10:	e7a1      	b.n	8004b56 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c12:	3a05      	subs	r2, #5
 8004c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c16:	3204      	adds	r2, #4
 8004c18:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	079b      	lsls	r3, r3, #30
 8004c1e:	d134      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c20:	f7ff ff82 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	0028      	movs	r0, r5
 8004c26:	f7ff ff83 	bl	8004b30 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	772b      	strb	r3, [r5, #28]
 8004c2e:	e78d      	b.n	8004b4c <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c30:	2f00      	cmp	r7, #0
 8004c32:	d0a8      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c34:	0633      	lsls	r3, r6, #24
 8004c36:	d5a6      	bpl.n	8004b86 <HAL_TIM_IRQHandler+0x4e>
 8004c38:	e018      	b.n	8004c6c <HAL_TIM_IRQHandler+0x134>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c3a:	2221      	movs	r2, #33	@ 0x21
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8004c40:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004c44:	f000 fad8 	bl	80051f8 <HAL_TIMEx_CommutCallback>
}
 8004c48:	e7a8      	b.n	8004b9c <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c50:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c52:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c54:	f7ff ff66 	bl	8004b24 <HAL_TIM_PeriodElapsedCallback>
 8004c58:	e78c      	b.n	8004b74 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	4a11      	ldr	r2, [pc, #68]	@ (8004ca4 <HAL_TIM_IRQHandler+0x16c>)
      HAL_TIMEx_BreakCallback(htim);
 8004c5e:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c62:	f000 facb 	bl	80051fc <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c66:	2f00      	cmp	r7, #0
 8004c68:	d100      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x134>
 8004c6a:	e78c      	b.n	8004b86 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca8 <HAL_TIM_IRQHandler+0x170>)
      HAL_TIMEx_Break2Callback(htim);
 8004c70:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004c74:	f000 fac4 	bl	8005200 <HAL_TIMEx_Break2Callback>
 8004c78:	e785      	b.n	8004b86 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c7a:	2241      	movs	r2, #65	@ 0x41
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8004c80:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c82:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c84:	f7ff ff56 	bl	8004b34 <HAL_TIM_TriggerCallback>
 8004c88:	e783      	b.n	8004b92 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	f7ff ff4f 	bl	8004b2c <HAL_TIM_IC_CaptureCallback>
 8004c8e:	e7cc      	b.n	8004c2a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c90:	f7ff ff4c 	bl	8004b2c <HAL_TIM_IC_CaptureCallback>
 8004c94:	e7ba      	b.n	8004c0c <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	f7ff ff49 	bl	8004b2c <HAL_TIM_IC_CaptureCallback>
 8004c9a:	e7a3      	b.n	8004be4 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9c:	f7ff ff46 	bl	8004b2c <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e78e      	b.n	8004bc0 <HAL_TIM_IRQHandler+0x88>
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	ffffdf7f 	.word	0xffffdf7f
 8004ca8:	fffffeff 	.word	0xfffffeff

08004cac <TIM_Base_SetConfig>:
{
 8004cac:	b570      	push	{r4, r5, r6, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cae:	4e21      	ldr	r6, [pc, #132]	@ (8004d34 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8004cb0:	6803      	ldr	r3, [r0, #0]
  TIMx->PSC = Structure->Prescaler;
 8004cb2:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb4:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb6:	694d      	ldr	r5, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb8:	42b0      	cmp	r0, r6
 8004cba:	d029      	beq.n	8004d10 <TIM_Base_SetConfig+0x64>
 8004cbc:	4e1e      	ldr	r6, [pc, #120]	@ (8004d38 <TIM_Base_SetConfig+0x8c>)
 8004cbe:	42b0      	cmp	r0, r6
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0x46>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	4e1e      	ldr	r6, [pc, #120]	@ (8004d3c <TIM_Base_SetConfig+0x90>)
 8004cc4:	42b0      	cmp	r0, r6
 8004cc6:	d018      	beq.n	8004cfa <TIM_Base_SetConfig+0x4e>
 8004cc8:	4e1d      	ldr	r6, [pc, #116]	@ (8004d40 <TIM_Base_SetConfig+0x94>)
 8004cca:	42b0      	cmp	r0, r6
 8004ccc:	d024      	beq.n	8004d18 <TIM_Base_SetConfig+0x6c>
 8004cce:	4e1d      	ldr	r6, [pc, #116]	@ (8004d44 <TIM_Base_SetConfig+0x98>)
 8004cd0:	42b0      	cmp	r0, r6
 8004cd2:	d021      	beq.n	8004d18 <TIM_Base_SetConfig+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd4:	2180      	movs	r1, #128	@ 0x80
 8004cd6:	438b      	bics	r3, r1
 8004cd8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004cda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cde:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ce4:	6902      	ldr	r2, [r0, #16]
 8004ce6:	4213      	tst	r3, r2
 8004ce8:	d002      	beq.n	8004cf0 <TIM_Base_SetConfig+0x44>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cea:	6902      	ldr	r2, [r0, #16]
 8004cec:	439a      	bics	r2, r3
 8004cee:	6102      	str	r2, [r0, #16]
}
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf2:	2670      	movs	r6, #112	@ 0x70
 8004cf4:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8004cf6:	684e      	ldr	r6, [r1, #4]
 8004cf8:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	4e13      	ldr	r6, [pc, #76]	@ (8004d48 <TIM_Base_SetConfig+0x9c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfc:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfe:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d00:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d02:	2180      	movs	r1, #128	@ 0x80
 8004d04:	438b      	bics	r3, r1
 8004d06:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8004d08:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d0c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0e:	e7e7      	b.n	8004ce0 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d10:	2670      	movs	r6, #112	@ 0x70
 8004d12:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8004d14:	684e      	ldr	r6, [r1, #4]
 8004d16:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d18:	4e0b      	ldr	r6, [pc, #44]	@ (8004d48 <TIM_Base_SetConfig+0x9c>)
 8004d1a:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1c:	68ce      	ldr	r6, [r1, #12]
 8004d1e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	2680      	movs	r6, #128	@ 0x80
 8004d22:	43b3      	bics	r3, r6
 8004d24:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004d26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d2a:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004d2c:	690b      	ldr	r3, [r1, #16]
 8004d2e:	6303      	str	r3, [r0, #48]	@ 0x30
 8004d30:	e7d6      	b.n	8004ce0 <TIM_Base_SetConfig+0x34>
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40002000 	.word	0x40002000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	fffffcff 	.word	0xfffffcff

08004d4c <HAL_TIM_Base_Init>:
{
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004d50:	d02a      	beq.n	8004da8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d52:	233d      	movs	r3, #61	@ 0x3d
 8004d54:	5cc3      	ldrb	r3, [r0, r3]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004d62:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d64:	c901      	ldmia	r1!, {r0}
 8004d66:	f7ff ffa1 	bl	8004cac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8004d6e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	3a0a      	subs	r2, #10
 8004d74:	54a3      	strb	r3, [r4, r2]
 8004d76:	3201      	adds	r2, #1
 8004d78:	54a3      	strb	r3, [r4, r2]
 8004d7a:	3201      	adds	r2, #1
 8004d7c:	54a3      	strb	r3, [r4, r2]
 8004d7e:	3201      	adds	r2, #1
 8004d80:	54a3      	strb	r3, [r4, r2]
 8004d82:	3201      	adds	r2, #1
 8004d84:	54a3      	strb	r3, [r4, r2]
 8004d86:	3201      	adds	r2, #1
 8004d88:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	54a3      	strb	r3, [r4, r2]
 8004d8e:	3201      	adds	r2, #1
 8004d90:	54a3      	strb	r3, [r4, r2]
 8004d92:	3201      	adds	r2, #1
 8004d94:	54a3      	strb	r3, [r4, r2]
 8004d96:	3201      	adds	r2, #1
 8004d98:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004d9a:	5563      	strb	r3, [r4, r5]
}
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	333c      	adds	r3, #60	@ 0x3c
 8004da0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004da2:	f7fc ff4f 	bl	8001c44 <HAL_TIM_Base_MspInit>
 8004da6:	e7d9      	b.n	8004d5c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004da8:	2001      	movs	r0, #1
 8004daa:	e7f7      	b.n	8004d9c <HAL_TIM_Base_Init+0x50>

08004dac <HAL_TIM_PWM_Init>:
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004db0:	d02a      	beq.n	8004e08 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004db2:	233d      	movs	r3, #61	@ 0x3d
 8004db4:	5cc3      	ldrb	r3, [r0, r3]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d020      	beq.n	8004dfe <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc0:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	c901      	ldmia	r1!, {r0}
 8004dc6:	f7ff ff71 	bl	8004cac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8004dce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	3a0a      	subs	r2, #10
 8004dd4:	54a3      	strb	r3, [r4, r2]
 8004dd6:	3201      	adds	r2, #1
 8004dd8:	54a3      	strb	r3, [r4, r2]
 8004dda:	3201      	adds	r2, #1
 8004ddc:	54a3      	strb	r3, [r4, r2]
 8004dde:	3201      	adds	r2, #1
 8004de0:	54a3      	strb	r3, [r4, r2]
 8004de2:	3201      	adds	r2, #1
 8004de4:	54a3      	strb	r3, [r4, r2]
 8004de6:	3201      	adds	r2, #1
 8004de8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	3201      	adds	r2, #1
 8004dec:	54a3      	strb	r3, [r4, r2]
 8004dee:	3201      	adds	r2, #1
 8004df0:	54a3      	strb	r3, [r4, r2]
 8004df2:	3201      	adds	r2, #1
 8004df4:	54a3      	strb	r3, [r4, r2]
 8004df6:	3201      	adds	r2, #1
 8004df8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	5563      	strb	r3, [r4, r5]
}
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004dfe:	333c      	adds	r3, #60	@ 0x3c
 8004e00:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004e02:	f7ff fdcd 	bl	80049a0 <HAL_TIM_PWM_MspInit>
 8004e06:	e7d9      	b.n	8004dbc <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004e08:	2001      	movs	r0, #1
 8004e0a:	e7f7      	b.n	8004dfc <HAL_TIM_PWM_Init+0x50>

08004e0c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0c:	2210      	movs	r2, #16
{
 8004e0e:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8004e10:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e12:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e14:	4d16      	ldr	r5, [pc, #88]	@ (8004e70 <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e16:	4393      	bics	r3, r2
 8004e18:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004e1a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e1c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e1e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e20:	680d      	ldr	r5, [r1, #0]
 8004e22:	022d      	lsls	r5, r5, #8
 8004e24:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8004e26:	2220      	movs	r2, #32
 8004e28:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e2a:	688a      	ldr	r2, [r1, #8]
 8004e2c:	0112      	lsls	r2, r2, #4
 8004e2e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e30:	4c10      	ldr	r4, [pc, #64]	@ (8004e74 <TIM_OC2_SetConfig+0x68>)
 8004e32:	42a0      	cmp	r0, r4
 8004e34:	d012      	beq.n	8004e5c <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e36:	4c10      	ldr	r4, [pc, #64]	@ (8004e78 <TIM_OC2_SetConfig+0x6c>)
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d002      	beq.n	8004e42 <TIM_OC2_SetConfig+0x36>
 8004e3c:	4c0f      	ldr	r4, [pc, #60]	@ (8004e7c <TIM_OC2_SetConfig+0x70>)
 8004e3e:	42a0      	cmp	r0, r4
 8004e40:	d106      	bne.n	8004e50 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e42:	4c0f      	ldr	r4, [pc, #60]	@ (8004e80 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e46:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e48:	698b      	ldr	r3, [r1, #24]
 8004e4a:	4333      	orrs	r3, r6
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8004e50:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004e52:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004e54:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004e56:	6383      	str	r3, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004e58:	6202      	str	r2, [r0, #32]
}
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e5c:	2480      	movs	r4, #128	@ 0x80
 8004e5e:	43a2      	bics	r2, r4
 8004e60:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e62:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e64:	3c40      	subs	r4, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e66:	0112      	lsls	r2, r2, #4
 8004e68:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e6a:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	e7e9      	b.n	8004e42 <TIM_OC2_SetConfig+0x36>
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	feff8cff 	.word	0xfeff8cff
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40014400 	.word	0x40014400
 8004e7c:	40014800 	.word	0x40014800
 8004e80:	fffff3ff 	.word	0xfffff3ff

08004e84 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004e84:	233c      	movs	r3, #60	@ 0x3c
{
 8004e86:	b570      	push	{r4, r5, r6, lr}
 8004e88:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004e8a:	5cc1      	ldrb	r1, [r0, r3]
{
 8004e8c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004e8e:	2901      	cmp	r1, #1
 8004e90:	d100      	bne.n	8004e94 <HAL_TIM_PWM_ConfigChannel+0x10>
 8004e92:	e084      	b.n	8004f9e <HAL_TIM_PWM_ConfigChannel+0x11a>
 8004e94:	2101      	movs	r1, #1
 8004e96:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8004e98:	2a14      	cmp	r2, #20
 8004e9a:	d803      	bhi.n	8004ea4 <HAL_TIM_PWM_ConfigChannel+0x20>
 8004e9c:	4b41      	ldr	r3, [pc, #260]	@ (8004fa4 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8004e9e:	0092      	lsls	r2, r2, #2
 8004ea0:	589b      	ldr	r3, [r3, r2]
 8004ea2:	469f      	mov	pc, r3
 8004ea4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004ea6:	233c      	movs	r3, #60	@ 0x3c
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	54e2      	strb	r2, [r4, r3]
}
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eae:	6806      	ldr	r6, [r0, #0]
 8004eb0:	0029      	movs	r1, r5
 8004eb2:	0030      	movs	r0, r6
 8004eb4:	f7ff fc50 	bl	8004758 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ec2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004ec4:	4a38      	ldr	r2, [pc, #224]	@ (8004fa8 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2000      	movs	r0, #0
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ec8:	4013      	ands	r3, r2
 8004eca:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ecc:	692b      	ldr	r3, [r5, #16]
 8004ece:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 8004ed6:	e7e6      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed8:	6806      	ldr	r6, [r0, #0]
 8004eda:	0029      	movs	r1, r5
 8004edc:	0030      	movs	r0, r6
 8004ede:	f7ff fb5d 	bl	800459c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eec:	69b3      	ldr	r3, [r6, #24]
 8004eee:	3a04      	subs	r2, #4
 8004ef0:	4393      	bics	r3, r2
 8004ef2:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef4:	69b3      	ldr	r3, [r6, #24]
 8004ef6:	692a      	ldr	r2, [r5, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61b3      	str	r3, [r6, #24]
      break;
 8004efc:	e7d3      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004efe:	6806      	ldr	r6, [r0, #0]
 8004f00:	0029      	movs	r1, r5
 8004f02:	0030      	movs	r0, r6
 8004f04:	f7ff ff82 	bl	8004e0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	69b2      	ldr	r2, [r6, #24]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f12:	69b3      	ldr	r3, [r6, #24]
 8004f14:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f1c:	692b      	ldr	r3, [r5, #16]
 8004f1e:	69b2      	ldr	r2, [r6, #24]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61b3      	str	r3, [r6, #24]
      break;
 8004f26:	e7be      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f28:	6806      	ldr	r6, [r0, #0]
 8004f2a:	0029      	movs	r1, r5
 8004f2c:	0030      	movs	r0, r6
 8004f2e:	f7ff fb6b 	bl	8004608 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f32:	2208      	movs	r2, #8
 8004f34:	69f3      	ldr	r3, [r6, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f3c:	69f3      	ldr	r3, [r6, #28]
 8004f3e:	3a04      	subs	r2, #4
 8004f40:	4393      	bics	r3, r2
 8004f42:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f44:	69f3      	ldr	r3, [r6, #28]
 8004f46:	692a      	ldr	r2, [r5, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61f3      	str	r3, [r6, #28]
      break;
 8004f4c:	e7ab      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4e:	6806      	ldr	r6, [r0, #0]
 8004f50:	0029      	movs	r1, r5
 8004f52:	0030      	movs	r0, r6
 8004f54:	f7ff fb9a 	bl	800468c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	69f2      	ldr	r2, [r6, #28]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f62:	69f3      	ldr	r3, [r6, #28]
 8004f64:	4a10      	ldr	r2, [pc, #64]	@ (8004fa8 <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6c:	692b      	ldr	r3, [r5, #16]
 8004f6e:	69f2      	ldr	r2, [r6, #28]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61f3      	str	r3, [r6, #28]
      break;
 8004f76:	e796      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f78:	6806      	ldr	r6, [r0, #0]
 8004f7a:	0029      	movs	r1, r5
 8004f7c:	0030      	movs	r0, r6
 8004f7e:	f7ff fbb9 	bl	80046f4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f82:	2208      	movs	r2, #8
 8004f84:	6d73      	ldr	r3, [r6, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f8c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004f8e:	3a04      	subs	r2, #4
 8004f90:	4393      	bics	r3, r2
 8004f92:	6573      	str	r3, [r6, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f94:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004f96:	692a      	ldr	r2, [r5, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	6573      	str	r3, [r6, #84]	@ 0x54
      break;
 8004f9c:	e783      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 8004f9e:	2002      	movs	r0, #2
 8004fa0:	e784      	b.n	8004eac <HAL_TIM_PWM_ConfigChannel+0x28>
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	08006908 	.word	0x08006908
 8004fa8:	fffffbff 	.word	0xfffffbff

08004fac <HAL_TIMEx_OCN_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fac:	2900      	cmp	r1, #0
 8004fae:	d12b      	bne.n	8005008 <HAL_TIMEx_OCN_Start+0x5c>
 8004fb0:	2344      	movs	r3, #68	@ 0x44
 8004fb2:	5cc2      	ldrb	r2, [r0, r3]
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	d12f      	bne.n	8005018 <HAL_TIMEx_OCN_Start+0x6c>
  {
    return HAL_ERROR;
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb8:	2202      	movs	r2, #2
 8004fba:	54c2      	strb	r2, [r0, r3]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	4011      	ands	r1, r2
 8004fc0:	3a0b      	subs	r2, #11
 8004fc2:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004fc4:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004fc6:	6a19      	ldr	r1, [r3, #32]
 8004fc8:	4391      	bics	r1, r2
 8004fca:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004fcc:	6a19      	ldr	r1, [r3, #32]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004fd6:	0212      	lsls	r2, r2, #8
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fdc:	4a14      	ldr	r2, [pc, #80]	@ (8005030 <HAL_TIMEx_OCN_Start+0x84>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d008      	beq.n	8004ff4 <HAL_TIMEx_OCN_Start+0x48>
 8004fe2:	4a14      	ldr	r2, [pc, #80]	@ (8005034 <HAL_TIMEx_OCN_Start+0x88>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d005      	beq.n	8004ff4 <HAL_TIMEx_OCN_Start+0x48>
      __HAL_TIM_ENABLE(htim);
 8004fe8:	2101      	movs	r1, #1
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e012      	b.n	800501a <HAL_TIMEx_OCN_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	4910      	ldr	r1, [pc, #64]	@ (8005038 <HAL_TIMEx_OCN_Start+0x8c>)
 8004ff8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	2a06      	cmp	r2, #6
 8004ffc:	d0f8      	beq.n	8004ff0 <HAL_TIMEx_OCN_Start+0x44>
 8004ffe:	3907      	subs	r1, #7
 8005000:	428a      	cmp	r2, r1
 8005002:	d1f1      	bne.n	8004fe8 <HAL_TIMEx_OCN_Start+0x3c>
  return HAL_OK;
 8005004:	2000      	movs	r0, #0
 8005006:	e008      	b.n	800501a <HAL_TIMEx_OCN_Start+0x6e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005008:	2904      	cmp	r1, #4
 800500a:	d007      	beq.n	800501c <HAL_TIMEx_OCN_Start+0x70>
 800500c:	2908      	cmp	r1, #8
 800500e:	d00a      	beq.n	8005026 <HAL_TIMEx_OCN_Start+0x7a>
 8005010:	2347      	movs	r3, #71	@ 0x47
 8005012:	5cc2      	ldrb	r2, [r0, r3]
 8005014:	2a01      	cmp	r2, #1
 8005016:	d0cf      	beq.n	8004fb8 <HAL_TIMEx_OCN_Start+0xc>
    return HAL_ERROR;
 8005018:	2001      	movs	r0, #1
}
 800501a:	4770      	bx	lr
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800501c:	2345      	movs	r3, #69	@ 0x45
 800501e:	5cc2      	ldrb	r2, [r0, r3]
 8005020:	2a01      	cmp	r2, #1
 8005022:	d0c9      	beq.n	8004fb8 <HAL_TIMEx_OCN_Start+0xc>
 8005024:	e7f8      	b.n	8005018 <HAL_TIMEx_OCN_Start+0x6c>
 8005026:	2346      	movs	r3, #70	@ 0x46
 8005028:	5cc2      	ldrb	r2, [r0, r3]
 800502a:	2a01      	cmp	r2, #1
 800502c:	d0c4      	beq.n	8004fb8 <HAL_TIMEx_OCN_Start+0xc>
 800502e:	e7f3      	b.n	8005018 <HAL_TIMEx_OCN_Start+0x6c>
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	00010007 	.word	0x00010007

0800503c <HAL_TIMEx_OCN_Stop>:
{
 800503c:	b530      	push	{r4, r5, lr}
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800503e:	250f      	movs	r5, #15
 8005040:	2404      	movs	r4, #4
 8005042:	400d      	ands	r5, r1
 8005044:	40ac      	lsls	r4, r5
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005046:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &=  ~tmp;
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	43a2      	bics	r2, r4
 800504c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_DISABLE(htim);
 8005052:	6a1c      	ldr	r4, [r3, #32]
 8005054:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <HAL_TIMEx_OCN_Stop+0x78>)
 8005056:	4214      	tst	r4, r2
 8005058:	d103      	bne.n	8005062 <HAL_TIMEx_OCN_Stop+0x26>
 800505a:	6a1c      	ldr	r4, [r3, #32]
 800505c:	4a16      	ldr	r2, [pc, #88]	@ (80050b8 <HAL_TIMEx_OCN_Stop+0x7c>)
 800505e:	4214      	tst	r4, r2
 8005060:	d01b      	beq.n	800509a <HAL_TIMEx_OCN_Stop+0x5e>
  __HAL_TIM_DISABLE(htim);
 8005062:	6a1c      	ldr	r4, [r3, #32]
 8005064:	4a13      	ldr	r2, [pc, #76]	@ (80050b4 <HAL_TIMEx_OCN_Stop+0x78>)
 8005066:	4214      	tst	r4, r2
 8005068:	d103      	bne.n	8005072 <HAL_TIMEx_OCN_Stop+0x36>
 800506a:	6a1c      	ldr	r4, [r3, #32]
 800506c:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <HAL_TIMEx_OCN_Stop+0x7c>)
 800506e:	4214      	tst	r4, r2
 8005070:	d00e      	beq.n	8005090 <HAL_TIMEx_OCN_Stop+0x54>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	2900      	cmp	r1, #0
 8005074:	d104      	bne.n	8005080 <HAL_TIMEx_OCN_Stop+0x44>
 8005076:	2344      	movs	r3, #68	@ 0x44
 8005078:	2201      	movs	r2, #1
 800507a:	54c2      	strb	r2, [r0, r3]
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd30      	pop	{r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	2904      	cmp	r1, #4
 8005082:	d00f      	beq.n	80050a4 <HAL_TIMEx_OCN_Stop+0x68>
 8005084:	2908      	cmp	r1, #8
 8005086:	d011      	beq.n	80050ac <HAL_TIMEx_OCN_Stop+0x70>
 8005088:	2347      	movs	r3, #71	@ 0x47
 800508a:	2201      	movs	r2, #1
 800508c:	54c2      	strb	r2, [r0, r3]
 800508e:	e7f5      	b.n	800507c <HAL_TIMEx_OCN_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8005090:	2401      	movs	r4, #1
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	43a2      	bics	r2, r4
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e7eb      	b.n	8005072 <HAL_TIMEx_OCN_Stop+0x36>
  __HAL_TIM_MOE_DISABLE(htim);
 800509a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800509c:	4c07      	ldr	r4, [pc, #28]	@ (80050bc <HAL_TIMEx_OCN_Stop+0x80>)
 800509e:	4022      	ands	r2, r4
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80050a2:	e7de      	b.n	8005062 <HAL_TIMEx_OCN_Stop+0x26>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	2345      	movs	r3, #69	@ 0x45
 80050a6:	2201      	movs	r2, #1
 80050a8:	54c2      	strb	r2, [r0, r3]
 80050aa:	e7e7      	b.n	800507c <HAL_TIMEx_OCN_Stop+0x40>
 80050ac:	2346      	movs	r3, #70	@ 0x46
 80050ae:	2201      	movs	r2, #1
 80050b0:	54c2      	strb	r2, [r0, r3]
 80050b2:	e7e3      	b.n	800507c <HAL_TIMEx_OCN_Stop+0x40>
 80050b4:	00001111 	.word	0x00001111
 80050b8:	00000444 	.word	0x00000444
 80050bc:	ffff7fff 	.word	0xffff7fff

080050c0 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80050c0:	b510      	push	{r4, lr}
 80050c2:	f7ff ff73 	bl	8004fac <HAL_TIMEx_OCN_Start>
 80050c6:	bd10      	pop	{r4, pc}

080050c8 <HAL_TIMEx_PWMN_Stop>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 80050c8:	b510      	push	{r4, lr}
 80050ca:	f7ff ffb7 	bl	800503c <HAL_TIMEx_OCN_Stop>
 80050ce:	bd10      	pop	{r4, pc}

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80050d0:	233c      	movs	r3, #60	@ 0x3c
{
 80050d2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80050d4:	5cc3      	ldrb	r3, [r0, r3]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d026      	beq.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 80050da:	233d      	movs	r3, #61	@ 0x3d
 80050dc:	2202      	movs	r2, #2
 80050de:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80050e0:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050e2:	4d12      	ldr	r5, [pc, #72]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 80050e4:	6853      	ldr	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e6:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050ea:	42aa      	cmp	r2, r5
 80050ec:	d00e      	beq.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ee:	2570      	movs	r5, #112	@ 0x70
 80050f0:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f2:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 80050f4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d00f      	beq.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	233d      	movs	r3, #61	@ 0x3d
 80050fe:	2201      	movs	r2, #1
 8005100:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8005102:	2200      	movs	r2, #0
 8005104:	3b01      	subs	r3, #1
 8005106:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8005108:	2000      	movs	r0, #0
}
 800510a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800510c:	4d09      	ldr	r5, [pc, #36]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800510e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005110:	684d      	ldr	r5, [r1, #4]
 8005112:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005114:	2570      	movs	r5, #112	@ 0x70
 8005116:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005118:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 800511a:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005120:	688b      	ldr	r3, [r1, #8]
 8005122:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8005124:	6094      	str	r4, [r2, #8]
 8005126:	e7e9      	b.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8005128:	2002      	movs	r0, #2
 800512a:	e7ee      	b.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40000400 	.word	0x40000400
 8005134:	ff0fffff 	.word	0xff0fffff

08005138 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8005138:	233c      	movs	r3, #60	@ 0x3c
{
 800513a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800513c:	5cc3      	ldrb	r3, [r0, r3]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d03d      	beq.n	80051be <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005142:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005144:	68cb      	ldr	r3, [r1, #12]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005146:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005148:	4013      	ands	r3, r2
 800514a:	688a      	ldr	r2, [r1, #8]
 800514c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800514e:	4a1e      	ldr	r2, [pc, #120]	@ (80051c8 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8005150:	4013      	ands	r3, r2
 8005152:	684a      	ldr	r2, [r1, #4]
 8005154:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005156:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8005158:	4013      	ands	r3, r2
 800515a:	680a      	ldr	r2, [r1, #0]
 800515c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800515e:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005160:	4013      	ands	r3, r2
 8005162:	690a      	ldr	r2, [r1, #16]
 8005164:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005166:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005168:	4013      	ands	r3, r2
 800516a:	694a      	ldr	r2, [r1, #20]
 800516c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800516e:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005170:	4013      	ands	r3, r2
 8005172:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005174:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005176:	4a19      	ldr	r2, [pc, #100]	@ (80051dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005178:	4013      	ands	r3, r2
 800517a:	698a      	ldr	r2, [r1, #24]
 800517c:	0412      	lsls	r2, r2, #16
 800517e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005180:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005182:	4013      	ands	r3, r2
 8005184:	69ca      	ldr	r2, [r1, #28]
 8005186:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005188:	4a16      	ldr	r2, [pc, #88]	@ (80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800518a:	4294      	cmp	r4, r2
 800518c:	d005      	beq.n	800519a <HAL_TIMEx_ConfigBreakDeadTime+0x62>
  htim->Instance->BDTR = tmpbdtr;
 800518e:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005190:	2200      	movs	r2, #0
 8005192:	233c      	movs	r3, #60	@ 0x3c
 8005194:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8005196:	2000      	movs	r0, #0
}
 8005198:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800519a:	4a13      	ldr	r2, [pc, #76]	@ (80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800519c:	4013      	ands	r3, r2
 800519e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80051a0:	0512      	lsls	r2, r2, #20
 80051a2:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051a4:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80051a6:	401a      	ands	r2, r3
 80051a8:	6a0b      	ldr	r3, [r1, #32]
 80051aa:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051ac:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80051ae:	401a      	ands	r2, r3
 80051b0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80051b2:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80051b4:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80051b6:	401a      	ands	r2, r3
 80051b8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80051ba:	4313      	orrs	r3, r2
 80051bc:	e7e7      	b.n	800518e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 80051be:	2002      	movs	r0, #2
 80051c0:	e7ea      	b.n	8005198 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	fffffcff 	.word	0xfffffcff
 80051c8:	fffffbff 	.word	0xfffffbff
 80051cc:	fffff7ff 	.word	0xfffff7ff
 80051d0:	ffffefff 	.word	0xffffefff
 80051d4:	ffffdfff 	.word	0xffffdfff
 80051d8:	ffffbfff 	.word	0xffffbfff
 80051dc:	fff0ffff 	.word	0xfff0ffff
 80051e0:	efffffff 	.word	0xefffffff
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	ff0fffff 	.word	0xff0fffff
 80051ec:	feffffff 	.word	0xfeffffff
 80051f0:	fdffffff 	.word	0xfdffffff
 80051f4:	dfffffff 	.word	0xdfffffff

080051f8 <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80051f8:	4770      	bx	lr
 80051fa:	46c0      	nop			@ (mov r8, r8)

080051fc <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80051fc:	4770      	bx	lr
 80051fe:	46c0      	nop			@ (mov r8, r8)

08005200 <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005200:	4770      	bx	lr
 8005202:	46c0      	nop			@ (mov r8, r8)

08005204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005204:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005206:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	2201      	movs	r2, #1
 800520c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005210:	6801      	ldr	r1, [r0, #0]
 8005212:	4d13      	ldr	r5, [pc, #76]	@ (8005260 <UART_EndRxTransfer+0x5c>)
 8005214:	680b      	ldr	r3, [r1, #0]
 8005216:	402b      	ands	r3, r5
 8005218:	600b      	str	r3, [r1, #0]
 800521a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005226:	6802      	ldr	r2, [r0, #0]
 8005228:	4c0e      	ldr	r4, [pc, #56]	@ (8005264 <UART_EndRxTransfer+0x60>)
 800522a:	6893      	ldr	r3, [r2, #8]
 800522c:	4023      	ands	r3, r4
 800522e:	6093      	str	r3, [r2, #8]
 8005230:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005234:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10a      	bne.n	8005250 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005242:	2410      	movs	r4, #16
 8005244:	6802      	ldr	r2, [r0, #0]
 8005246:	6813      	ldr	r3, [r2, #0]
 8005248:	43a3      	bics	r3, r4
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	238c      	movs	r3, #140	@ 0x8c
 8005252:	2220      	movs	r2, #32
 8005254:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	2300      	movs	r3, #0
 8005258:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800525a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800525c:	bd30      	pop	{r4, r5, pc}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	fffffedf 	.word	0xfffffedf
 8005264:	effffffe 	.word	0xeffffffe

08005268 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005268:	4770      	bx	lr
 800526a:	46c0      	nop			@ (mov r8, r8)

0800526c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800526c:	4770      	bx	lr
 800526e:	46c0      	nop			@ (mov r8, r8)

08005270 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	225e      	movs	r2, #94	@ 0x5e
{
 8005274:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005276:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8005278:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800527a:	3a08      	subs	r2, #8
 800527c:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800527e:	f7ff fff5 	bl	800526c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005282:	bd10      	pop	{r4, pc}

08005284 <HAL_UARTEx_RxEventCallback>:
}
 8005284:	4770      	bx	lr
 8005286:	46c0      	nop			@ (mov r8, r8)

08005288 <HAL_UART_IRQHandler>:
{
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	4645      	mov	r5, r8
 800528c:	46de      	mov	lr, fp
 800528e:	4657      	mov	r7, sl
 8005290:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005292:	6802      	ldr	r2, [r0, #0]
{
 8005294:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005296:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005298:	4db7      	ldr	r5, [pc, #732]	@ (8005578 <HAL_UART_IRQHandler+0x2f0>)
{
 800529a:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800529c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800529e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80052a0:	422b      	tst	r3, r5
 80052a2:	d138      	bne.n	8005316 <HAL_UART_IRQHandler+0x8e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052a4:	2520      	movs	r5, #32
 80052a6:	421d      	tst	r5, r3
 80052a8:	d006      	beq.n	80052b8 <HAL_UART_IRQHandler+0x30>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052aa:	2680      	movs	r6, #128	@ 0x80
 80052ac:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052ae:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052b0:	4006      	ands	r6, r0
 80052b2:	4335      	orrs	r5, r6
 80052b4:	d000      	beq.n	80052b8 <HAL_UART_IRQHandler+0x30>
 80052b6:	e0eb      	b.n	8005490 <HAL_UART_IRQHandler+0x208>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80052ba:	2d01      	cmp	r5, #1
 80052bc:	d100      	bne.n	80052c0 <HAL_UART_IRQHandler+0x38>
 80052be:	e0ae      	b.n	800541e <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052c0:	2580      	movs	r5, #128	@ 0x80
 80052c2:	036d      	lsls	r5, r5, #13
 80052c4:	422b      	tst	r3, r5
 80052c6:	d11f      	bne.n	8005308 <HAL_UART_IRQHandler+0x80>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052c8:	2280      	movs	r2, #128	@ 0x80
 80052ca:	421a      	tst	r2, r3
 80052cc:	d006      	beq.n	80052dc <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052ce:	2580      	movs	r5, #128	@ 0x80
 80052d0:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052d2:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052d4:	4028      	ands	r0, r5
 80052d6:	4302      	orrs	r2, r0
 80052d8:	d000      	beq.n	80052dc <HAL_UART_IRQHandler+0x54>
 80052da:	e0e0      	b.n	800549e <HAL_UART_IRQHandler+0x216>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052dc:	2240      	movs	r2, #64	@ 0x40
 80052de:	421a      	tst	r2, r3
 80052e0:	d002      	beq.n	80052e8 <HAL_UART_IRQHandler+0x60>
 80052e2:	420a      	tst	r2, r1
 80052e4:	d000      	beq.n	80052e8 <HAL_UART_IRQHandler+0x60>
 80052e6:	e0e9      	b.n	80054bc <HAL_UART_IRQHandler+0x234>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052e8:	021a      	lsls	r2, r3, #8
 80052ea:	d502      	bpl.n	80052f2 <HAL_UART_IRQHandler+0x6a>
 80052ec:	004a      	lsls	r2, r1, #1
 80052ee:	d500      	bpl.n	80052f2 <HAL_UART_IRQHandler+0x6a>
 80052f0:	e0f8      	b.n	80054e4 <HAL_UART_IRQHandler+0x25c>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052f2:	01db      	lsls	r3, r3, #7
 80052f4:	d502      	bpl.n	80052fc <HAL_UART_IRQHandler+0x74>
 80052f6:	2900      	cmp	r1, #0
 80052f8:	da00      	bge.n	80052fc <HAL_UART_IRQHandler+0x74>
 80052fa:	e0f7      	b.n	80054ec <HAL_UART_IRQHandler+0x264>
}
 80052fc:	bcf0      	pop	{r4, r5, r6, r7}
 80052fe:	46bb      	mov	fp, r7
 8005300:	46b2      	mov	sl, r6
 8005302:	46a9      	mov	r9, r5
 8005304:	46a0      	mov	r8, r4
 8005306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005308:	0246      	lsls	r6, r0, #9
 800530a:	d5dd      	bpl.n	80052c8 <HAL_UART_IRQHandler+0x40>
    HAL_UARTEx_WakeupCallback(huart);
 800530c:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800530e:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005310:	f000 ff40 	bl	8006194 <HAL_UARTEx_WakeupCallback>
    return;
 8005314:	e7f2      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005316:	4e99      	ldr	r6, [pc, #612]	@ (800557c <HAL_UART_IRQHandler+0x2f4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005318:	4d99      	ldr	r5, [pc, #612]	@ (8005580 <HAL_UART_IRQHandler+0x2f8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800531a:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800531c:	400d      	ands	r5, r1
 800531e:	4335      	orrs	r5, r6
 8005320:	d0ca      	beq.n	80052b8 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005322:	2501      	movs	r5, #1
 8005324:	421d      	tst	r5, r3
 8005326:	d008      	beq.n	800533a <HAL_UART_IRQHandler+0xb2>
 8005328:	05cf      	lsls	r7, r1, #23
 800532a:	d506      	bpl.n	800533a <HAL_UART_IRQHandler+0xb2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800532c:	2790      	movs	r7, #144	@ 0x90
 800532e:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005330:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005332:	59e7      	ldr	r7, [r4, r7]
 8005334:	433d      	orrs	r5, r7
 8005336:	4667      	mov	r7, ip
 8005338:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800533a:	2504      	movs	r5, #4
 800533c:	002f      	movs	r7, r5
 800533e:	401f      	ands	r7, r3
 8005340:	46bc      	mov	ip, r7
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005342:	2702      	movs	r7, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005344:	46a9      	mov	r9, r5
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005346:	421f      	tst	r7, r3
 8005348:	d100      	bne.n	800534c <HAL_UART_IRQHandler+0xc4>
 800534a:	e099      	b.n	8005480 <HAL_UART_IRQHandler+0x1f8>
 800534c:	07c5      	lsls	r5, r0, #31
 800534e:	d516      	bpl.n	800537e <HAL_UART_IRQHandler+0xf6>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005350:	2590      	movs	r5, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005352:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005354:	5967      	ldr	r7, [r4, r5]
 8005356:	46a8      	mov	r8, r5
 8005358:	464d      	mov	r5, r9
 800535a:	433d      	orrs	r5, r7
 800535c:	4647      	mov	r7, r8
 800535e:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005360:	4665      	mov	r5, ip
 8005362:	2d00      	cmp	r5, #0
 8005364:	d00b      	beq.n	800537e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005366:	2504      	movs	r5, #4
 8005368:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800536a:	358c      	adds	r5, #140	@ 0x8c
 800536c:	46a9      	mov	r9, r5
 800536e:	5965      	ldr	r5, [r4, r5]
 8005370:	46a8      	mov	r8, r5
 8005372:	2502      	movs	r5, #2
 8005374:	4647      	mov	r7, r8
 8005376:	432f      	orrs	r7, r5
 8005378:	003d      	movs	r5, r7
 800537a:	464f      	mov	r7, r9
 800537c:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800537e:	2708      	movs	r7, #8
 8005380:	421f      	tst	r7, r3
 8005382:	d008      	beq.n	8005396 <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005384:	2520      	movs	r5, #32
 8005386:	400d      	ands	r5, r1
 8005388:	4335      	orrs	r5, r6
 800538a:	d004      	beq.n	8005396 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800538c:	2690      	movs	r6, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800538e:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005390:	59a5      	ldr	r5, [r4, r6]
 8005392:	433d      	orrs	r5, r7
 8005394:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005396:	2580      	movs	r5, #128	@ 0x80
 8005398:	012d      	lsls	r5, r5, #4
 800539a:	422b      	tst	r3, r5
 800539c:	d007      	beq.n	80053ae <HAL_UART_IRQHandler+0x126>
 800539e:	014e      	lsls	r6, r1, #5
 80053a0:	d505      	bpl.n	80053ae <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053a2:	2690      	movs	r6, #144	@ 0x90
 80053a4:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053a8:	59a5      	ldr	r5, [r4, r6]
 80053aa:	433d      	orrs	r5, r7
 80053ac:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ae:	2590      	movs	r5, #144	@ 0x90
 80053b0:	5965      	ldr	r5, [r4, r5]
 80053b2:	2d00      	cmp	r5, #0
 80053b4:	d0a2      	beq.n	80052fc <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053b6:	2520      	movs	r5, #32
 80053b8:	421d      	tst	r5, r3
 80053ba:	d005      	beq.n	80053c8 <HAL_UART_IRQHandler+0x140>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053c0:	400d      	ands	r5, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053c2:	4003      	ands	r3, r0
 80053c4:	431d      	orrs	r5, r3
 80053c6:	d16e      	bne.n	80054a6 <HAL_UART_IRQHandler+0x21e>
      errorcode = huart->ErrorCode;
 80053c8:	2690      	movs	r6, #144	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ca:	2740      	movs	r7, #64	@ 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053cc:	2328      	movs	r3, #40	@ 0x28
      errorcode = huart->ErrorCode;
 80053ce:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d0:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053d2:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d4:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 80053d6:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d8:	431d      	orrs	r5, r3
 80053da:	d100      	bne.n	80053de <HAL_UART_IRQHandler+0x156>
 80053dc:	e08a      	b.n	80054f4 <HAL_UART_IRQHandler+0x26c>
        UART_EndRxTransfer(huart);
 80053de:	f7ff ff11 	bl	8005204 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	421f      	tst	r7, r3
 80053e8:	d064      	beq.n	80054b4 <HAL_UART_IRQHandler+0x22c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	2301      	movs	r3, #1
 80053f0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	6893      	ldr	r3, [r2, #8]
 80053f8:	43bb      	bics	r3, r7
 80053fa:	6093      	str	r3, [r2, #8]
 80053fc:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8005400:	2580      	movs	r5, #128	@ 0x80
 8005402:	5960      	ldr	r0, [r4, r5]
 8005404:	2800      	cmp	r0, #0
 8005406:	d055      	beq.n	80054b4 <HAL_UART_IRQHandler+0x22c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005408:	4b5e      	ldr	r3, [pc, #376]	@ (8005584 <HAL_UART_IRQHandler+0x2fc>)
 800540a:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800540c:	f7fe fa60 	bl	80038d0 <HAL_DMA_Abort_IT>
 8005410:	2800      	cmp	r0, #0
 8005412:	d100      	bne.n	8005416 <HAL_UART_IRQHandler+0x18e>
 8005414:	e772      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005416:	5960      	ldr	r0, [r4, r5]
 8005418:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800541a:	4798      	blx	r3
 800541c:	e76e      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800541e:	2610      	movs	r6, #16
 8005420:	421e      	tst	r6, r3
 8005422:	d100      	bne.n	8005426 <HAL_UART_IRQHandler+0x19e>
 8005424:	e74c      	b.n	80052c0 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005426:	420e      	tst	r6, r1
 8005428:	d100      	bne.n	800542c <HAL_UART_IRQHandler+0x1a4>
 800542a:	e749      	b.n	80052c0 <HAL_UART_IRQHandler+0x38>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005430:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005432:	6892      	ldr	r2, [r2, #8]
 8005434:	4010      	ands	r0, r2
 8005436:	4213      	tst	r3, r2
 8005438:	d060      	beq.n	80054fc <HAL_UART_IRQHandler+0x274>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800543a:	2280      	movs	r2, #128	@ 0x80
 800543c:	4694      	mov	ip, r2
 800543e:	58a2      	ldr	r2, [r4, r2]
 8005440:	6810      	ldr	r0, [r2, #0]
 8005442:	6842      	ldr	r2, [r0, #4]
 8005444:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005446:	2a00      	cmp	r2, #0
 8005448:	d100      	bne.n	800544c <HAL_UART_IRQHandler+0x1c4>
 800544a:	e757      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800544c:	215c      	movs	r1, #92	@ 0x5c
 800544e:	468b      	mov	fp, r1
 8005450:	5a61      	ldrh	r1, [r4, r1]
 8005452:	4291      	cmp	r1, r2
 8005454:	d800      	bhi.n	8005458 <HAL_UART_IRQHandler+0x1d0>
 8005456:	e751      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 8005458:	275e      	movs	r7, #94	@ 0x5e
 800545a:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800545c:	2220      	movs	r2, #32
 800545e:	0017      	movs	r7, r2
 8005460:	6800      	ldr	r0, [r0, #0]
 8005462:	4007      	ands	r7, r0
 8005464:	46b8      	mov	r8, r7
 8005466:	4202      	tst	r2, r0
 8005468:	d100      	bne.n	800546c <HAL_UART_IRQHandler+0x1e4>
 800546a:	e091      	b.n	8005590 <HAL_UART_IRQHandler+0x308>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546c:	2302      	movs	r3, #2
 800546e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005470:	335c      	adds	r3, #92	@ 0x5c
 8005472:	5ae3      	ldrh	r3, [r4, r3]
 8005474:	0020      	movs	r0, r4
 8005476:	1ac9      	subs	r1, r1, r3
 8005478:	b289      	uxth	r1, r1
 800547a:	f7ff ff03 	bl	8005284 <HAL_UARTEx_RxEventCallback>
 800547e:	e73d      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005480:	4665      	mov	r5, ip
 8005482:	2d00      	cmp	r5, #0
 8005484:	d100      	bne.n	8005488 <HAL_UART_IRQHandler+0x200>
 8005486:	e77a      	b.n	800537e <HAL_UART_IRQHandler+0xf6>
 8005488:	07c5      	lsls	r5, r0, #31
 800548a:	d400      	bmi.n	800548e <HAL_UART_IRQHandler+0x206>
 800548c:	e777      	b.n	800537e <HAL_UART_IRQHandler+0xf6>
 800548e:	e76a      	b.n	8005366 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8005490:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005492:	2b00      	cmp	r3, #0
 8005494:	d100      	bne.n	8005498 <HAL_UART_IRQHandler+0x210>
 8005496:	e731      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 8005498:	0020      	movs	r0, r4
 800549a:	4798      	blx	r3
 800549c:	e72e      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
    if (huart->TxISR != NULL)
 800549e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f9      	bne.n	8005498 <HAL_UART_IRQHandler+0x210>
 80054a4:	e72a      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
        if (huart->RxISR != NULL)
 80054a6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d08d      	beq.n	80053c8 <HAL_UART_IRQHandler+0x140>
          huart->RxISR(huart);
 80054ac:	0020      	movs	r0, r4
 80054ae:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	e789      	b.n	80053c8 <HAL_UART_IRQHandler+0x140>
            HAL_UART_ErrorCallback(huart);
 80054b4:	0020      	movs	r0, r4
 80054b6:	f7ff fed9 	bl	800526c <HAL_UART_ErrorCallback>
 80054ba:	e71f      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054bc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	2301      	movs	r3, #1
 80054c2:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054c6:	6821      	ldr	r1, [r4, #0]
 80054c8:	680b      	ldr	r3, [r1, #0]
 80054ca:	4393      	bics	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]
 80054ce:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054d2:	2388      	movs	r3, #136	@ 0x88
 80054d4:	3a20      	subs	r2, #32
 80054d6:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d8:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054da:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80054dc:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 80054de:	f7ff fec3 	bl	8005268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e2:	e70b      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054e4:	0020      	movs	r0, r4
 80054e6:	f000 fe59 	bl	800619c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80054ea:	e707      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80054ec:	0020      	movs	r0, r4
 80054ee:	f000 fe53 	bl	8006198 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80054f2:	e703      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
        HAL_UART_ErrorCallback(huart);
 80054f4:	f7ff feba 	bl	800526c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	51a5      	str	r5, [r4, r6]
 80054fa:	e6ff      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054fc:	235c      	movs	r3, #92	@ 0x5c
 80054fe:	225e      	movs	r2, #94	@ 0x5e
 8005500:	5ae1      	ldrh	r1, [r4, r3]
 8005502:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8005504:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005506:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8005508:	2a00      	cmp	r2, #0
 800550a:	d100      	bne.n	800550e <HAL_UART_IRQHandler+0x286>
 800550c:	e6f6      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800550e:	1ac9      	subs	r1, r1, r3
 8005510:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005512:	2900      	cmp	r1, #0
 8005514:	d100      	bne.n	8005518 <HAL_UART_IRQHandler+0x290>
 8005516:	e6f1      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005518:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	4698      	mov	r8, r3
 8005526:	4647      	mov	r7, r8
 8005528:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <HAL_UART_IRQHandler+0x300>)
 800552a:	401f      	ands	r7, r3
 800552c:	6017      	str	r7, [r2, #0]
 800552e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800553a:	6822      	ldr	r2, [r4, #0]
 800553c:	6893      	ldr	r3, [r2, #8]
 800553e:	4698      	mov	r8, r3
 8005540:	4647      	mov	r7, r8
 8005542:	4b12      	ldr	r3, [pc, #72]	@ (800558c <HAL_UART_IRQHandler+0x304>)
 8005544:	401f      	ands	r7, r3
 8005546:	6097      	str	r7, [r2, #8]
 8005548:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 800554c:	238c      	movs	r3, #140	@ 0x8c
 800554e:	2220      	movs	r2, #32
 8005550:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005552:	66e0      	str	r0, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8005554:	6760      	str	r0, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005556:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	43b3      	bics	r3, r6
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800556a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800556c:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800556e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005570:	f7ff fe88 	bl	8005284 <HAL_UARTEx_RxEventCallback>
 8005574:	e6c2      	b.n	80052fc <HAL_UART_IRQHandler+0x74>
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	0000080f 	.word	0x0000080f
 800557c:	10000001 	.word	0x10000001
 8005580:	04000120 	.word	0x04000120
 8005584:	08005271 	.word	0x08005271
 8005588:	fffffedf 	.word	0xfffffedf
 800558c:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005590:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	4f17      	ldr	r7, [pc, #92]	@ (80055f8 <HAL_UART_IRQHandler+0x370>)
 800559c:	6801      	ldr	r1, [r0, #0]
 800559e:	4039      	ands	r1, r7
 80055a0:	6001      	str	r1, [r0, #0]
 80055a2:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a6:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	6881      	ldr	r1, [r0, #8]
 80055b2:	43a9      	bics	r1, r5
 80055b4:	6081      	str	r1, [r0, #8]
 80055b6:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ba:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	6881      	ldr	r1, [r0, #8]
 80055c6:	4399      	bics	r1, r3
 80055c8:	6081      	str	r1, [r0, #8]
 80055ca:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 80055ce:	334c      	adds	r3, #76	@ 0x4c
 80055d0:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	4643      	mov	r3, r8
 80055d4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055da:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	43b3      	bics	r3, r6
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055ea:	4663      	mov	r3, ip
 80055ec:	58e0      	ldr	r0, [r4, r3]
 80055ee:	f7fe f933 	bl	8003858 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055f2:	465b      	mov	r3, fp
 80055f4:	5ae1      	ldrh	r1, [r4, r3]
 80055f6:	e739      	b.n	800546c <HAL_UART_IRQHandler+0x1e4>
 80055f8:	fffffeff 	.word	0xfffffeff

080055fc <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fc:	228c      	movs	r2, #140	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80055fe:	2360      	movs	r3, #96	@ 0x60
{
 8005600:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005602:	5884      	ldr	r4, [r0, r2]
  uint16_t uhMask = huart->Mask;
 8005604:	5ac1      	ldrh	r1, [r0, r3]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005606:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005608:	2c22      	cmp	r4, #34	@ 0x22
 800560a:	d004      	beq.n	8005616 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560c:	2108      	movs	r1, #8
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	430a      	orrs	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
  }
}
 8005614:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005616:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005618:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800561a:	4021      	ands	r1, r4
 800561c:	7019      	strb	r1, [r3, #0]
    huart->RxXferCount--;
 800561e:	215e      	movs	r1, #94	@ 0x5e
    huart->pRxBuffPtr++;
 8005620:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005622:	3301      	adds	r3, #1
 8005624:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005626:	5a43      	ldrh	r3, [r0, r1]
 8005628:	3b01      	subs	r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	5243      	strh	r3, [r0, r1]
    if (huart->RxXferCount == 0U)
 800562e:	5a43      	ldrh	r3, [r0, r1]
 8005630:	b299      	uxth	r1, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ee      	bne.n	8005614 <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005636:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563a:	3301      	adds	r3, #1
 800563c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005640:	6805      	ldr	r5, [r0, #0]
 8005642:	4e20      	ldr	r6, [pc, #128]	@ (80056c4 <UART_RxISR_8BIT+0xc8>)
 8005644:	682c      	ldr	r4, [r5, #0]
 8005646:	4034      	ands	r4, r6
 8005648:	602c      	str	r4, [r5, #0]
 800564a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005652:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	6805      	ldr	r5, [r0, #0]
 8005658:	68ac      	ldr	r4, [r5, #8]
 800565a:	439c      	bics	r4, r3
 800565c:	60ac      	str	r4, [r5, #8]
 800565e:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8005662:	2420      	movs	r4, #32
 8005664:	5084      	str	r4, [r0, r2]
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005666:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005668:	6701      	str	r1, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800566a:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 800566c:	6741      	str	r1, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800566e:	0212      	lsls	r2, r2, #8
 8005670:	d50a      	bpl.n	8005688 <UART_RxISR_8BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005676:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800567a:	6802      	ldr	r2, [r0, #0]
 800567c:	4c12      	ldr	r4, [pc, #72]	@ (80056c8 <UART_RxISR_8BIT+0xcc>)
 800567e:	6813      	ldr	r3, [r2, #0]
 8005680:	4023      	ands	r3, r4
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d116      	bne.n	80056bc <UART_RxISR_8BIT+0xc0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568e:	2200      	movs	r2, #0
 8005690:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005692:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569a:	6801      	ldr	r1, [r0, #0]
 800569c:	3210      	adds	r2, #16
 800569e:	680b      	ldr	r3, [r1, #0]
 80056a0:	4393      	bics	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
 80056a4:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	69d9      	ldr	r1, [r3, #28]
 80056ac:	420a      	tst	r2, r1
 80056ae:	d000      	beq.n	80056b2 <UART_RxISR_8BIT+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	235c      	movs	r3, #92	@ 0x5c
 80056b4:	5ac1      	ldrh	r1, [r0, r3]
 80056b6:	f7ff fde5 	bl	8005284 <HAL_UARTEx_RxEventCallback>
 80056ba:	e7ab      	b.n	8005614 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80056bc:	f7fc f9ae 	bl	8001a1c <HAL_UART_RxCpltCallback>
 80056c0:	e7a8      	b.n	8005614 <UART_RxISR_8BIT+0x18>
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	fffffedf 	.word	0xfffffedf
 80056c8:	fbffffff 	.word	0xfbffffff

080056cc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056cc:	228c      	movs	r2, #140	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80056ce:	2360      	movs	r3, #96	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056d0:	5881      	ldr	r1, [r0, r2]
{
 80056d2:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 80056d4:	5ac4      	ldrh	r4, [r0, r3]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056d6:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056d8:	2922      	cmp	r1, #34	@ 0x22
 80056da:	d004      	beq.n	80056e6 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056dc:	2108      	movs	r1, #8
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	619a      	str	r2, [r3, #24]
  }
}
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056e8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80056ea:	4021      	ands	r1, r4
 80056ec:	8019      	strh	r1, [r3, #0]
    huart->RxXferCount--;
 80056ee:	215e      	movs	r1, #94	@ 0x5e
    huart->pRxBuffPtr += 2U;
 80056f0:	3302      	adds	r3, #2
 80056f2:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80056f4:	5a43      	ldrh	r3, [r0, r1]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	5243      	strh	r3, [r0, r1]
    if (huart->RxXferCount == 0U)
 80056fc:	5a43      	ldrh	r3, [r0, r1]
 80056fe:	b299      	uxth	r1, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ef      	bne.n	80056e4 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005704:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	3301      	adds	r3, #1
 800570a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800570e:	6805      	ldr	r5, [r0, #0]
 8005710:	4e1f      	ldr	r6, [pc, #124]	@ (8005790 <UART_RxISR_16BIT+0xc4>)
 8005712:	682c      	ldr	r4, [r5, #0]
 8005714:	4034      	ands	r4, r6
 8005716:	602c      	str	r4, [r5, #0]
 8005718:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005724:	6805      	ldr	r5, [r0, #0]
 8005726:	68ac      	ldr	r4, [r5, #8]
 8005728:	439c      	bics	r4, r3
 800572a:	60ac      	str	r4, [r5, #8]
 800572c:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8005730:	2420      	movs	r4, #32
 8005732:	5084      	str	r4, [r0, r2]
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005734:	6802      	ldr	r2, [r0, #0]
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005736:	6701      	str	r1, [r0, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005738:	6852      	ldr	r2, [r2, #4]
      huart->RxISR = NULL;
 800573a:	6741      	str	r1, [r0, #116]	@ 0x74
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800573c:	0212      	lsls	r2, r2, #8
 800573e:	d50a      	bpl.n	8005756 <UART_RxISR_16BIT+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005740:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005748:	6802      	ldr	r2, [r0, #0]
 800574a:	4c12      	ldr	r4, [pc, #72]	@ (8005794 <UART_RxISR_16BIT+0xc8>)
 800574c:	6813      	ldr	r3, [r2, #0]
 800574e:	4023      	ands	r3, r4
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005756:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d116      	bne.n	800578a <UART_RxISR_16BIT+0xbe>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	2200      	movs	r2, #0
 800575e:	66c2      	str	r2, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005760:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005764:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	6801      	ldr	r1, [r0, #0]
 800576a:	3210      	adds	r2, #16
 800576c:	680b      	ldr	r3, [r1, #0]
 800576e:	4393      	bics	r3, r2
 8005770:	600b      	str	r3, [r1, #0]
 8005772:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005776:	6803      	ldr	r3, [r0, #0]
 8005778:	69d9      	ldr	r1, [r3, #28]
 800577a:	420a      	tst	r2, r1
 800577c:	d000      	beq.n	8005780 <UART_RxISR_16BIT+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005780:	235c      	movs	r3, #92	@ 0x5c
 8005782:	5ac1      	ldrh	r1, [r0, r3]
 8005784:	f7ff fd7e 	bl	8005284 <HAL_UARTEx_RxEventCallback>
 8005788:	e7ac      	b.n	80056e4 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800578a:	f7fc f947 	bl	8001a1c <HAL_UART_RxCpltCallback>
 800578e:	e7a9      	b.n	80056e4 <UART_RxISR_16BIT+0x18>
 8005790:	fffffedf 	.word	0xfffffedf
 8005794:	fbffffff 	.word	0xfbffffff

08005798 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	4657      	mov	r7, sl
 800579c:	464e      	mov	r6, r9
 800579e:	46de      	mov	lr, fp
 80057a0:	4645      	mov	r5, r8
  uint16_t  uhMask = huart->Mask;
 80057a2:	2360      	movs	r3, #96	@ 0x60
{
 80057a4:	b5e0      	push	{r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
 80057a6:	5ac7      	ldrh	r7, [r0, r3]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057a8:	6803      	ldr	r3, [r0, #0]
{
 80057aa:	0004      	movs	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057ac:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057ae:	681a      	ldr	r2, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057b0:	6898      	ldr	r0, [r3, #8]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057b2:	4691      	mov	r9, r2

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057b4:	228c      	movs	r2, #140	@ 0x8c
 80057b6:	58a2      	ldr	r2, [r4, r2]
 80057b8:	2a22      	cmp	r2, #34	@ 0x22
 80057ba:	d009      	beq.n	80057d0 <UART_RxISR_8BIT_FIFOEN+0x38>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057bc:	2108      	movs	r1, #8
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	619a      	str	r2, [r3, #24]
  }
}
 80057c4:	bcf0      	pop	{r4, r5, r6, r7}
 80057c6:	46bb      	mov	fp, r7
 80057c8:	46b2      	mov	sl, r6
 80057ca:	46a9      	mov	r9, r5
 80057cc:	46a0      	mov	r8, r4
 80057ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 80057d0:	3246      	adds	r2, #70	@ 0x46
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057d2:	5aa2      	ldrh	r2, [r4, r2]
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	d100      	bne.n	80057da <UART_RxISR_8BIT_FIFOEN+0x42>
 80057d8:	e0cc      	b.n	8005974 <UART_RxISR_8BIT_FIFOEN+0x1dc>
 80057da:	0689      	lsls	r1, r1, #26
 80057dc:	d400      	bmi.n	80057e0 <UART_RxISR_8BIT_FIFOEN+0x48>
 80057de:	e0a4      	b.n	800592a <UART_RxISR_8BIT_FIFOEN+0x192>
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057e0:	b2fa      	uxtb	r2, r7
 80057e2:	4692      	mov	sl, r2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057e4:	2201      	movs	r2, #1
 80057e6:	4010      	ands	r0, r2
      huart->RxXferCount--;
 80057e8:	255e      	movs	r5, #94	@ 0x5e
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ea:	4680      	mov	r8, r0
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057ec:	4651      	mov	r1, sl
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057f0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80057f2:	400b      	ands	r3, r1
 80057f4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80057f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057f8:	3301      	adds	r3, #1
 80057fa:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80057fc:	5b63      	ldrh	r3, [r4, r5]
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29b      	uxth	r3, r3
 8005802:	5363      	strh	r3, [r4, r5]
      isrflags = READ_REG(huart->Instance->ISR);
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005808:	077a      	lsls	r2, r7, #29
 800580a:	d029      	beq.n	8005860 <UART_RxISR_8BIT_FIFOEN+0xc8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800580c:	2101      	movs	r1, #1
 800580e:	4239      	tst	r1, r7
 8005810:	d008      	beq.n	8005824 <UART_RxISR_8BIT_FIFOEN+0x8c>
 8005812:	464a      	mov	r2, r9
 8005814:	05d2      	lsls	r2, r2, #23
 8005816:	d505      	bpl.n	8005824 <UART_RxISR_8BIT_FIFOEN+0x8c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005818:	0008      	movs	r0, r1
 800581a:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800581c:	318f      	adds	r1, #143	@ 0x8f
 800581e:	5862      	ldr	r2, [r4, r1]
 8005820:	4302      	orrs	r2, r0
 8005822:	5062      	str	r2, [r4, r1]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005824:	2204      	movs	r2, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005826:	2102      	movs	r1, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005828:	0010      	movs	r0, r2
 800582a:	4038      	ands	r0, r7
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800582c:	4239      	tst	r1, r7
 800582e:	d066      	beq.n	80058fe <UART_RxISR_8BIT_FIFOEN+0x166>
 8005830:	4646      	mov	r6, r8
 8005832:	2e00      	cmp	r6, #0
 8005834:	d00f      	beq.n	8005856 <UART_RxISR_8BIT_FIFOEN+0xbe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005836:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005838:	318e      	adds	r1, #142	@ 0x8e
 800583a:	468c      	mov	ip, r1
 800583c:	5861      	ldr	r1, [r4, r1]
 800583e:	430a      	orrs	r2, r1
 8005840:	4661      	mov	r1, ip
 8005842:	5062      	str	r2, [r4, r1]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005844:	2800      	cmp	r0, #0
 8005846:	d006      	beq.n	8005856 <UART_RxISR_8BIT_FIFOEN+0xbe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005848:	2204      	movs	r2, #4
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800584a:	2102      	movs	r1, #2
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800584c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800584e:	328c      	adds	r2, #140	@ 0x8c
 8005850:	58a3      	ldr	r3, [r4, r2]
 8005852:	430b      	orrs	r3, r1
 8005854:	50a3      	str	r3, [r4, r2]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005856:	2390      	movs	r3, #144	@ 0x90
 8005858:	469b      	mov	fp, r3
 800585a:	58e3      	ldr	r3, [r4, r3]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d158      	bne.n	8005912 <UART_RxISR_8BIT_FIFOEN+0x17a>
      if (huart->RxXferCount == 0U)
 8005860:	5b63      	ldrh	r3, [r4, r5]
 8005862:	b29a      	uxth	r2, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d146      	bne.n	80058f6 <UART_RxISR_8BIT_FIFOEN+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005868:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586c:	3301      	adds	r3, #1
 800586e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005872:	6821      	ldr	r1, [r4, #0]
 8005874:	4e41      	ldr	r6, [pc, #260]	@ (800597c <UART_RxISR_8BIT_FIFOEN+0x1e4>)
 8005876:	680b      	ldr	r3, [r1, #0]
 8005878:	4033      	ands	r3, r6
 800587a:	600b      	str	r3, [r1, #0]
 800587c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005880:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005884:	2301      	movs	r3, #1
 8005886:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800588a:	6821      	ldr	r1, [r4, #0]
 800588c:	4e3c      	ldr	r6, [pc, #240]	@ (8005980 <UART_RxISR_8BIT_FIFOEN+0x1e8>)
 800588e:	688b      	ldr	r3, [r1, #8]
 8005890:	4033      	ands	r3, r6
 8005892:	608b      	str	r3, [r1, #8]
 8005894:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8005898:	238c      	movs	r3, #140	@ 0x8c
 800589a:	2120      	movs	r1, #32
 800589c:	50e1      	str	r1, [r4, r3]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800589e:	6823      	ldr	r3, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a0:	6722      	str	r2, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a2:	685b      	ldr	r3, [r3, #4]
        huart->RxISR = NULL;
 80058a4:	6762      	str	r2, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	d50b      	bpl.n	80058c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	2301      	movs	r3, #1
 80058b0:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	4833      	ldr	r0, [pc, #204]	@ (8005984 <UART_RxISR_8BIT_FIFOEN+0x1ec>)
 80058b8:	6813      	ldr	r3, [r2, #0]
 80058ba:	4003      	ands	r3, r0
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d12b      	bne.n	8005920 <UART_RxISR_8BIT_FIFOEN+0x188>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	2200      	movs	r2, #0
 80058ca:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d4:	6821      	ldr	r1, [r4, #0]
 80058d6:	3210      	adds	r2, #16
 80058d8:	680b      	ldr	r3, [r1, #0]
 80058da:	4393      	bics	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
 80058de:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	69d9      	ldr	r1, [r3, #28]
 80058e6:	420a      	tst	r2, r1
 80058e8:	d000      	beq.n	80058ec <UART_RxISR_8BIT_FIFOEN+0x154>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ea:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ec:	235c      	movs	r3, #92	@ 0x5c
 80058ee:	0020      	movs	r0, r4
 80058f0:	5ae1      	ldrh	r1, [r4, r3]
 80058f2:	f7ff fcc7 	bl	8005284 <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058f6:	06bf      	lsls	r7, r7, #26
 80058f8:	d517      	bpl.n	800592a <UART_RxISR_8BIT_FIFOEN+0x192>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	e776      	b.n	80057ec <UART_RxISR_8BIT_FIFOEN+0x54>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0a9      	beq.n	8005856 <UART_RxISR_8BIT_FIFOEN+0xbe>
 8005902:	4642      	mov	r2, r8
 8005904:	2a00      	cmp	r2, #0
 8005906:	d19f      	bne.n	8005848 <UART_RxISR_8BIT_FIFOEN+0xb0>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005908:	2390      	movs	r3, #144	@ 0x90
 800590a:	469b      	mov	fp, r3
 800590c:	58e3      	ldr	r3, [r4, r3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0a6      	beq.n	8005860 <UART_RxISR_8BIT_FIFOEN+0xc8>
          HAL_UART_ErrorCallback(huart);
 8005912:	0020      	movs	r0, r4
 8005914:	f7ff fcaa 	bl	800526c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005918:	2300      	movs	r3, #0
 800591a:	465a      	mov	r2, fp
 800591c:	50a3      	str	r3, [r4, r2]
 800591e:	e79f      	b.n	8005860 <UART_RxISR_8BIT_FIFOEN+0xc8>
          HAL_UART_RxCpltCallback(huart);
 8005920:	0020      	movs	r0, r4
 8005922:	f7fc f87b 	bl	8001a1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005926:	06bf      	lsls	r7, r7, #26
 8005928:	d4e7      	bmi.n	80058fa <UART_RxISR_8BIT_FIFOEN+0x162>
    rxdatacount = huart->RxXferCount;
 800592a:	235e      	movs	r3, #94	@ 0x5e
 800592c:	5ae3      	ldrh	r3, [r4, r3]
 800592e:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005930:	2b00      	cmp	r3, #0
 8005932:	d100      	bne.n	8005936 <UART_RxISR_8BIT_FIFOEN+0x19e>
 8005934:	e746      	b.n	80057c4 <UART_RxISR_8BIT_FIFOEN+0x2c>
 8005936:	2368      	movs	r3, #104	@ 0x68
 8005938:	5ae3      	ldrh	r3, [r4, r3]
 800593a:	4293      	cmp	r3, r2
 800593c:	d800      	bhi.n	8005940 <UART_RxISR_8BIT_FIFOEN+0x1a8>
 800593e:	e741      	b.n	80057c4 <UART_RxISR_8BIT_FIFOEN+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005940:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005944:	2201      	movs	r2, #1
 8005946:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	4d0e      	ldr	r5, [pc, #56]	@ (8005988 <UART_RxISR_8BIT_FIFOEN+0x1f0>)
 800594e:	688b      	ldr	r3, [r1, #8]
 8005950:	402b      	ands	r3, r5
 8005952:	608b      	str	r3, [r1, #8]
 8005954:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <UART_RxISR_8BIT_FIFOEN+0x1f4>)
 800595a:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005960:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005964:	2020      	movs	r0, #32
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	6813      	ldr	r3, [r2, #0]
 800596a:	4303      	orrs	r3, r0
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	f381 8810 	msr	PRIMASK, r1
}
 8005972:	e727      	b.n	80057c4 <UART_RxISR_8BIT_FIFOEN+0x2c>
    rxdatacount = huart->RxXferCount;
 8005974:	235e      	movs	r3, #94	@ 0x5e
 8005976:	5ae3      	ldrh	r3, [r4, r3]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005978:	e724      	b.n	80057c4 <UART_RxISR_8BIT_FIFOEN+0x2c>
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	fffffeff 	.word	0xfffffeff
 8005980:	effffffe 	.word	0xeffffffe
 8005984:	fbffffff 	.word	0xfbffffff
 8005988:	efffffff 	.word	0xefffffff
 800598c:	080055fd 	.word	0x080055fd

08005990 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	4657      	mov	r7, sl
 8005994:	464e      	mov	r6, r9
 8005996:	46de      	mov	lr, fp
 8005998:	4645      	mov	r5, r8
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800599a:	2360      	movs	r3, #96	@ 0x60
{
 800599c:	b5e0      	push	{r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800599e:	6802      	ldr	r2, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 80059a0:	5ac3      	ldrh	r3, [r0, r3]
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059a2:	69d1      	ldr	r1, [r2, #28]
  uint16_t  uhMask = huart->Mask;
 80059a4:	469a      	mov	sl, r3
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059a6:	6813      	ldr	r3, [r2, #0]
{
 80059a8:	0004      	movs	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059aa:	4699      	mov	r9, r3
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ac:	238c      	movs	r3, #140	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80059ae:	6890      	ldr	r0, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b0:	58e3      	ldr	r3, [r4, r3]
 80059b2:	2b22      	cmp	r3, #34	@ 0x22
 80059b4:	d009      	beq.n	80059ca <UART_RxISR_16BIT_FIFOEN+0x3a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b6:	2108      	movs	r1, #8
 80059b8:	6993      	ldr	r3, [r2, #24]
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6193      	str	r3, [r2, #24]
  }
}
 80059be:	bcf0      	pop	{r4, r5, r6, r7}
 80059c0:	46bb      	mov	fp, r7
 80059c2:	46b2      	mov	sl, r6
 80059c4:	46a9      	mov	r9, r5
 80059c6:	46a0      	mov	r8, r4
 80059c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 80059ca:	3346      	adds	r3, #70	@ 0x46
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059cc:	5ae3      	ldrh	r3, [r4, r3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d100      	bne.n	80059d4 <UART_RxISR_16BIT_FIFOEN+0x44>
 80059d2:	e0c8      	b.n	8005b66 <UART_RxISR_16BIT_FIFOEN+0x1d6>
 80059d4:	0689      	lsls	r1, r1, #26
 80059d6:	d400      	bmi.n	80059da <UART_RxISR_16BIT_FIFOEN+0x4a>
 80059d8:	e0a0      	b.n	8005b1c <UART_RxISR_16BIT_FIFOEN+0x18c>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059da:	2301      	movs	r3, #1
 80059dc:	4018      	ands	r0, r3
      huart->RxXferCount--;
 80059de:	255e      	movs	r5, #94	@ 0x5e
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059e0:	4680      	mov	r8, r0
      *tmp = (uint16_t)(uhdata & uhMask);
 80059e2:	4650      	mov	r0, sl
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059e4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80059e8:	4001      	ands	r1, r0
 80059ea:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ec:	3302      	adds	r3, #2
 80059ee:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80059f0:	5b63      	ldrh	r3, [r4, r5]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	5363      	strh	r3, [r4, r5]
      isrflags = READ_REG(huart->Instance->ISR);
 80059f8:	69d7      	ldr	r7, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059fa:	077b      	lsls	r3, r7, #29
 80059fc:	d029      	beq.n	8005a52 <UART_RxISR_16BIT_FIFOEN+0xc2>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059fe:	2101      	movs	r1, #1
 8005a00:	4239      	tst	r1, r7
 8005a02:	d008      	beq.n	8005a16 <UART_RxISR_16BIT_FIFOEN+0x86>
 8005a04:	464b      	mov	r3, r9
 8005a06:	05db      	lsls	r3, r3, #23
 8005a08:	d505      	bpl.n	8005a16 <UART_RxISR_16BIT_FIFOEN+0x86>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a0a:	0008      	movs	r0, r1
 8005a0c:	6211      	str	r1, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0e:	318f      	adds	r1, #143	@ 0x8f
 8005a10:	5863      	ldr	r3, [r4, r1]
 8005a12:	4303      	orrs	r3, r0
 8005a14:	5063      	str	r3, [r4, r1]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a16:	2304      	movs	r3, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a18:	2102      	movs	r1, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	4038      	ands	r0, r7
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a1e:	4239      	tst	r1, r7
 8005a20:	d066      	beq.n	8005af0 <UART_RxISR_16BIT_FIFOEN+0x160>
 8005a22:	4646      	mov	r6, r8
 8005a24:	2e00      	cmp	r6, #0
 8005a26:	d00f      	beq.n	8005a48 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a28:	6211      	str	r1, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a2a:	318e      	adds	r1, #142	@ 0x8e
 8005a2c:	468c      	mov	ip, r1
 8005a2e:	5861      	ldr	r1, [r4, r1]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	4661      	mov	r1, ip
 8005a34:	5063      	str	r3, [r4, r1]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d006      	beq.n	8005a48 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a3e:	2290      	movs	r2, #144	@ 0x90
 8005a40:	2102      	movs	r1, #2
 8005a42:	58a3      	ldr	r3, [r4, r2]
 8005a44:	430b      	orrs	r3, r1
 8005a46:	50a3      	str	r3, [r4, r2]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a48:	2390      	movs	r3, #144	@ 0x90
 8005a4a:	469b      	mov	fp, r3
 8005a4c:	58e3      	ldr	r3, [r4, r3]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d158      	bne.n	8005b04 <UART_RxISR_16BIT_FIFOEN+0x174>
      if (huart->RxXferCount == 0U)
 8005a52:	5b63      	ldrh	r3, [r4, r5]
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d146      	bne.n	8005ae8 <UART_RxISR_16BIT_FIFOEN+0x158>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a64:	6821      	ldr	r1, [r4, #0]
 8005a66:	4e41      	ldr	r6, [pc, #260]	@ (8005b6c <UART_RxISR_16BIT_FIFOEN+0x1dc>)
 8005a68:	680b      	ldr	r3, [r1, #0]
 8005a6a:	4033      	ands	r3, r6
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a72:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	2301      	movs	r3, #1
 8005a78:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a7c:	6821      	ldr	r1, [r4, #0]
 8005a7e:	4e3c      	ldr	r6, [pc, #240]	@ (8005b70 <UART_RxISR_16BIT_FIFOEN+0x1e0>)
 8005a80:	688b      	ldr	r3, [r1, #8]
 8005a82:	4033      	ands	r3, r6
 8005a84:	608b      	str	r3, [r1, #8]
 8005a86:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	238c      	movs	r3, #140	@ 0x8c
 8005a8c:	2120      	movs	r1, #32
 8005a8e:	50e1      	str	r1, [r4, r3]
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a90:	6823      	ldr	r3, [r4, #0]
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a92:	6722      	str	r2, [r4, #112]	@ 0x70
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a94:	685b      	ldr	r3, [r3, #4]
        huart->RxISR = NULL;
 8005a96:	6762      	str	r2, [r4, #116]	@ 0x74
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	d50b      	bpl.n	8005ab4 <UART_RxISR_16BIT_FIFOEN+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f383 8810 	msr	PRIMASK, r3
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	4832      	ldr	r0, [pc, #200]	@ (8005b74 <UART_RxISR_16BIT_FIFOEN+0x1e4>)
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	4003      	ands	r3, r0
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d12b      	bne.n	8005b12 <UART_RxISR_16BIT_FIFOEN+0x182>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	2200      	movs	r2, #0
 8005abc:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005abe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	6821      	ldr	r1, [r4, #0]
 8005ac8:	3210      	adds	r2, #16
 8005aca:	680b      	ldr	r3, [r1, #0]
 8005acc:	4393      	bics	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
 8005ad0:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	69d9      	ldr	r1, [r3, #28]
 8005ad8:	420a      	tst	r2, r1
 8005ada:	d000      	beq.n	8005ade <UART_RxISR_16BIT_FIFOEN+0x14e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005adc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ade:	235c      	movs	r3, #92	@ 0x5c
 8005ae0:	0020      	movs	r0, r4
 8005ae2:	5ae1      	ldrh	r1, [r4, r3]
 8005ae4:	f7ff fbce 	bl	8005284 <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ae8:	06bf      	lsls	r7, r7, #26
 8005aea:	d517      	bpl.n	8005b1c <UART_RxISR_16BIT_FIFOEN+0x18c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	e778      	b.n	80059e2 <UART_RxISR_16BIT_FIFOEN+0x52>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d0a9      	beq.n	8005a48 <UART_RxISR_16BIT_FIFOEN+0xb8>
 8005af4:	4643      	mov	r3, r8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d19f      	bne.n	8005a3a <UART_RxISR_16BIT_FIFOEN+0xaa>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afa:	2390      	movs	r3, #144	@ 0x90
 8005afc:	469b      	mov	fp, r3
 8005afe:	58e3      	ldr	r3, [r4, r3]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0a6      	beq.n	8005a52 <UART_RxISR_16BIT_FIFOEN+0xc2>
          HAL_UART_ErrorCallback(huart);
 8005b04:	0020      	movs	r0, r4
 8005b06:	f7ff fbb1 	bl	800526c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	465a      	mov	r2, fp
 8005b0e:	50a3      	str	r3, [r4, r2]
 8005b10:	e79f      	b.n	8005a52 <UART_RxISR_16BIT_FIFOEN+0xc2>
          HAL_UART_RxCpltCallback(huart);
 8005b12:	0020      	movs	r0, r4
 8005b14:	f7fb ff82 	bl	8001a1c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b18:	06bf      	lsls	r7, r7, #26
 8005b1a:	d4e7      	bmi.n	8005aec <UART_RxISR_16BIT_FIFOEN+0x15c>
    rxdatacount = huart->RxXferCount;
 8005b1c:	235e      	movs	r3, #94	@ 0x5e
 8005b1e:	5ae3      	ldrh	r3, [r4, r3]
 8005b20:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d100      	bne.n	8005b28 <UART_RxISR_16BIT_FIFOEN+0x198>
 8005b26:	e74a      	b.n	80059be <UART_RxISR_16BIT_FIFOEN+0x2e>
 8005b28:	2368      	movs	r3, #104	@ 0x68
 8005b2a:	5ae3      	ldrh	r3, [r4, r3]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d800      	bhi.n	8005b32 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8005b30:	e745      	b.n	80059be <UART_RxISR_16BIT_FIFOEN+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b32:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	2201      	movs	r2, #1
 8005b38:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b3c:	6821      	ldr	r1, [r4, #0]
 8005b3e:	4d0e      	ldr	r5, [pc, #56]	@ (8005b78 <UART_RxISR_16BIT_FIFOEN+0x1e8>)
 8005b40:	688b      	ldr	r3, [r1, #8]
 8005b42:	402b      	ands	r3, r5
 8005b44:	608b      	str	r3, [r1, #8]
 8005b46:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <UART_RxISR_16BIT_FIFOEN+0x1ec>)
 8005b4c:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b56:	2020      	movs	r0, #32
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	4303      	orrs	r3, r0
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	f381 8810 	msr	PRIMASK, r1
}
 8005b64:	e72b      	b.n	80059be <UART_RxISR_16BIT_FIFOEN+0x2e>
    rxdatacount = huart->RxXferCount;
 8005b66:	235e      	movs	r3, #94	@ 0x5e
 8005b68:	5ae3      	ldrh	r3, [r4, r3]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b6a:	e728      	b.n	80059be <UART_RxISR_16BIT_FIFOEN+0x2e>
 8005b6c:	fffffeff 	.word	0xfffffeff
 8005b70:	effffffe 	.word	0xeffffffe
 8005b74:	fbffffff 	.word	0xfbffffff
 8005b78:	efffffff 	.word	0xefffffff
 8005b7c:	080056cd 	.word	0x080056cd

08005b80 <UART_SetConfig>:
{
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b84:	6925      	ldr	r5, [r4, #16]
 8005b86:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b88:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8a:	432a      	orrs	r2, r5
 8005b8c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b8e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b90:	69c0      	ldr	r0, [r0, #28]
 8005b92:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b94:	4d48      	ldr	r5, [pc, #288]	@ (8005cb8 <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b96:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b98:	4029      	ands	r1, r5
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4946      	ldr	r1, [pc, #280]	@ (8005cbc <UART_SetConfig+0x13c>)
    tmpreg |= huart->Init.OneBitSampling;
 8005ba2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba4:	400a      	ands	r2, r1
 8005ba6:	68e1      	ldr	r1, [r4, #12]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bac:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bae:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005bb0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb2:	4d43      	ldr	r5, [pc, #268]	@ (8005cc0 <UART_SetConfig+0x140>)
 8005bb4:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bb6:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005bc0:	43aa      	bics	r2, r5
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc4 <UART_SetConfig+0x144>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <UART_SetConfig+0x56>
 8005bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8005cc8 <UART_SetConfig+0x148>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d008      	beq.n	8005be4 <UART_SetConfig+0x64>
        pclk = (uint32_t) HSI_VALUE;
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	e00f      	b.n	8005bf6 <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ccc <UART_SetConfig+0x14c>)
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bda:	2303      	movs	r3, #3
 8005bdc:	4013      	ands	r3, r2
 8005bde:	3b01      	subs	r3, #1
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d90e      	bls.n	8005c02 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	4298      	cmp	r0, r3
 8005bea:	d03a      	beq.n	8005c62 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fe fc02 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d127      	bne.n	8005c44 <UART_SetConfig+0xc4>
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8005bf6:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <UART_SetConfig+0x150>)
 8005bf8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bfe:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	4a34      	ldr	r2, [pc, #208]	@ (8005cd4 <UART_SetConfig+0x154>)
 8005c04:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c06:	2380      	movs	r3, #128	@ 0x80
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	d024      	beq.n	8005c58 <UART_SetConfig+0xd8>
    switch (clocksource)
 8005c0e:	2a04      	cmp	r2, #4
 8005c10:	d01a      	beq.n	8005c48 <UART_SetConfig+0xc8>
 8005c12:	d81c      	bhi.n	8005c4e <UART_SetConfig+0xce>
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	d0e9      	beq.n	8005bec <UART_SetConfig+0x6c>
 8005c18:	2a02      	cmp	r2, #2
 8005c1a:	d1da      	bne.n	8005bd2 <UART_SetConfig+0x52>
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	482e      	ldr	r0, [pc, #184]	@ (8005cd8 <UART_SetConfig+0x158>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005cdc <UART_SetConfig+0x15c>)
 8005c20:	0049      	lsls	r1, r1, #1
 8005c22:	5ac9      	ldrh	r1, [r1, r3]
 8005c24:	f7fa fa6c 	bl	8000100 <__udivsi3>
 8005c28:	6865      	ldr	r5, [r4, #4]
 8005c2a:	086b      	lsrs	r3, r5, #1
 8005c2c:	18c0      	adds	r0, r0, r3
 8005c2e:	0029      	movs	r1, r5
 8005c30:	f7fa fa66 	bl	8000100 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	0002      	movs	r2, r0
 8005c36:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce0 <UART_SetConfig+0x160>)
 8005c38:	3a10      	subs	r2, #16
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d8c9      	bhi.n	8005bd2 <UART_SetConfig+0x52>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	60d8      	str	r0, [r3, #12]
 8005c42:	e7d7      	b.n	8005bf4 <UART_SetConfig+0x74>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005c46:	e7ea      	b.n	8005c1e <UART_SetConfig+0x9e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c48:	f7fe fabe 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005c4c:	e7d0      	b.n	8005bf0 <UART_SetConfig+0x70>
    switch (clocksource)
 8005c4e:	0018      	movs	r0, r3
 8005c50:	2a08      	cmp	r2, #8
 8005c52:	d0e4      	beq.n	8005c1e <UART_SetConfig+0x9e>
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	2001      	movs	r0, #1
 8005c56:	e7ce      	b.n	8005bf6 <UART_SetConfig+0x76>
    switch (clocksource)
 8005c58:	2a04      	cmp	r2, #4
 8005c5a:	d029      	beq.n	8005cb0 <UART_SetConfig+0x130>
 8005c5c:	d824      	bhi.n	8005ca8 <UART_SetConfig+0x128>
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	d11d      	bne.n	8005c9e <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c62:	f7fe fbc7 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d0c4      	beq.n	8005bf4 <UART_SetConfig+0x74>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cdc <UART_SetConfig+0x15c>)
 8005c6e:	0049      	lsls	r1, r1, #1
 8005c70:	5ac9      	ldrh	r1, [r1, r3]
 8005c72:	f7fa fa45 	bl	8000100 <__udivsi3>
 8005c76:	6865      	ldr	r5, [r4, #4]
 8005c78:	0040      	lsls	r0, r0, #1
 8005c7a:	086b      	lsrs	r3, r5, #1
 8005c7c:	18c0      	adds	r0, r0, r3
 8005c7e:	0029      	movs	r1, r5
 8005c80:	f7fa fa3e 	bl	8000100 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c84:	0002      	movs	r2, r0
 8005c86:	4b16      	ldr	r3, [pc, #88]	@ (8005ce0 <UART_SetConfig+0x160>)
 8005c88:	3a10      	subs	r2, #16
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d8a1      	bhi.n	8005bd2 <UART_SetConfig+0x52>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <UART_SetConfig+0x164>)
        huart->Instance->BRR = brrtemp;
 8005c90:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c92:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c94:	0700      	lsls	r0, r0, #28
 8005c96:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8005c98:	4303      	orrs	r3, r0
 8005c9a:	60d3      	str	r3, [r2, #12]
 8005c9c:	e7aa      	b.n	8005bf4 <UART_SetConfig+0x74>
    switch (clocksource)
 8005c9e:	2a02      	cmp	r2, #2
 8005ca0:	d000      	beq.n	8005ca4 <UART_SetConfig+0x124>
 8005ca2:	e796      	b.n	8005bd2 <UART_SetConfig+0x52>
 8005ca4:	480c      	ldr	r0, [pc, #48]	@ (8005cd8 <UART_SetConfig+0x158>)
 8005ca6:	e7e1      	b.n	8005c6c <UART_SetConfig+0xec>
 8005ca8:	2a08      	cmp	r2, #8
 8005caa:	d0df      	beq.n	8005c6c <UART_SetConfig+0xec>
        pclk = (uint32_t) HSI_VALUE;
 8005cac:	2001      	movs	r0, #1
 8005cae:	e7a2      	b.n	8005bf6 <UART_SetConfig+0x76>
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb0:	f7fe fa8a 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005cb4:	e7d7      	b.n	8005c66 <UART_SetConfig+0xe6>
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	cfff69f3 	.word	0xcfff69f3
 8005cbc:	ffffcfff 	.word	0xffffcfff
 8005cc0:	11fff4ff 	.word	0x11fff4ff
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	40004400 	.word	0x40004400
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	00010001 	.word	0x00010001
 8005cd4:	0800695c 	.word	0x0800695c
 8005cd8:	00f42400 	.word	0x00f42400
 8005cdc:	08006960 	.word	0x08006960
 8005ce0:	0000ffef 	.word	0x0000ffef
 8005ce4:	0000fff0 	.word	0x0000fff0

08005ce8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8005cea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cec:	071a      	lsls	r2, r3, #28
 8005cee:	d506      	bpl.n	8005cfe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf0:	6801      	ldr	r1, [r0, #0]
 8005cf2:	4c28      	ldr	r4, [pc, #160]	@ (8005d94 <UART_AdvFeatureConfig+0xac>)
 8005cf4:	684a      	ldr	r2, [r1, #4]
 8005cf6:	4022      	ands	r2, r4
 8005cf8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005cfa:	4322      	orrs	r2, r4
 8005cfc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cfe:	07da      	lsls	r2, r3, #31
 8005d00:	d506      	bpl.n	8005d10 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d02:	6801      	ldr	r1, [r0, #0]
 8005d04:	4c24      	ldr	r4, [pc, #144]	@ (8005d98 <UART_AdvFeatureConfig+0xb0>)
 8005d06:	684a      	ldr	r2, [r1, #4]
 8005d08:	4022      	ands	r2, r4
 8005d0a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005d0c:	4322      	orrs	r2, r4
 8005d0e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d10:	079a      	lsls	r2, r3, #30
 8005d12:	d506      	bpl.n	8005d22 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d14:	6801      	ldr	r1, [r0, #0]
 8005d16:	4c21      	ldr	r4, [pc, #132]	@ (8005d9c <UART_AdvFeatureConfig+0xb4>)
 8005d18:	684a      	ldr	r2, [r1, #4]
 8005d1a:	4022      	ands	r2, r4
 8005d1c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005d1e:	4322      	orrs	r2, r4
 8005d20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d22:	075a      	lsls	r2, r3, #29
 8005d24:	d506      	bpl.n	8005d34 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d26:	6801      	ldr	r1, [r0, #0]
 8005d28:	4c1d      	ldr	r4, [pc, #116]	@ (8005da0 <UART_AdvFeatureConfig+0xb8>)
 8005d2a:	684a      	ldr	r2, [r1, #4]
 8005d2c:	4022      	ands	r2, r4
 8005d2e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005d30:	4322      	orrs	r2, r4
 8005d32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d34:	06da      	lsls	r2, r3, #27
 8005d36:	d506      	bpl.n	8005d46 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d38:	6801      	ldr	r1, [r0, #0]
 8005d3a:	4c1a      	ldr	r4, [pc, #104]	@ (8005da4 <UART_AdvFeatureConfig+0xbc>)
 8005d3c:	688a      	ldr	r2, [r1, #8]
 8005d3e:	4022      	ands	r2, r4
 8005d40:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005d42:	4322      	orrs	r2, r4
 8005d44:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d46:	069a      	lsls	r2, r3, #26
 8005d48:	d506      	bpl.n	8005d58 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4a:	6801      	ldr	r1, [r0, #0]
 8005d4c:	4c16      	ldr	r4, [pc, #88]	@ (8005da8 <UART_AdvFeatureConfig+0xc0>)
 8005d4e:	688a      	ldr	r2, [r1, #8]
 8005d50:	4022      	ands	r2, r4
 8005d52:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005d54:	4322      	orrs	r2, r4
 8005d56:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d58:	065a      	lsls	r2, r3, #25
 8005d5a:	d50a      	bpl.n	8005d72 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d5c:	6801      	ldr	r1, [r0, #0]
 8005d5e:	4d13      	ldr	r5, [pc, #76]	@ (8005dac <UART_AdvFeatureConfig+0xc4>)
 8005d60:	684a      	ldr	r2, [r1, #4]
 8005d62:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005d64:	402a      	ands	r2, r5
 8005d66:	4322      	orrs	r2, r4
 8005d68:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d6a:	2280      	movs	r2, #128	@ 0x80
 8005d6c:	0352      	lsls	r2, r2, #13
 8005d6e:	4294      	cmp	r4, r2
 8005d70:	d009      	beq.n	8005d86 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d72:	061b      	lsls	r3, r3, #24
 8005d74:	d506      	bpl.n	8005d84 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d76:	6802      	ldr	r2, [r0, #0]
 8005d78:	490d      	ldr	r1, [pc, #52]	@ (8005db0 <UART_AdvFeatureConfig+0xc8>)
 8005d7a:	6853      	ldr	r3, [r2, #4]
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6053      	str	r3, [r2, #4]
}
 8005d84:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d86:	684a      	ldr	r2, [r1, #4]
 8005d88:	4c0a      	ldr	r4, [pc, #40]	@ (8005db4 <UART_AdvFeatureConfig+0xcc>)
 8005d8a:	4022      	ands	r2, r4
 8005d8c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005d8e:	4322      	orrs	r2, r4
 8005d90:	604a      	str	r2, [r1, #4]
 8005d92:	e7ee      	b.n	8005d72 <UART_AdvFeatureConfig+0x8a>
 8005d94:	ffff7fff 	.word	0xffff7fff
 8005d98:	fffdffff 	.word	0xfffdffff
 8005d9c:	fffeffff 	.word	0xfffeffff
 8005da0:	fffbffff 	.word	0xfffbffff
 8005da4:	ffffefff 	.word	0xffffefff
 8005da8:	ffffdfff 	.word	0xffffdfff
 8005dac:	ffefffff 	.word	0xffefffff
 8005db0:	fff7ffff 	.word	0xfff7ffff
 8005db4:	ff9fffff 	.word	0xff9fffff

08005db8 <UART_WaitOnFlagUntilTimeout>:
{
 8005db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dba:	464f      	mov	r7, r9
 8005dbc:	4646      	mov	r6, r8
 8005dbe:	46d6      	mov	lr, sl
 8005dc0:	b5c0      	push	{r6, r7, lr}
 8005dc2:	4699      	mov	r9, r3
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	000d      	movs	r5, r1
 8005dc8:	0016      	movs	r6, r2
 8005dca:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dcc:	6803      	ldr	r3, [r0, #0]
 8005dce:	e001      	b.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x1c>
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	1c7a      	adds	r2, r7, #1
 8005dd2:	d10c      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x36>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd4:	69dc      	ldr	r4, [r3, #28]
 8005dd6:	402c      	ands	r4, r5
 8005dd8:	1b64      	subs	r4, r4, r5
 8005dda:	4262      	negs	r2, r4
 8005ddc:	4154      	adcs	r4, r2
 8005dde:	42b4      	cmp	r4, r6
 8005de0:	d0f6      	beq.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8005de2:	2000      	movs	r0, #0
}
 8005de4:	bce0      	pop	{r5, r6, r7}
 8005de6:	46ba      	mov	sl, r7
 8005de8:	46b1      	mov	r9, r6
 8005dea:	46a8      	mov	r8, r5
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dee:	f7fc febb 	bl	8002b68 <HAL_GetTick>
 8005df2:	464b      	mov	r3, r9
 8005df4:	1ac0      	subs	r0, r0, r3
 8005df6:	42b8      	cmp	r0, r7
 8005df8:	d823      	bhi.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d021      	beq.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x8a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dfe:	4643      	mov	r3, r8
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	0752      	lsls	r2, r2, #29
 8005e06:	d5e5      	bpl.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x1c>
 8005e08:	002a      	movs	r2, r5
 8005e0a:	2140      	movs	r1, #64	@ 0x40
 8005e0c:	3a40      	subs	r2, #64	@ 0x40
 8005e0e:	438a      	bics	r2, r1
 8005e10:	d0e0      	beq.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x1c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e12:	2408      	movs	r4, #8
 8005e14:	0021      	movs	r1, r4
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	4011      	ands	r1, r2
 8005e1a:	468a      	mov	sl, r1
 8005e1c:	4214      	tst	r4, r2
 8005e1e:	d112      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x8e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e20:	2280      	movs	r2, #128	@ 0x80
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	0112      	lsls	r2, r2, #4
 8005e26:	4211      	tst	r1, r2
 8005e28:	d0d4      	beq.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x1c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e2a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	f7ff f9e9 	bl	8005204 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e32:	2390      	movs	r3, #144	@ 0x90
 8005e34:	2220      	movs	r2, #32
 8005e36:	4641      	mov	r1, r8
 8005e38:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	3b0c      	subs	r3, #12
 8005e40:	54d1      	strb	r1, [r2, r3]
        return HAL_TIMEOUT;
 8005e42:	2003      	movs	r0, #3
 8005e44:	e7ce      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x2c>
          UART_EndRxTransfer(huart);
 8005e46:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e48:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8005e4a:	f7ff f9db 	bl	8005204 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e4e:	2390      	movs	r3, #144	@ 0x90
 8005e50:	4642      	mov	r2, r8
          __HAL_UNLOCK(huart);
 8005e52:	4641      	mov	r1, r8
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e54:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 8005e56:	2200      	movs	r2, #0
 8005e58:	3b0c      	subs	r3, #12
          return HAL_ERROR;
 8005e5a:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8005e5c:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 8005e5e:	e7c1      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x2c>

08005e60 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	2200      	movs	r2, #0
 8005e62:	2390      	movs	r3, #144	@ 0x90
{
 8005e64:	b530      	push	{r4, r5, lr}
 8005e66:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	50c2      	str	r2, [r0, r3]
{
 8005e6a:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8005e6c:	f7fc fe7c 	bl	8002b68 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e70:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8005e72:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	0709      	lsls	r1, r1, #28
 8005e78:	d410      	bmi.n	8005e9c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	0752      	lsls	r2, r2, #29
 8005e7e:	d41c      	bmi.n	8005eba <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	2320      	movs	r3, #32
 8005e82:	2288      	movs	r2, #136	@ 0x88
 8005e84:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e86:	3204      	adds	r2, #4
 8005e88:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	2300      	movs	r3, #0
  return HAL_OK;
 8005e8c:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e90:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8005e92:	2384      	movs	r3, #132	@ 0x84
 8005e94:	2200      	movs	r2, #0
 8005e96:	54e2      	strb	r2, [r4, r3]
}
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e9c:	2180      	movs	r1, #128	@ 0x80
 8005e9e:	4b22      	ldr	r3, [pc, #136]	@ (8005f28 <UART_CheckIdleState+0xc8>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	0389      	lsls	r1, r1, #14
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f7ff ff85 	bl	8005db8 <UART_WaitOnFlagUntilTimeout>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d129      	bne.n	8005f06 <UART_CheckIdleState+0xa6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	0752      	lsls	r2, r2, #29
 8005eb8:	d5e2      	bpl.n	8005e80 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eba:	2180      	movs	r1, #128	@ 0x80
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <UART_CheckIdleState+0xc8>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	0020      	movs	r0, r4
 8005ec4:	002b      	movs	r3, r5
 8005ec6:	03c9      	lsls	r1, r1, #15
 8005ec8:	f7ff ff76 	bl	8005db8 <UART_WaitOnFlagUntilTimeout>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d0d7      	beq.n	8005e80 <UART_CheckIdleState+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eda:	6821      	ldr	r1, [r4, #0]
 8005edc:	4d13      	ldr	r5, [pc, #76]	@ (8005f2c <UART_CheckIdleState+0xcc>)
 8005ede:	680b      	ldr	r3, [r1, #0]
 8005ee0:	402b      	ands	r3, r5
 8005ee2:	600b      	str	r3, [r1, #0]
 8005ee4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	6821      	ldr	r1, [r4, #0]
 8005ef2:	688b      	ldr	r3, [r1, #8]
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	608b      	str	r3, [r1, #8]
 8005ef8:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005efc:	238c      	movs	r3, #140	@ 0x8c
 8005efe:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8005f00:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8005f02:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8005f04:	e7c5      	b.n	8005e92 <UART_CheckIdleState+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f06:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f10:	2080      	movs	r0, #128	@ 0x80
 8005f12:	6822      	ldr	r2, [r4, #0]
 8005f14:	6813      	ldr	r3, [r2, #0]
 8005f16:	4383      	bics	r3, r0
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8005f1e:	2388      	movs	r3, #136	@ 0x88
 8005f20:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8005f22:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8005f24:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8005f26:	e7b4      	b.n	8005e92 <UART_CheckIdleState+0x32>
 8005f28:	01ffffff 	.word	0x01ffffff
 8005f2c:	fffffedf 	.word	0xfffffedf

08005f30 <HAL_UART_Init>:
{
 8005f30:	b510      	push	{r4, lr}
 8005f32:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005f34:	d024      	beq.n	8005f80 <HAL_UART_Init+0x50>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	2388      	movs	r3, #136	@ 0x88
 8005f38:	58c3      	ldr	r3, [r0, r3]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d026      	beq.n	8005f8c <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005f3e:	2388      	movs	r3, #136	@ 0x88
 8005f40:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005f42:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	438b      	bics	r3, r1
 8005f4c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d117      	bne.n	8005f84 <HAL_UART_Init+0x54>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f54:	0020      	movs	r0, r4
 8005f56:	f7ff fe13 	bl	8005b80 <UART_SetConfig>
 8005f5a:	2801      	cmp	r0, #1
 8005f5c:	d010      	beq.n	8005f80 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	490d      	ldr	r1, [pc, #52]	@ (8005f98 <HAL_UART_Init+0x68>)
 8005f62:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005f64:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f66:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f68:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	438a      	bics	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	3929      	subs	r1, #41	@ 0x29
 8005f76:	430a      	orrs	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005f7a:	f7ff ff71 	bl	8005e60 <UART_CheckIdleState>
}
 8005f7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f80:	2001      	movs	r0, #1
 8005f82:	e7fc      	b.n	8005f7e <HAL_UART_Init+0x4e>
    UART_AdvFeatureConfig(huart);
 8005f84:	0020      	movs	r0, r4
 8005f86:	f7ff feaf 	bl	8005ce8 <UART_AdvFeatureConfig>
 8005f8a:	e7e3      	b.n	8005f54 <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 8005f8c:	2284      	movs	r2, #132	@ 0x84
 8005f8e:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005f90:	f7fb ffd6 	bl	8001f40 <HAL_UART_MspInit>
 8005f94:	e7d3      	b.n	8005f3e <HAL_UART_Init+0xe>
 8005f96:	46c0      	nop			@ (mov r8, r8)
 8005f98:	ffffb7ff 	.word	0xffffb7ff

08005f9c <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005f9c:	235c      	movs	r3, #92	@ 0x5c
{
 8005f9e:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005fa0:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005fa2:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	6881      	ldr	r1, [r0, #8]
 8005fb0:	015b      	lsls	r3, r3, #5
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d100      	bne.n	8005fb8 <UART_Start_Receive_IT+0x1c>
 8005fb6:	e073      	b.n	80060a0 <UART_Start_Receive_IT+0x104>
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d136      	bne.n	800602a <UART_Start_Receive_IT+0x8e>
 8005fbc:	6903      	ldr	r3, [r0, #16]
 8005fbe:	1e59      	subs	r1, r3, #1
 8005fc0:	418b      	sbcs	r3, r1
 8005fc2:	217f      	movs	r1, #127	@ 0x7f
 8005fc4:	425b      	negs	r3, r3
 8005fc6:	438b      	bics	r3, r1
 8005fc8:	33ff      	adds	r3, #255	@ 0xff
 8005fca:	2160      	movs	r1, #96	@ 0x60
 8005fcc:	5243      	strh	r3, [r0, r1]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	2390      	movs	r3, #144	@ 0x90
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	3122      	adds	r1, #34	@ 0x22
 8005fd8:	50c1      	str	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fda:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fde:	2401      	movs	r4, #1
 8005fe0:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe4:	6801      	ldr	r1, [r0, #0]
 8005fe6:	688b      	ldr	r3, [r1, #8]
 8005fe8:	4323      	orrs	r3, r4
 8005fea:	608b      	str	r3, [r1, #8]
 8005fec:	f38c 8810 	msr	PRIMASK, ip
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ff0:	2380      	movs	r3, #128	@ 0x80
 8005ff2:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8005ff4:	059b      	lsls	r3, r3, #22
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	d036      	beq.n	8006068 <UART_Start_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	2380      	movs	r3, #128	@ 0x80
 8005ffc:	6882      	ldr	r2, [r0, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffe:	6901      	ldr	r1, [r0, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	015b      	lsls	r3, r3, #5
 8006002:	429a      	cmp	r2, r3
 8006004:	d01e      	beq.n	8006044 <UART_Start_Receive_IT+0xa8>
      huart->RxISR = UART_RxISR_8BIT;
 8006006:	4b37      	ldr	r3, [pc, #220]	@ (80060e4 <UART_Start_Receive_IT+0x148>)
 8006008:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800600a:	2900      	cmp	r1, #0
 800600c:	d11e      	bne.n	800604c <UART_Start_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006012:	2301      	movs	r3, #1
 8006014:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006018:	6802      	ldr	r2, [r0, #0]
 800601a:	2020      	movs	r0, #32
 800601c:	6813      	ldr	r3, [r2, #0]
 800601e:	4303      	orrs	r3, r0
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	f381 8810 	msr	PRIMASK, r1
}
 8006026:	2000      	movs	r0, #0
 8006028:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800602a:	2480      	movs	r4, #128	@ 0x80
 800602c:	2300      	movs	r3, #0
 800602e:	0564      	lsls	r4, r4, #21
 8006030:	42a1      	cmp	r1, r4
 8006032:	d1ca      	bne.n	8005fca <UART_Start_Receive_IT+0x2e>
 8006034:	6903      	ldr	r3, [r0, #16]
 8006036:	1e59      	subs	r1, r3, #1
 8006038:	418b      	sbcs	r3, r1
 800603a:	213f      	movs	r1, #63	@ 0x3f
 800603c:	425b      	negs	r3, r3
 800603e:	438b      	bics	r3, r1
 8006040:	337f      	adds	r3, #127	@ 0x7f
 8006042:	e7c2      	b.n	8005fca <UART_Start_Receive_IT+0x2e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	2900      	cmp	r1, #0
 8006046:	d035      	beq.n	80060b4 <UART_Start_Receive_IT+0x118>
      huart->RxISR = UART_RxISR_8BIT;
 8006048:	4b26      	ldr	r3, [pc, #152]	@ (80060e4 <UART_Start_Receive_IT+0x148>)
 800604a:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006050:	2301      	movs	r3, #1
 8006052:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006056:	6802      	ldr	r2, [r0, #0]
 8006058:	3320      	adds	r3, #32
 800605a:	6810      	ldr	r0, [r2, #0]
 800605c:	33ff      	adds	r3, #255	@ 0xff
 800605e:	4303      	orrs	r3, r0
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	f381 8810 	msr	PRIMASK, r1
}
 8006066:	e7de      	b.n	8006026 <UART_Start_Receive_IT+0x8a>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006068:	2368      	movs	r3, #104	@ 0x68
 800606a:	5ac3      	ldrh	r3, [r0, r3]
 800606c:	4293      	cmp	r3, r2
 800606e:	d8c4      	bhi.n	8005ffa <UART_Start_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	6882      	ldr	r2, [r0, #8]
 8006074:	6901      	ldr	r1, [r0, #16]
 8006076:	015b      	lsls	r3, r3, #5
 8006078:	429a      	cmp	r2, r3
 800607a:	d01e      	beq.n	80060ba <UART_Start_Receive_IT+0x11e>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800607c:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <UART_Start_Receive_IT+0x14c>)
 800607e:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006080:	2900      	cmp	r1, #0
 8006082:	d11e      	bne.n	80060c2 <UART_Start_Receive_IT+0x126>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006084:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006088:	2301      	movs	r3, #1
 800608a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800608e:	2380      	movs	r3, #128	@ 0x80
 8006090:	6802      	ldr	r2, [r0, #0]
 8006092:	055b      	lsls	r3, r3, #21
 8006094:	6890      	ldr	r0, [r2, #8]
 8006096:	4303      	orrs	r3, r0
 8006098:	6093      	str	r3, [r2, #8]
 800609a:	f381 8810 	msr	PRIMASK, r1
}
 800609e:	e7c2      	b.n	8006026 <UART_Start_Receive_IT+0x8a>
  UART_MASK_COMPUTATION(huart);
 80060a0:	6903      	ldr	r3, [r0, #16]
 80060a2:	1e59      	subs	r1, r3, #1
 80060a4:	418b      	sbcs	r3, r1
 80060a6:	21ff      	movs	r1, #255	@ 0xff
 80060a8:	425b      	negs	r3, r3
 80060aa:	438b      	bics	r3, r1
 80060ac:	490f      	ldr	r1, [pc, #60]	@ (80060ec <UART_Start_Receive_IT+0x150>)
 80060ae:	468c      	mov	ip, r1
 80060b0:	4463      	add	r3, ip
 80060b2:	e78a      	b.n	8005fca <UART_Start_Receive_IT+0x2e>
 80060b4:	4b0e      	ldr	r3, [pc, #56]	@ (80060f0 <UART_Start_Receive_IT+0x154>)
 80060b6:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060b8:	e7a9      	b.n	800600e <UART_Start_Receive_IT+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d00e      	beq.n	80060dc <UART_Start_Receive_IT+0x140>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060be:	4b0a      	ldr	r3, [pc, #40]	@ (80060e8 <UART_Start_Receive_IT+0x14c>)
 80060c0:	6743      	str	r3, [r0, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c6:	2301      	movs	r3, #1
 80060c8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060cc:	6802      	ldr	r2, [r0, #0]
 80060ce:	33ff      	adds	r3, #255	@ 0xff
 80060d0:	6814      	ldr	r4, [r2, #0]
 80060d2:	4323      	orrs	r3, r4
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	f381 8810 	msr	PRIMASK, r1
}
 80060da:	e7d3      	b.n	8006084 <UART_Start_Receive_IT+0xe8>
 80060dc:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <UART_Start_Receive_IT+0x158>)
 80060de:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060e0:	e7d0      	b.n	8006084 <UART_Start_Receive_IT+0xe8>
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	080055fd 	.word	0x080055fd
 80060e8:	08005799 	.word	0x08005799
 80060ec:	000001ff 	.word	0x000001ff
 80060f0:	080056cd 	.word	0x080056cd
 80060f4:	08005991 	.word	0x08005991

080060f8 <HAL_UART_Receive_IT>:
{
 80060f8:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80060fa:	208c      	movs	r0, #140	@ 0x8c
 80060fc:	5818      	ldr	r0, [r3, r0]
{
 80060fe:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006100:	2820      	cmp	r0, #32
 8006102:	d127      	bne.n	8006154 <HAL_UART_Receive_IT+0x5c>
    if ((pData == NULL) || (Size == 0U))
 8006104:	2900      	cmp	r1, #0
 8006106:	d023      	beq.n	8006150 <HAL_UART_Receive_IT+0x58>
 8006108:	2a00      	cmp	r2, #0
 800610a:	d021      	beq.n	8006150 <HAL_UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610c:	2080      	movs	r0, #128	@ 0x80
 800610e:	689c      	ldr	r4, [r3, #8]
 8006110:	0140      	lsls	r0, r0, #5
 8006112:	4284      	cmp	r4, r0
 8006114:	d105      	bne.n	8006122 <HAL_UART_Receive_IT+0x2a>
 8006116:	6918      	ldr	r0, [r3, #16]
 8006118:	2800      	cmp	r0, #0
 800611a:	d102      	bne.n	8006122 <HAL_UART_Receive_IT+0x2a>
      return HAL_ERROR;
 800611c:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800611e:	07cc      	lsls	r4, r1, #31
 8006120:	d417      	bmi.n	8006152 <HAL_UART_Receive_IT+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006122:	2000      	movs	r0, #0
 8006124:	66d8      	str	r0, [r3, #108]	@ 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	6840      	ldr	r0, [r0, #4]
 800612a:	0200      	lsls	r0, r0, #8
 800612c:	d50c      	bpl.n	8006148 <HAL_UART_Receive_IT+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006132:	2001      	movs	r0, #1
 8006134:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006138:	2080      	movs	r0, #128	@ 0x80
 800613a:	681c      	ldr	r4, [r3, #0]
 800613c:	04c0      	lsls	r0, r0, #19
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	4328      	orrs	r0, r5
 8006142:	6020      	str	r0, [r4, #0]
 8006144:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006148:	0018      	movs	r0, r3
 800614a:	f7ff ff27 	bl	8005f9c <UART_Start_Receive_IT>
 800614e:	e000      	b.n	8006152 <HAL_UART_Receive_IT+0x5a>
      return HAL_ERROR;
 8006150:	2001      	movs	r0, #1
}
 8006152:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8006154:	2002      	movs	r0, #2
 8006156:	e7fc      	b.n	8006152 <HAL_UART_Receive_IT+0x5a>

08006158 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800615a:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800615c:	4f0b      	ldr	r7, [pc, #44]	@ (800618c <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800615e:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006160:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8006162:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006164:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006166:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006168:	4e09      	ldr	r6, [pc, #36]	@ (8006190 <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800616a:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800616c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800616e:	f7fa f851 	bl	8000214 <__divsi3>
 8006172:	236a      	movs	r3, #106	@ 0x6a
 8006174:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006176:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006178:	0f5b      	lsrs	r3, r3, #29
 800617a:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800617c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800617e:	00c0      	lsls	r0, r0, #3
 8006180:	f7fa f848 	bl	8000214 <__divsi3>
 8006184:	2368      	movs	r3, #104	@ 0x68
 8006186:	52e8      	strh	r0, [r5, r3]
  }
}
 8006188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	08006980 	.word	0x08006980
 8006190:	08006978 	.word	0x08006978

08006194 <HAL_UARTEx_WakeupCallback>:
}
 8006194:	4770      	bx	lr
 8006196:	46c0      	nop			@ (mov r8, r8)

08006198 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8006198:	4770      	bx	lr
 800619a:	46c0      	nop			@ (mov r8, r8)

0800619c <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800619c:	4770      	bx	lr
 800619e:	46c0      	nop			@ (mov r8, r8)

080061a0 <HAL_UARTEx_DisableFifoMode>:
{
 80061a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80061a2:	2484      	movs	r4, #132	@ 0x84
 80061a4:	5d03      	ldrb	r3, [r0, r4]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d012      	beq.n	80061d0 <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 80061aa:	2588      	movs	r5, #136	@ 0x88
 80061ac:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80061ae:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80061b0:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b2:	6803      	ldr	r3, [r0, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80061b6:	6819      	ldr	r1, [r3, #0]
 80061b8:	43b1      	bics	r1, r6
 80061ba:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061bc:	4905      	ldr	r1, [pc, #20]	@ (80061d4 <HAL_UARTEx_DisableFifoMode+0x34>)
 80061be:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061c0:	2100      	movs	r1, #0
 80061c2:	6641      	str	r1, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	2320      	movs	r3, #32
 80061c8:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 80061ca:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 80061cc:	2000      	movs	r0, #0
}
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80061d0:	2002      	movs	r0, #2
 80061d2:	e7fc      	b.n	80061ce <HAL_UARTEx_DisableFifoMode+0x2e>
 80061d4:	dfffffff 	.word	0xdfffffff

080061d8 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 80061d8:	2384      	movs	r3, #132	@ 0x84
{
 80061da:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80061dc:	5cc3      	ldrb	r3, [r0, r3]
{
 80061de:	0004      	movs	r4, r0
 80061e0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d01e      	beq.n	8006224 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80061e6:	2388      	movs	r3, #136	@ 0x88
 80061e8:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ea:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80061ec:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ee:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	3923      	subs	r1, #35	@ 0x23
 80061f4:	438b      	bics	r3, r1
 80061f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061f8:	68ab      	ldr	r3, [r5, #8]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	08d9      	lsrs	r1, r3, #3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061fe:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006200:	4311      	orrs	r1, r2
 8006202:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006208:	f7ff ffa6 	bl	8006158 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800620c:	2388      	movs	r3, #136	@ 0x88
 800620e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006210:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006212:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8006214:	2200      	movs	r2, #0
  return HAL_OK;
 8006216:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8006218:	3b04      	subs	r3, #4
 800621a:	54e2      	strb	r2, [r4, r3]
}
 800621c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800621e:	4b02      	ldr	r3, [pc, #8]	@ (8006228 <HAL_UARTEx_SetTxFifoThreshold+0x50>)
 8006220:	6683      	str	r3, [r0, #104]	@ 0x68
 8006222:	e7f3      	b.n	800620c <HAL_UARTEx_SetTxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 8006224:	2002      	movs	r0, #2
 8006226:	e7f9      	b.n	800621c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006228:	00010001 	.word	0x00010001

0800622c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800622c:	2384      	movs	r3, #132	@ 0x84
{
 800622e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006230:	5cc3      	ldrb	r3, [r0, r3]
{
 8006232:	0004      	movs	r4, r0
 8006234:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006236:	2b01      	cmp	r3, #1
 8006238:	d01e      	beq.n	8006278 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800623a:	2388      	movs	r3, #136	@ 0x88
 800623c:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800623e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006242:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	3923      	subs	r1, #35	@ 0x23
 8006248:	438b      	bics	r3, r1
 800624a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800624c:	68a9      	ldr	r1, [r5, #8]
 800624e:	4b0b      	ldr	r3, [pc, #44]	@ (800627c <HAL_UARTEx_SetRxFifoThreshold+0x50>)
 8006250:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006252:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006254:	4311      	orrs	r1, r2
 8006256:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800625c:	f7ff ff7c 	bl	8006158 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 8006260:	2388      	movs	r3, #136	@ 0x88
 8006262:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006264:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006266:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8006268:	2200      	movs	r2, #0
  return HAL_OK;
 800626a:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800626c:	3b04      	subs	r3, #4
 800626e:	54e2      	strb	r2, [r4, r3]
}
 8006270:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8006272:	4b03      	ldr	r3, [pc, #12]	@ (8006280 <HAL_UARTEx_SetRxFifoThreshold+0x54>)
 8006274:	6683      	str	r3, [r0, #104]	@ 0x68
 8006276:	e7f3      	b.n	8006260 <HAL_UARTEx_SetRxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 8006278:	2002      	movs	r0, #2
 800627a:	e7f9      	b.n	8006270 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800627c:	f1ffffff 	.word	0xf1ffffff
 8006280:	00010001 	.word	0x00010001

08006284 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	464e      	mov	r6, r9
 8006288:	46de      	mov	lr, fp
 800628a:	4657      	mov	r7, sl
 800628c:	4645      	mov	r5, r8
 800628e:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006290:	680e      	ldr	r6, [r1, #0]
  pinpos = 0;
 8006292:	2400      	movs	r4, #0
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006294:	2e00      	cmp	r6, #0
 8006296:	d113      	bne.n	80062c0 <LL_GPIO_Init+0x3c>
 8006298:	e05f      	b.n	800635a <LL_GPIO_Init+0xd6>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800629a:	68c5      	ldr	r5, [r0, #12]
 800629c:	46a8      	mov	r8, r5
 800629e:	4647      	mov	r7, r8
 80062a0:	690d      	ldr	r5, [r1, #16]
 80062a2:	401f      	ands	r7, r3
 80062a4:	4355      	muls	r5, r2
 80062a6:	433d      	orrs	r5, r7
 80062a8:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80062aa:	465b      	mov	r3, fp
 80062ac:	6805      	ldr	r5, [r0, #0]
 80062ae:	402b      	ands	r3, r5
 80062b0:	4665      	mov	r5, ip
 80062b2:	436a      	muls	r2, r5
 80062b4:	4313      	orrs	r3, r2
 80062b6:	6003      	str	r3, [r0, #0]
 80062b8:	0033      	movs	r3, r6
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80062ba:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80062bc:	40e3      	lsrs	r3, r4
 80062be:	d04c      	beq.n	800635a <LL_GPIO_Init+0xd6>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80062c0:	2301      	movs	r3, #1
 80062c2:	0035      	movs	r5, r6
 80062c4:	40a3      	lsls	r3, r4
 80062c6:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 80062c8:	421e      	tst	r6, r3
 80062ca:	d0f5      	beq.n	80062b8 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80062cc:	002a      	movs	r2, r5
 80062ce:	436a      	muls	r2, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80062d0:	684b      	ldr	r3, [r1, #4]
 80062d2:	2701      	movs	r7, #1
 80062d4:	469c      	mov	ip, r3
 80062d6:	0053      	lsls	r3, r2, #1
 80062d8:	189b      	adds	r3, r3, r2
 80062da:	43db      	mvns	r3, r3
 80062dc:	427f      	negs	r7, r7
 80062de:	4467      	add	r7, ip
 80062e0:	469b      	mov	fp, r3
 80062e2:	2f01      	cmp	r7, #1
 80062e4:	d8d9      	bhi.n	800629a <LL_GPIO_Init+0x16>
 80062e6:	6887      	ldr	r7, [r0, #8]
 80062e8:	46b9      	mov	r9, r7
 80062ea:	688f      	ldr	r7, [r1, #8]
 80062ec:	4357      	muls	r7, r2
 80062ee:	46b8      	mov	r8, r7
 80062f0:	464f      	mov	r7, r9
 80062f2:	401f      	ands	r7, r3
 80062f4:	46b9      	mov	r9, r7
 80062f6:	4647      	mov	r7, r8
 80062f8:	464b      	mov	r3, r9
 80062fa:	431f      	orrs	r7, r3
 80062fc:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80062fe:	6843      	ldr	r3, [r0, #4]
 8006300:	001f      	movs	r7, r3
 8006302:	68cb      	ldr	r3, [r1, #12]
 8006304:	43af      	bics	r7, r5
 8006306:	46b8      	mov	r8, r7
 8006308:	001f      	movs	r7, r3
 800630a:	436f      	muls	r7, r5
 800630c:	46b9      	mov	r9, r7
 800630e:	4647      	mov	r7, r8
 8006310:	464b      	mov	r3, r9
 8006312:	431f      	orrs	r7, r3
 8006314:	6047      	str	r7, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006316:	68c3      	ldr	r3, [r0, #12]
 8006318:	4699      	mov	r9, r3
 800631a:	690b      	ldr	r3, [r1, #16]
 800631c:	001f      	movs	r7, r3
 800631e:	4357      	muls	r7, r2
 8006320:	465b      	mov	r3, fp
 8006322:	46b8      	mov	r8, r7
 8006324:	464f      	mov	r7, r9
 8006326:	401f      	ands	r7, r3
 8006328:	46b9      	mov	r9, r7
 800632a:	4647      	mov	r7, r8
 800632c:	464b      	mov	r3, r9
 800632e:	431f      	orrs	r7, r3
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006330:	4663      	mov	r3, ip
 8006332:	60c7      	str	r7, [r0, #12]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d1b8      	bne.n	80062aa <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006338:	694b      	ldr	r3, [r1, #20]
 800633a:	4699      	mov	r9, r3
        if (currentpin < LL_GPIO_PIN_8)
 800633c:	2dff      	cmp	r5, #255	@ 0xff
 800633e:	d813      	bhi.n	8006368 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006340:	0013      	movs	r3, r2
 8006342:	4353      	muls	r3, r2
 8006344:	4698      	mov	r8, r3
 8006346:	4647      	mov	r7, r8
 8006348:	6a05      	ldr	r5, [r0, #32]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1bdb      	subs	r3, r3, r7
 800634e:	439d      	bics	r5, r3
 8006350:	464b      	mov	r3, r9
 8006352:	437b      	muls	r3, r7
 8006354:	431d      	orrs	r5, r3
 8006356:	6205      	str	r5, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8006358:	e7a7      	b.n	80062aa <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 800635a:	2000      	movs	r0, #0
 800635c:	bcf0      	pop	{r4, r5, r6, r7}
 800635e:	46bb      	mov	fp, r7
 8006360:	46b2      	mov	sl, r6
 8006362:	46a9      	mov	r9, r5
 8006364:	46a0      	mov	r8, r4
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006368:	0a2d      	lsrs	r5, r5, #8
 800636a:	436d      	muls	r5, r5
 800636c:	436d      	muls	r5, r5
 800636e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006370:	4698      	mov	r8, r3
 8006372:	012b      	lsls	r3, r5, #4
 8006374:	1b5b      	subs	r3, r3, r5
 8006376:	469a      	mov	sl, r3
 8006378:	4643      	mov	r3, r8
 800637a:	4657      	mov	r7, sl
 800637c:	43bb      	bics	r3, r7
 800637e:	4698      	mov	r8, r3
 8006380:	464b      	mov	r3, r9
 8006382:	435d      	muls	r5, r3
 8006384:	4643      	mov	r3, r8
 8006386:	431d      	orrs	r5, r3
 8006388:	6245      	str	r5, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800638a:	e78e      	b.n	80062aa <LL_GPIO_Init+0x26>

0800638c <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800638c:	4a19      	ldr	r2, [pc, #100]	@ (80063f4 <LL_TIM_Init+0x68>)
{
 800638e:	b530      	push	{r4, r5, lr}
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006390:	6803      	ldr	r3, [r0, #0]

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006392:	688d      	ldr	r5, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006394:	880c      	ldrh	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006396:	4290      	cmp	r0, r2
 8006398:	d026      	beq.n	80063e8 <LL_TIM_Init+0x5c>
 800639a:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <LL_TIM_Init+0x6c>)
 800639c:	4290      	cmp	r0, r2
 800639e:	d012      	beq.n	80063c6 <LL_TIM_Init+0x3a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <LL_TIM_Init+0x70>)
 80063a2:	4290      	cmp	r0, r2
 80063a4:	d013      	beq.n	80063ce <LL_TIM_Init+0x42>
 80063a6:	4a16      	ldr	r2, [pc, #88]	@ (8006400 <LL_TIM_Init+0x74>)
 80063a8:	4290      	cmp	r0, r2
 80063aa:	d002      	beq.n	80063b2 <LL_TIM_Init+0x26>
 80063ac:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <LL_TIM_Init+0x78>)
 80063ae:	4290      	cmp	r0, r2
 80063b0:	d111      	bne.n	80063d6 <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80063b2:	4a15      	ldr	r2, [pc, #84]	@ (8006408 <LL_TIM_Init+0x7c>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	68ca      	ldr	r2, [r1, #12]
 80063b8:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80063ba:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80063bc:	62c5      	str	r5, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80063be:	6284      	str	r4, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80063c0:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80063c2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80063c4:	e00a      	b.n	80063dc <LL_TIM_Init+0x50>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80063c6:	2270      	movs	r2, #112	@ 0x70
 80063c8:	4393      	bics	r3, r2
 80063ca:	684a      	ldr	r2, [r1, #4]
 80063cc:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80063ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006408 <LL_TIM_Init+0x7c>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	68ca      	ldr	r2, [r1, #12]
 80063d4:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80063d6:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80063d8:	62c5      	str	r5, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80063da:	6284      	str	r4, [r0, #40]	@ 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80063dc:	2201      	movs	r2, #1
 80063de:	6943      	ldr	r3, [r0, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80063e8:	2270      	movs	r2, #112	@ 0x70
 80063ea:	4393      	bics	r3, r2
 80063ec:	684a      	ldr	r2, [r1, #4]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	e7df      	b.n	80063b2 <LL_TIM_Init+0x26>
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40002000 	.word	0x40002000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800
 8006408:	fffffcff 	.word	0xfffffcff

0800640c <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 800640c:	2380      	movs	r3, #128	@ 0x80
{
 800640e:	b570      	push	{r4, r5, r6, lr}
  switch (Channel)
 8006410:	015b      	lsls	r3, r3, #5
 8006412:	4299      	cmp	r1, r3
 8006414:	d100      	bne.n	8006418 <LL_TIM_OC_Init+0xc>
 8006416:	e0db      	b.n	80065d0 <LL_TIM_OC_Init+0x1c4>
 8006418:	d82d      	bhi.n	8006476 <LL_TIM_OC_Init+0x6a>
 800641a:	2910      	cmp	r1, #16
 800641c:	d100      	bne.n	8006420 <LL_TIM_OC_Init+0x14>
 800641e:	e102      	b.n	8006626 <LL_TIM_OC_Init+0x21a>
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4299      	cmp	r1, r3
 8006426:	d152      	bne.n	80064ce <LL_TIM_OC_Init+0xc2>
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006428:	6a03      	ldr	r3, [r0, #32]
 800642a:	4e9b      	ldr	r6, [pc, #620]	@ (8006698 <LL_TIM_OC_Init+0x28c>)
 800642c:	4033      	ands	r3, r6
 800642e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006430:	6a04      	ldr	r4, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006432:	4b9a      	ldr	r3, [pc, #616]	@ (800669c <LL_TIM_OC_Init+0x290>)
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006434:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006436:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006438:	4019      	ands	r1, r3
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	4319      	orrs	r1, r3

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800643e:	4b98      	ldr	r3, [pc, #608]	@ (80066a0 <LL_TIM_OC_Init+0x294>)
 8006440:	401c      	ands	r4, r3
 8006442:	6913      	ldr	r3, [r2, #16]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006448:	6854      	ldr	r4, [r2, #4]
 800644a:	4033      	ands	r3, r6
 800644c:	0224      	lsls	r4, r4, #8
 800644e:	431c      	orrs	r4, r3

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006450:	4b94      	ldr	r3, [pc, #592]	@ (80066a4 <LL_TIM_OC_Init+0x298>)
 8006452:	4298      	cmp	r0, r3
 8006454:	d100      	bne.n	8006458 <LL_TIM_OC_Init+0x4c>
 8006456:	e073      	b.n	8006540 <LL_TIM_OC_Init+0x134>
 8006458:	4b93      	ldr	r3, [pc, #588]	@ (80066a8 <LL_TIM_OC_Init+0x29c>)
 800645a:	4298      	cmp	r0, r3
 800645c:	d100      	bne.n	8006460 <LL_TIM_OC_Init+0x54>
 800645e:	e06f      	b.n	8006540 <LL_TIM_OC_Init+0x134>
 8006460:	4b92      	ldr	r3, [pc, #584]	@ (80066ac <LL_TIM_OC_Init+0x2a0>)
 8006462:	4298      	cmp	r0, r3
 8006464:	d100      	bne.n	8006468 <LL_TIM_OC_Init+0x5c>
 8006466:	e06b      	b.n	8006540 <LL_TIM_OC_Init+0x134>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006468:	68d3      	ldr	r3, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800646a:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800646c:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800646e:	63c3      	str	r3, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006470:	6204      	str	r4, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006472:	2000      	movs	r0, #0
 8006474:	e04f      	b.n	8006516 <LL_TIM_OC_Init+0x10a>
  switch (Channel)
 8006476:	2380      	movs	r3, #128	@ 0x80
 8006478:	025b      	lsls	r3, r3, #9
 800647a:	4299      	cmp	r1, r3
 800647c:	d100      	bne.n	8006480 <LL_TIM_OC_Init+0x74>
 800647e:	e07c      	b.n	800657a <LL_TIM_OC_Init+0x16e>
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	035b      	lsls	r3, r3, #13
 8006484:	4299      	cmp	r1, r3
 8006486:	d145      	bne.n	8006514 <LL_TIM_OC_Init+0x108>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8006488:	6a03      	ldr	r3, [r0, #32]
 800648a:	4d89      	ldr	r5, [pc, #548]	@ (80066b0 <LL_TIM_OC_Init+0x2a4>)

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800648c:	4c89      	ldr	r4, [pc, #548]	@ (80066b4 <LL_TIM_OC_Init+0x2a8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800648e:	402b      	ands	r3, r5
 8006490:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006492:	6a01      	ldr	r1, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006494:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8006496:	4023      	ands	r3, r4
 8006498:	6814      	ldr	r4, [r2, #0]
 800649a:	0224      	lsls	r4, r4, #8
 800649c:	431c      	orrs	r4, r3

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800649e:	4b86      	ldr	r3, [pc, #536]	@ (80066b8 <LL_TIM_OC_Init+0x2ac>)
 80064a0:	4019      	ands	r1, r3
 80064a2:	6913      	ldr	r3, [r2, #16]
 80064a4:	051b      	lsls	r3, r3, #20
 80064a6:	430b      	orrs	r3, r1

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80064a8:	6851      	ldr	r1, [r2, #4]
 80064aa:	402b      	ands	r3, r5
 80064ac:	0509      	lsls	r1, r1, #20
 80064ae:	430b      	orrs	r3, r1

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	497c      	ldr	r1, [pc, #496]	@ (80066a4 <LL_TIM_OC_Init+0x298>)
 80064b2:	4288      	cmp	r0, r1
 80064b4:	d059      	beq.n	800656a <LL_TIM_OC_Init+0x15e>
 80064b6:	497c      	ldr	r1, [pc, #496]	@ (80066a8 <LL_TIM_OC_Init+0x29c>)
 80064b8:	4288      	cmp	r0, r1
 80064ba:	d056      	beq.n	800656a <LL_TIM_OC_Init+0x15e>
 80064bc:	497b      	ldr	r1, [pc, #492]	@ (80066ac <LL_TIM_OC_Init+0x2a0>)
 80064be:	4288      	cmp	r0, r1
 80064c0:	d053      	beq.n	800656a <LL_TIM_OC_Init+0x15e>

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80064c2:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80064c4:	6544      	str	r4, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 80064c6:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80064c8:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80064ca:	2000      	movs	r0, #0
 80064cc:	e023      	b.n	8006516 <LL_TIM_OC_Init+0x10a>
  switch (Channel)
 80064ce:	2901      	cmp	r1, #1
 80064d0:	d120      	bne.n	8006514 <LL_TIM_OC_Init+0x108>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80064d2:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80064d4:	4e71      	ldr	r6, [pc, #452]	@ (800669c <LL_TIM_OC_Init+0x290>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80064d6:	438b      	bics	r3, r1
 80064d8:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80064da:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80064dc:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80064de:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80064e0:	4034      	ands	r4, r6
 80064e2:	6816      	ldr	r6, [r2, #0]
 80064e4:	4334      	orrs	r4, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80064e6:	2602      	movs	r6, #2
 80064e8:	43b3      	bics	r3, r6
 80064ea:	6916      	ldr	r6, [r2, #16]
 80064ec:	4333      	orrs	r3, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80064ee:	438b      	bics	r3, r1
 80064f0:	6851      	ldr	r1, [r2, #4]
 80064f2:	430b      	orrs	r3, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f4:	496b      	ldr	r1, [pc, #428]	@ (80066a4 <LL_TIM_OC_Init+0x298>)
 80064f6:	4288      	cmp	r0, r1
 80064f8:	d00e      	beq.n	8006518 <LL_TIM_OC_Init+0x10c>
 80064fa:	496b      	ldr	r1, [pc, #428]	@ (80066a8 <LL_TIM_OC_Init+0x29c>)
 80064fc:	4288      	cmp	r0, r1
 80064fe:	d00b      	beq.n	8006518 <LL_TIM_OC_Init+0x10c>
 8006500:	496a      	ldr	r1, [pc, #424]	@ (80066ac <LL_TIM_OC_Init+0x2a0>)
 8006502:	4288      	cmp	r0, r1
 8006504:	d008      	beq.n	8006518 <LL_TIM_OC_Init+0x10c>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006506:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006508:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800650a:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800650c:	6342      	str	r2, [r0, #52]	@ 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800650e:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006510:	2000      	movs	r0, #0
 8006512:	e000      	b.n	8006516 <LL_TIM_OC_Init+0x10a>
  switch (Channel)
 8006514:	2001      	movs	r0, #1
}
 8006516:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006518:	2108      	movs	r1, #8
 800651a:	438b      	bics	r3, r1
 800651c:	6951      	ldr	r1, [r2, #20]
 800651e:	0089      	lsls	r1, r1, #2
 8006520:	4319      	orrs	r1, r3
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006522:	2304      	movs	r3, #4
 8006524:	4399      	bics	r1, r3
 8006526:	6893      	ldr	r3, [r2, #8]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	430b      	orrs	r3, r1
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800652c:	495a      	ldr	r1, [pc, #360]	@ (8006698 <LL_TIM_OC_Init+0x28c>)
 800652e:	4029      	ands	r1, r5
 8006530:	6995      	ldr	r5, [r2, #24]
 8006532:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006534:	4d5a      	ldr	r5, [pc, #360]	@ (80066a0 <LL_TIM_OC_Init+0x294>)
 8006536:	4029      	ands	r1, r5
 8006538:	69d5      	ldr	r5, [r2, #28]
 800653a:	006d      	lsls	r5, r5, #1
 800653c:	430d      	orrs	r5, r1
 800653e:	e7e2      	b.n	8006506 <LL_TIM_OC_Init+0xfa>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006540:	4b5e      	ldr	r3, [pc, #376]	@ (80066bc <LL_TIM_OC_Init+0x2b0>)
 8006542:	401c      	ands	r4, r3
 8006544:	6953      	ldr	r3, [r2, #20]
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	4323      	orrs	r3, r4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800654a:	4c5d      	ldr	r4, [pc, #372]	@ (80066c0 <LL_TIM_OC_Init+0x2b4>)
 800654c:	4023      	ands	r3, r4
 800654e:	6894      	ldr	r4, [r2, #8]
 8006550:	02a4      	lsls	r4, r4, #10
 8006552:	431c      	orrs	r4, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006554:	4b5b      	ldr	r3, [pc, #364]	@ (80066c4 <LL_TIM_OC_Init+0x2b8>)
 8006556:	401d      	ands	r5, r3
 8006558:	6993      	ldr	r3, [r2, #24]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800655e:	4d5a      	ldr	r5, [pc, #360]	@ (80066c8 <LL_TIM_OC_Init+0x2bc>)
 8006560:	402b      	ands	r3, r5
 8006562:	69d5      	ldr	r5, [r2, #28]
 8006564:	016d      	lsls	r5, r5, #5
 8006566:	431d      	orrs	r5, r3
 8006568:	e77e      	b.n	8006468 <LL_TIM_OC_Init+0x5c>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800656a:	6845      	ldr	r5, [r0, #4]
 800656c:	6991      	ldr	r1, [r2, #24]
 800656e:	4e57      	ldr	r6, [pc, #348]	@ (80066cc <LL_TIM_OC_Init+0x2c0>)
 8006570:	0289      	lsls	r1, r1, #10
 8006572:	4035      	ands	r5, r6
 8006574:	4329      	orrs	r1, r5
 8006576:	6041      	str	r1, [r0, #4]
 8006578:	e7a3      	b.n	80064c2 <LL_TIM_OC_Init+0xb6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800657a:	6a03      	ldr	r3, [r0, #32]
 800657c:	4d54      	ldr	r5, [pc, #336]	@ (80066d0 <LL_TIM_OC_Init+0x2c4>)
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800657e:	4c55      	ldr	r4, [pc, #340]	@ (80066d4 <LL_TIM_OC_Init+0x2c8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8006580:	402b      	ands	r3, r5
 8006582:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006584:	6a01      	ldr	r1, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006586:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8006588:	4023      	ands	r3, r4
 800658a:	6814      	ldr	r4, [r2, #0]
 800658c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800658e:	4b52      	ldr	r3, [pc, #328]	@ (80066d8 <LL_TIM_OC_Init+0x2cc>)
 8006590:	4019      	ands	r1, r3
 8006592:	6913      	ldr	r3, [r2, #16]
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	430b      	orrs	r3, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8006598:	6851      	ldr	r1, [r2, #4]
 800659a:	402b      	ands	r3, r5
 800659c:	0409      	lsls	r1, r1, #16
 800659e:	430b      	orrs	r3, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a0:	4940      	ldr	r1, [pc, #256]	@ (80066a4 <LL_TIM_OC_Init+0x298>)
 80065a2:	4288      	cmp	r0, r1
 80065a4:	d00c      	beq.n	80065c0 <LL_TIM_OC_Init+0x1b4>
 80065a6:	4940      	ldr	r1, [pc, #256]	@ (80066a8 <LL_TIM_OC_Init+0x29c>)
 80065a8:	4288      	cmp	r0, r1
 80065aa:	d009      	beq.n	80065c0 <LL_TIM_OC_Init+0x1b4>
 80065ac:	493f      	ldr	r1, [pc, #252]	@ (80066ac <LL_TIM_OC_Init+0x2a0>)
 80065ae:	4288      	cmp	r0, r1
 80065b0:	d006      	beq.n	80065c0 <LL_TIM_OC_Init+0x1b4>
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80065b2:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80065b4:	6544      	str	r4, [r0, #84]	@ 0x54
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80065b6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80065b8:	6582      	str	r2, [r0, #88]	@ 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80065ba:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80065bc:	2000      	movs	r0, #0
 80065be:	e7aa      	b.n	8006516 <LL_TIM_OC_Init+0x10a>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80065c0:	6845      	ldr	r5, [r0, #4]
 80065c2:	6991      	ldr	r1, [r2, #24]
 80065c4:	4e42      	ldr	r6, [pc, #264]	@ (80066d0 <LL_TIM_OC_Init+0x2c4>)
 80065c6:	0209      	lsls	r1, r1, #8
 80065c8:	4035      	ands	r5, r6
 80065ca:	4329      	orrs	r1, r5
 80065cc:	6041      	str	r1, [r0, #4]
 80065ce:	e7f0      	b.n	80065b2 <LL_TIM_OC_Init+0x1a6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80065d0:	6a03      	ldr	r3, [r0, #32]
 80065d2:	4e3c      	ldr	r6, [pc, #240]	@ (80066c4 <LL_TIM_OC_Init+0x2b8>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80065d4:	4c41      	ldr	r4, [pc, #260]	@ (80066dc <LL_TIM_OC_Init+0x2d0>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80065d6:	4033      	ands	r3, r6
 80065d8:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80065da:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80065dc:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80065de:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80065e0:	4023      	ands	r3, r4
 80065e2:	6814      	ldr	r4, [r2, #0]
 80065e4:	0224      	lsls	r4, r4, #8
 80065e6:	431c      	orrs	r4, r3
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80065e8:	4b37      	ldr	r3, [pc, #220]	@ (80066c8 <LL_TIM_OC_Init+0x2bc>)
 80065ea:	4019      	ands	r1, r3
 80065ec:	6913      	ldr	r3, [r2, #16]
 80065ee:	031b      	lsls	r3, r3, #12
 80065f0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80065f2:	6851      	ldr	r1, [r2, #4]
 80065f4:	4033      	ands	r3, r6
 80065f6:	0309      	lsls	r1, r1, #12
 80065f8:	430b      	orrs	r3, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	492a      	ldr	r1, [pc, #168]	@ (80066a4 <LL_TIM_OC_Init+0x298>)
 80065fc:	4288      	cmp	r0, r1
 80065fe:	d00c      	beq.n	800661a <LL_TIM_OC_Init+0x20e>
 8006600:	4929      	ldr	r1, [pc, #164]	@ (80066a8 <LL_TIM_OC_Init+0x29c>)
 8006602:	4288      	cmp	r0, r1
 8006604:	d009      	beq.n	800661a <LL_TIM_OC_Init+0x20e>
 8006606:	4929      	ldr	r1, [pc, #164]	@ (80066ac <LL_TIM_OC_Init+0x2a0>)
 8006608:	4288      	cmp	r0, r1
 800660a:	d006      	beq.n	800661a <LL_TIM_OC_Init+0x20e>
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800660c:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800660e:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006610:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006612:	6402      	str	r2, [r0, #64]	@ 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006614:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006616:	2000      	movs	r0, #0
 8006618:	e77d      	b.n	8006516 <LL_TIM_OC_Init+0x10a>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800661a:	4931      	ldr	r1, [pc, #196]	@ (80066e0 <LL_TIM_OC_Init+0x2d4>)
 800661c:	4029      	ands	r1, r5
 800661e:	6995      	ldr	r5, [r2, #24]
 8006620:	01ad      	lsls	r5, r5, #6
 8006622:	430d      	orrs	r5, r1
 8006624:	e7f2      	b.n	800660c <LL_TIM_OC_Init+0x200>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006626:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006628:	4c2c      	ldr	r4, [pc, #176]	@ (80066dc <LL_TIM_OC_Init+0x2d0>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800662a:	438b      	bics	r3, r1
 800662c:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800662e:	6a06      	ldr	r6, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006630:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006632:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006634:	4023      	ands	r3, r4
 8006636:	6814      	ldr	r4, [r2, #0]
 8006638:	0224      	lsls	r4, r4, #8
 800663a:	431c      	orrs	r4, r3
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800663c:	2320      	movs	r3, #32
 800663e:	439e      	bics	r6, r3
 8006640:	6913      	ldr	r3, [r2, #16]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	4333      	orrs	r3, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006646:	438b      	bics	r3, r1
 8006648:	6851      	ldr	r1, [r2, #4]
 800664a:	0109      	lsls	r1, r1, #4
 800664c:	4319      	orrs	r1, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	4b15      	ldr	r3, [pc, #84]	@ (80066a4 <LL_TIM_OC_Init+0x298>)
 8006650:	4298      	cmp	r0, r3
 8006652:	d00c      	beq.n	800666e <LL_TIM_OC_Init+0x262>
 8006654:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <LL_TIM_OC_Init+0x29c>)
 8006656:	4298      	cmp	r0, r3
 8006658:	d009      	beq.n	800666e <LL_TIM_OC_Init+0x262>
 800665a:	4b14      	ldr	r3, [pc, #80]	@ (80066ac <LL_TIM_OC_Init+0x2a0>)
 800665c:	4298      	cmp	r0, r3
 800665e:	d006      	beq.n	800666e <LL_TIM_OC_Init+0x262>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006660:	68d3      	ldr	r3, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006662:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006664:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006666:	6383      	str	r3, [r0, #56]	@ 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006668:	6201      	str	r1, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800666a:	2000      	movs	r0, #0
 800666c:	e753      	b.n	8006516 <LL_TIM_OC_Init+0x10a>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800666e:	2380      	movs	r3, #128	@ 0x80
 8006670:	4399      	bics	r1, r3
 8006672:	6953      	ldr	r3, [r2, #20]
 8006674:	019b      	lsls	r3, r3, #6
 8006676:	430b      	orrs	r3, r1
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006678:	2140      	movs	r1, #64	@ 0x40
 800667a:	438b      	bics	r3, r1
 800667c:	6891      	ldr	r1, [r2, #8]
 800667e:	0189      	lsls	r1, r1, #6
 8006680:	4319      	orrs	r1, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006682:	4b0f      	ldr	r3, [pc, #60]	@ (80066c0 <LL_TIM_OC_Init+0x2b4>)
 8006684:	401d      	ands	r5, r3
 8006686:	6993      	ldr	r3, [r2, #24]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800668c:	4d0b      	ldr	r5, [pc, #44]	@ (80066bc <LL_TIM_OC_Init+0x2b0>)
 800668e:	402b      	ands	r3, r5
 8006690:	69d5      	ldr	r5, [r2, #28]
 8006692:	00ed      	lsls	r5, r5, #3
 8006694:	431d      	orrs	r5, r3
 8006696:	e7e3      	b.n	8006660 <LL_TIM_OC_Init+0x254>
 8006698:	fffffeff 	.word	0xfffffeff
 800669c:	fffeff8c 	.word	0xfffeff8c
 80066a0:	fffffdff 	.word	0xfffffdff
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800
 80066b0:	ffefffff 	.word	0xffefffff
 80066b4:	feff8fff 	.word	0xfeff8fff
 80066b8:	ffdfffff 	.word	0xffdfffff
 80066bc:	fffff7ff 	.word	0xfffff7ff
 80066c0:	fffffbff 	.word	0xfffffbff
 80066c4:	ffffefff 	.word	0xffffefff
 80066c8:	ffffdfff 	.word	0xffffdfff
 80066cc:	fffbffff 	.word	0xfffbffff
 80066d0:	fffeffff 	.word	0xfffeffff
 80066d4:	fffeff8f 	.word	0xfffeff8f
 80066d8:	fffdffff 	.word	0xfffdffff
 80066dc:	feff8cff 	.word	0xfeff8cff
 80066e0:	ffffbfff 	.word	0xffffbfff

080066e4 <memset>:
 80066e4:	0003      	movs	r3, r0
 80066e6:	1882      	adds	r2, r0, r2
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	7019      	strb	r1, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	2600      	movs	r6, #0
 80066f8:	4c0c      	ldr	r4, [pc, #48]	@ (800672c <__libc_init_array+0x38>)
 80066fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006730 <__libc_init_array+0x3c>)
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	2600      	movs	r6, #0
 8006706:	f000 f823 	bl	8006750 <_init>
 800670a:	4c0a      	ldr	r4, [pc, #40]	@ (8006734 <__libc_init_array+0x40>)
 800670c:	4d0a      	ldr	r5, [pc, #40]	@ (8006738 <__libc_init_array+0x44>)
 800670e:	1b64      	subs	r4, r4, r5
 8006710:	10a4      	asrs	r4, r4, #2
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	00b3      	lsls	r3, r6, #2
 800671a:	58eb      	ldr	r3, [r5, r3]
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	00b3      	lsls	r3, r6, #2
 8006724:	58eb      	ldr	r3, [r5, r3]
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	08006988 	.word	0x08006988
 8006730:	08006988 	.word	0x08006988
 8006734:	0800698c 	.word	0x0800698c
 8006738:	08006988 	.word	0x08006988

0800673c <memcpy>:
 800673c:	2300      	movs	r3, #0
 800673e:	b510      	push	{r4, lr}
 8006740:	429a      	cmp	r2, r3
 8006742:	d100      	bne.n	8006746 <memcpy+0xa>
 8006744:	bd10      	pop	{r4, pc}
 8006746:	5ccc      	ldrb	r4, [r1, r3]
 8006748:	54c4      	strb	r4, [r0, r3]
 800674a:	3301      	adds	r3, #1
 800674c:	e7f8      	b.n	8006740 <memcpy+0x4>
	...

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	46c0      	nop			@ (mov r8, r8)
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
